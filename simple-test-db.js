/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∏–∫—Å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import './db-connect-fix.js';
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
const { Pool } = require('pg');

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('====== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –î–õ–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ======');
console.log('DATABASE_PROVIDER =', process.env.DATABASE_PROVIDER || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
console.log('FORCE_NEON_DB =', process.env.FORCE_NEON_DB || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
console.log('DISABLE_REPLIT_DB =', process.env.DISABLE_REPLIT_DB || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
console.log('OVERRIDE_DB_PROVIDER =', process.env.OVERRIDE_DB_PROVIDER || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
console.log('PGSSLMODE =', process.env.PGSSLMODE || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
console.log('PGSOCKET =', process.env.PGSOCKET || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
console.log('PGCONNECT_TIMEOUT =', process.env.PGCONNECT_TIMEOUT || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
if (!process.env.DATABASE_URL) {
  console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
pool.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', err.message);
});

pool.on('connect', () => {
  console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
});

// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
(async () => {
  console.log('\n====== –¢–ï–°–¢–û–í–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ======');
  
  try {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
    const client = await pool.connect();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PostgreSQL
    const versionResult = await client.query('SELECT version()');
    console.log('üìä –í–µ—Ä—Å–∏—è PostgreSQL:', versionResult.rows[0].version);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
      LIMIT 5;
    `);
    
    if (tablesResult.rows.length === 0) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ public');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tablesResult.rows.length} —Ç–∞–±–ª–∏—Ü, –ø–µ—Ä–≤—ã–µ 5:`);
      tablesResult.rows.forEach((row, index) => {
        console.log(`   ${index + 1}. ${row.table_name}`);
      });
    }
    
    client.release();
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.error('  –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await pool.end();
  }
})();