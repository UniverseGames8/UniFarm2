/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Replit PostgreSQL
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –∏–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
 * –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Replit, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Neon DB.
 */

import pg from 'pg';
const { Pool } = pg;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Replit PostgreSQL
const dbConfig = {
  host: 'localhost',
  port: 5432,
  user: 'runner',
  password: '',
  database: 'postgres'
};

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const pool = new Pool(dbConfig);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞
async function executeQuery(query, params = []) {
  try {
    const result = await pool.query(query, params);
    return result;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${query.slice(0, 100)}...`);
    console.error(error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
async function tableExists(tableName) {
  const query = `
    SELECT EXISTS (
      SELECT FROM pg_tables
      WHERE schemaname = 'public'
      AND tablename = $1
    );
  `;
  
  const result = await executeQuery(query, [tableName]);
  return result.rows[0].exists;
}

// –û–±—ä—è–≤–ª–µ–Ω–∏—è SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
const createTablesSql = [
  // –¢–∞–±–ª–∏—Ü–∞ auth_users
  `CREATE TABLE IF NOT EXISTS "auth_users" (
    "id" SERIAL PRIMARY KEY,
    "username" TEXT NOT NULL UNIQUE,
    "password" TEXT DEFAULT 'telegram_auth'
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ users
  `CREATE TABLE IF NOT EXISTS "users" (
    "id" SERIAL PRIMARY KEY,
    "telegram_id" BIGINT UNIQUE,
    "guest_id" TEXT UNIQUE,
    "username" TEXT,
    "wallet" TEXT,
    "ton_wallet_address" TEXT,
    "ref_code" TEXT UNIQUE,
    "parent_ref_code" TEXT,
    "balance_uni" NUMERIC(18, 6) DEFAULT '0',
    "balance_ton" NUMERIC(18, 6) DEFAULT '0',
    "uni_deposit_amount" NUMERIC(18, 6) DEFAULT '0',
    "uni_farming_start_timestamp" TIMESTAMP,
    "uni_farming_balance" NUMERIC(18, 6) DEFAULT '0',
    "uni_farming_rate" NUMERIC(18, 6) DEFAULT '0',
    "uni_farming_last_update" TIMESTAMP,
    "uni_farming_deposit" NUMERIC(18, 6) DEFAULT '0',
    "uni_farming_activated_at" TIMESTAMP,
    "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "checkin_last_date" TIMESTAMP,
    "checkin_streak" INTEGER DEFAULT 0
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ farming_deposits
  `CREATE TABLE IF NOT EXISTS "farming_deposits" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER REFERENCES "users"("id"),
    "amount_uni" NUMERIC(18, 6),
    "rate_uni" NUMERIC(5, 2),
    "rate_ton" NUMERIC(5, 2),
    "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "last_claim" TIMESTAMP,
    "is_boosted" BOOLEAN DEFAULT FALSE,
    "deposit_type" TEXT DEFAULT 'regular',
    "boost_id" INTEGER,
    "expires_at" TIMESTAMP
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ transactions
  `CREATE TABLE IF NOT EXISTS "transactions" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER REFERENCES "users"("id"),
    "type" TEXT,
    "currency" TEXT,
    "amount" NUMERIC(18, 6),
    "status" TEXT DEFAULT 'confirmed',
    "source" TEXT,
    "category" TEXT,
    "tx_hash" TEXT,
    "description" TEXT,
    "source_user_id" INTEGER,
    "wallet_address" TEXT,
    "data" TEXT,
    "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ referrals
  `CREATE TABLE IF NOT EXISTS "referrals" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER REFERENCES "users"("id") NOT NULL,
    "inviter_id" INTEGER REFERENCES "users"("id") NOT NULL,
    "level" INTEGER NOT NULL,
    "reward_uni" NUMERIC(18, 6),
    "ref_path" JSONB[],
    "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ missions
  `CREATE TABLE IF NOT EXISTS "missions" (
    "id" SERIAL PRIMARY KEY,
    "type" TEXT,
    "title" TEXT,
    "description" TEXT,
    "reward_uni" NUMERIC(18, 6),
    "is_active" BOOLEAN DEFAULT TRUE
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ user_missions
  `CREATE TABLE IF NOT EXISTS "user_missions" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER REFERENCES "users"("id"),
    "mission_id" INTEGER REFERENCES "missions"("id"),
    "completed_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ uni_farming_deposits
  `CREATE TABLE IF NOT EXISTS "uni_farming_deposits" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER REFERENCES "users"("id") NOT NULL,
    "amount" NUMERIC(18, 6) NOT NULL,
    "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "rate_per_second" NUMERIC(20, 18) NOT NULL,
    "last_updated_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "is_active" BOOLEAN DEFAULT TRUE
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ ton_boost_deposits
  `CREATE TABLE IF NOT EXISTS "ton_boost_deposits" (
    "id" SERIAL PRIMARY KEY,
    "user_id" INTEGER REFERENCES "users"("id") NOT NULL,
    "ton_amount" NUMERIC(18, 5) NOT NULL,
    "bonus_uni" NUMERIC(18, 6) NOT NULL,
    "rate_ton_per_second" NUMERIC(20, 18) NOT NULL,
    "rate_uni_per_second" NUMERIC(20, 18) NOT NULL,
    "accumulated_ton" NUMERIC(18, 10) DEFAULT '0',
    "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "last_updated_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "is_active" BOOLEAN DEFAULT TRUE
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ launch_logs
  `CREATE TABLE IF NOT EXISTS "launch_logs" (
    "id" SERIAL PRIMARY KEY,
    "telegram_user_id" BIGINT,
    "ref_code" TEXT,
    "platform" TEXT,
    "timestamp" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "user_agent" TEXT,
    "init_data" TEXT,
    "ip_address" TEXT,
    "request_id" TEXT,
    "user_id" INTEGER REFERENCES "users"("id")
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ partition_logs
  `CREATE TABLE IF NOT EXISTS "partition_logs" (
    "id" SERIAL PRIMARY KEY,
    "operation" TEXT NOT NULL,
    "partition_name" TEXT,
    "message" TEXT NOT NULL,
    "timestamp" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "status" TEXT NOT NULL,
    "error_details" TEXT
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ reward_distribution_logs
  `CREATE TABLE IF NOT EXISTS "reward_distribution_logs" (
    "id" SERIAL PRIMARY KEY,
    "batch_id" TEXT NOT NULL,
    "source_user_id" INTEGER NOT NULL,
    "earned_amount" NUMERIC(18, 6) NOT NULL,
    "currency" TEXT NOT NULL,
    "processed_at" TIMESTAMP,
    "status" TEXT DEFAULT 'pending',
    "levels_processed" INTEGER,
    "inviter_count" INTEGER,
    "total_distributed" NUMERIC(18, 6),
    "error_message" TEXT,
    "completed_at" TIMESTAMP
  )`,
  
  // –¢–∞–±–ª–∏—Ü–∞ performance_metrics
  `CREATE TABLE IF NOT EXISTS "performance_metrics" (
    "id" SERIAL PRIMARY KEY,
    "operation" TEXT NOT NULL,
    "batch_id" TEXT,
    "duration_ms" NUMERIC(12, 2) NOT NULL,
    "timestamp" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "details" TEXT
  )`
];

// SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
const createIndexesSql = [
  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users
  `CREATE INDEX IF NOT EXISTS "idx_users_parent_ref_code" ON "users" ("parent_ref_code")`,
  `CREATE INDEX IF NOT EXISTS "idx_users_ref_code" ON "users" ("ref_code")`,
  
  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions
  `CREATE INDEX IF NOT EXISTS "idx_transactions_user_id" ON "transactions" ("user_id")`,
  `CREATE INDEX IF NOT EXISTS "idx_transactions_source_user_id" ON "transactions" ("source_user_id")`,
  `CREATE INDEX IF NOT EXISTS "idx_transactions_type_status" ON "transactions" ("type", "status")`,
  
  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã referrals
  `CREATE INDEX IF NOT EXISTS "idx_referrals_user_id" ON "referrals" ("user_id")`,
  `CREATE INDEX IF NOT EXISTS "idx_referrals_inviter_id" ON "referrals" ("inviter_id")`,
  `CREATE INDEX IF NOT EXISTS "idx_referrals_user_inviter" ON "referrals" ("user_id", "inviter_id")`,
  `CREATE INDEX IF NOT EXISTS "idx_referrals_level" ON "referrals" ("level")`,
  
  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã performance_metrics
  `CREATE INDEX IF NOT EXISTS "idx_performance_metrics_timestamp" ON "performance_metrics" ("timestamp")`,
  `CREATE INDEX IF NOT EXISTS "idx_performance_metrics_operation" ON "performance_metrics" ("operation")`,
  `CREATE INDEX IF NOT EXISTS "idx_performance_metrics_batch_id" ON "performance_metrics" ("batch_id")`
];

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const insertInitialDataSql = [
  // –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã missions
  `INSERT INTO "missions" ("type", "title", "description", "reward_uni", "is_active")
  VALUES 
  ('invite', '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞', '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', 10, true),
  ('deposit', '–°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç', '–í–Ω–µ—Å–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –≤ —Ñ–∞—Ä–º–∏–Ω–≥', 5, true),
  ('check-in', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', '–ü–æ–ª—É—á–∞–π –±–æ–Ω—É—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', 1, true)
  ON CONFLICT DO NOTHING`
];

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Replit PostgreSQL...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await executeQuery('SELECT 1');
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –Ω–∞ Replit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log('üì¶ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
    for (const sql of createTablesSql) {
      await executeQuery(sql);
    }
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìá –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...');
    for (const sql of createIndexesSql) {
      await executeQuery(sql);
    }
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üìù –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    for (const sql of insertInitialDataSql) {
      await executeQuery(sql);
    }
    console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tableNames = [
      'auth_users', 'users', 'farming_deposits', 'transactions',
      'referrals', 'missions', 'user_missions', 'uni_farming_deposits',
      'ton_boost_deposits', 'launch_logs', 'partition_logs', 
      'reward_distribution_logs', 'performance_metrics'
    ];
    
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:');
    for (const tableName of tableNames) {
      const exists = await tableExists(tableName);
      console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${tableName}`);
    }
    
    console.log('\nüèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await pool.end();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      await pool.end();
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initializeDatabase();