/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è UniFarm
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ server/index.ts –∏–ª–∏ server/routes.ts
 */

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É
require('./db-connection-fix');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
const corsMiddleware = require('./fixed-cors-middleware');
const sessionManager = require('./session-manager');
const telegramAuthUtils = require('./telegram-auth-utils');
const { Pool } = require('pg');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * @returns {boolean} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function checkRequiredEnvVars() {
  const requiredVars = [
    'DATABASE_URL',
    'TELEGRAM_BOT_TOKEN'
  ];
  
  const missingVars = requiredVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.error(`[App Integrator] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingVars.join(', ')}`);
    return false;
  }
  
  return true;
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Express
 * @param {Object} app - –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express
 * @returns {Object} - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Express
 */
function applyAllFixes(app) {
  if (!app) {
    throw new Error('[App Integrator] –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express');
  }
  
  console.log('[App Integrator] üîß –ù–∞—á–∞–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  checkRequiredEnvVars();
  
  // –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  let pool = null;
  
  try {
    if (process.env.DATABASE_URL) {
      pool = new Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: {
          rejectUnauthorized: false // –î–ª—è Neon DB
        },
        max: 20, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 10000
      });
      
      console.log('[App Integrator] ‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω');
    }
  } catch (error) {
    console.error(`[App Integrator] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${error.message}`);
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  try {
    // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π CORS middleware
    corsMiddleware(app);
    
    // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
    sessionManager.setupSessionManager(app, pool);
    
    // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É –¥–∞–Ω–Ω—ã—Ö
      let storage = null;
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      try {
        storage = require('./server/storage').storage;
        console.log('[App Integrator] ‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.warn(`[App Integrator] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
      sessionManager.setupSessionRestoreRoute(app, storage);
    } catch (error) {
      console.error(`[App Integrator] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${error.message}`);
    }
    
    // 4. –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    app.get('/api/admin/db-status', async (req, res) => {
      try {
        if (!pool) {
          return res.status(500).json({
            success: false,
            error: '–ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
          });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø—É–ª–∞
        const client = await pool.connect();
        
        try {
          // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
          const result = await client.query('SELECT NOW() as time');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
          const tablesResult = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            AND table_name IN ('auth_users', 'sessions', 'transactions')
            ORDER BY table_name
          `);
          
          const tables = tablesResult.rows.map(row => row.table_name);
          
          return res.json({
            success: true,
            data: {
              serverTime: result.rows[0].time,
              database: 'PostgreSQL (Neon)',
              tables,
              connectionPool: {
                totalCount: pool.totalCount,
                idleCount: pool.idleCount,
                waitingCount: pool.waitingCount
              }
            }
          });
        } finally {
          client.release();
        }
      } catch (error) {
        console.error(`[App Integrator] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ë–î: ${error.message}`);
        
        return res.status(500).json({
          success: false,
          error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`
        });
      }
    });
    
    // 5. –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–π
    app.get('/api/admin/session-status', (req, res) => {
      try {
        return res.json({
          success: true,
          data: {
            sessionEnabled: true,
            hasSessionId: !!req.session.id,
            isAuthenticated: req.isAuthenticated ? req.isAuthenticated() : false,
            sessionUser: req.session.user ? {
              id: req.session.user.id,
              username: req.session.user.username
            } : null
          }
        });
      } catch (error) {
        console.error(`[App Integrator] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–π: ${error.message}`);
        
        return res.status(500).json({
          success: false,
          error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–π: ${error.message}`
        });
      }
    });
    
    console.log('[App Integrator] ‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
  } catch (error) {
    console.error(`[App Integrator] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${error.message}`);
  }
  
  return app;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
module.exports = {
  applyAllFixes
};

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
if (require.main === module) {
  console.log(`
===================================================
 UniFarm - –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
===================================================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ 
–ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 
–∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –Ω–∞—á–∞–ª–µ server/index.ts 
–∏–ª–∏ server/routes.ts –∏ –≤—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:

const integrator = require('./app-integrator');
integrator.applyAllFixes(app);

–ì–¥–µ app - —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express.
===================================================
`);
}