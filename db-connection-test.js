/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */

import pg from 'pg';
import dotenv from 'dotenv';

const { Pool } = pg;
dotenv.config();

// –ñ—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
function log(message, type = 'INFO') {
  const time = new Date().toISOString();
  console.log(`[${time}] [${type}] ${message}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
async function testConnection(config) {
  log(`–¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: ${JSON.stringify({
    ...config,
    password: config.password ? '***' : undefined,
    connectionString: config.connectionString ? '***' : undefined,
  })}`);
  
  const pool = new Pool(config);
  let client;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
    client = await pool.connect();
    log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const result = await client.query('SELECT NOW() as time');
    log(`‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ë–î: ${result.rows[0].time}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    if (tablesResult.rows.length === 0) {
      log('‚ö†Ô∏è –°—Ö–µ–º–∞ –ø—É—Å—Ç–∞. –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', 'WARN');
    } else {
      log(`üìã –ù–∞–π–¥–µ–Ω–æ ${tablesResult.rows.length} —Ç–∞–±–ª–∏—Ü:`);
      tablesResult.rows.forEach((row, i) => {
        log(`   ${i+1}. ${row.table_name}`);
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ PostgreSQL
    const versionResult = await client.query('SELECT version()');
    log(`üìä –í–µ—Ä—Å–∏—è PostgreSQL: ${versionResult.rows[0].version}`);
    
    return { success: true, tables: tablesResult.rows, version: versionResult.rows[0].version };
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`, 'ERROR');
    log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error)}`, 'DEBUG');
    return { success: false, error: error.message };
  } finally {
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (client) {
      try {
        client.release();
        log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      } catch (err) {
        log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${err.message}`, 'WARN');
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª
    try {
      await pool.end();
      log('üîÑ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç');
    } catch (err) {
      log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞: ${err.message}`, 'WARN');
    }
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runDiagnostics() {
  log('üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
  
  // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ sensitive –¥–∞–Ω–Ω—ã—Ö)
  log('üìã –¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  log(`DATABASE_URL: ${process.env.DATABASE_URL ? '***' : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
  log(`PGHOST: ${process.env.PGHOST || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
  log(`PGPORT: ${process.env.PGPORT || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
  log(`PGUSER: ${process.env.PGUSER ? '***' : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
  log(`PGDATABASE: ${process.env.PGDATABASE || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
  log(`PGSSLMODE: ${process.env.PGSSLMODE || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
  log(`REPLIT_DB_URL: ${process.env.REPLIT_DB_URL ? '***' : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
  log(`NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
  
  // –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DATABASE_URL
  if (process.env.DATABASE_URL) {
    log('üîÑ –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DATABASE_URL...');
    await testConnection({
      connectionString: process.env.DATABASE_URL,
      ssl: {
        rejectUnauthorized: false
      }
    });
  } else {
    log('‚ö†Ô∏è –¢–µ—Å—Ç 1 –ø—Ä–æ–ø—É—â–µ–Ω: DATABASE_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', 'WARN');
  }
  
  // –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (process.env.PGHOST && process.env.PGUSER) {
    log('üîÑ –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...');
    await testConnection({
      host: process.env.PGHOST,
      port: process.env.PGPORT || 5432,
      user: process.env.PGUSER,
      password: process.env.PGPASSWORD,
      database: process.env.PGDATABASE,
      ssl: {
        rejectUnauthorized: false
      }
    });
  } else {
    log('‚ö†Ô∏è –¢–µ—Å—Ç 2 –ø—Ä–æ–ø—É—â–µ–Ω: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', 'WARN');
  }
  
  // –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (–µ—Å–ª–∏ —ç—Ç–æ Replit)
  log('üîÑ –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ Replit...');
  await testConnection({
    host: 'localhost',
    port: 5432,
    user: 'postgres',
    password: 'postgres',
    database: 'postgres',
    ssl: false
  });
  
  log('üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
runDiagnostics().catch(err => {
  log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${err.message}`, 'ERROR');
  log(err.stack, 'DEBUG');
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
export { runDiagnostics };