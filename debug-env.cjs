/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */

process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç db-selector
const fs = require('fs');
const path = require('path');

function checkFilesForImport(dir, searchPattern) {
  const files = fs.readdirSync(dir, { withFileTypes: true });
  
  for (const file of files) {
    if (file.isDirectory()) {
      if (file.name !== 'node_modules' && file.name !== '.git') {
        checkFilesForImport(path.join(dir, file.name), searchPattern);
      }
      continue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ JavaScript/TypeScript —Ñ–∞–π–ª—ã
    if (!['.js', '.ts', '.cjs', '.mjs'].some(ext => file.name.endsWith(ext))) {
      continue;
    }
    
    const filePath = path.join(dir, file.name);
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      
      if (content.includes(searchPattern)) {
        console.log(`üîç Found in: ${filePath}`);
        
        // –í—ã–≤–µ–¥–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        const lines = content.split('\n');
        for (let i = 0; i < lines.length; i++) {
          if (lines[i].includes(searchPattern)) {
            console.log(`   Line ${i+1}: ${lines[i].trim()}`);
            
            // –í—ã–≤–µ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–æ –∏ –ø–æ—Å–ª–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            const startLine = Math.max(0, i - 5);
            const endLine = Math.min(lines.length - 1, i + 5);
            console.log(`   Context:`);
            for (let j = startLine; j <= endLine; j++) {
              if (j === i) {
                console.log(`   > ${j+1}: ${lines[j].trim()}`);
              } else {
                console.log(`     ${j+1}: ${lines[j].trim()}`);
              }
            }
            console.log();
          }
        }
      }
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}: ${err.message}`);
    }
  }
}

console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö db-selector...');
checkFilesForImport('.', 'db-selector');

console.log('\nüìä –¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('DATABASE_PROVIDER:', process.env.DATABASE_PROVIDER);
console.log('FORCE_NEON_DB:', process.env.FORCE_NEON_DB);
console.log('DISABLE_REPLIT_DB:', process.env.DISABLE_REPLIT_DB);
console.log('OVERRIDE_DB_PROVIDER:', process.env.OVERRIDE_DB_PROVIDER);

console.log('\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env:');
try {
  const envContent = fs.readFileSync('.env', 'utf8');
  console.log(envContent);
} catch (err) {
  console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env: ${err.message}`);
}

console.log('\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env.neon:');
try {
  const envNeonContent = fs.readFileSync('.env.neon', 'utf8');
  console.log(envNeonContent);
} catch (err) {
  console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env.neon: ${err.message}`);
}

console.log('\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ start-unified.js/cjs:');
try {
  let unifiedContent;
  if (fs.existsSync('start-unified.js')) {
    unifiedContent = fs.readFileSync('start-unified.js', 'utf8');
  } else if (fs.existsSync('start-unified.cjs')) {
    unifiedContent = fs.readFileSync('start-unified.cjs', 'utf8');
  }
  
  if (unifiedContent) {
    const dbProviderMatch = unifiedContent.match(/DATABASE_PROVIDER\s*=\s*['"](\w+)['"]/g);
    if (dbProviderMatch) {
      console.log(`–ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_PROVIDER: ${dbProviderMatch.join(', ')}`);
    } else {
      console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_PROVIDER –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —è–≤–Ω–æ');
    }
  }
} catch (err) {
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ start-unified: ${err.message}`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º dist/index.js
console.log('\nüîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ dist/index.js:');
try {
  if (fs.existsSync('dist/index.js')) {
    const distContent = fs.readFileSync('dist/index.js', 'utf8');
    const dbProviderMatches = distContent.match(/DATABASE_PROVIDER\s*=\s*['"](\w+)['"]/g);
    if (dbProviderMatches) {
      console.log(`–ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_PROVIDER –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ: ${dbProviderMatches.join(', ')}`);
    } else {
      console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_PROVIDER –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —è–≤–Ω–æ –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ db-selector –≤ dist/index.js
    if (distContent.includes('db-selector')) {
      console.log('–ù–∞–π–¥–µ–Ω –∏–º–ø–æ—Ä—Ç db-selector –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ');
    } else {
      console.log('–ò–º–ø–æ—Ä—Ç db-selector –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ');
    }
  } else {
    console.log('–§–∞–π–ª dist/index.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
} catch (err) {
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ dist/index.js: ${err.message}`);
}