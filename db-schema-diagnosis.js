/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü, –∏–Ω–¥–µ–∫—Å—ã, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏,
 * –∞ —Ç–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node db-schema-diagnosis.js
 */

// –Ø–≤–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
console.log('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...');

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º Unix —Å–æ–∫–µ—Ç—ã –¥–ª—è PostgreSQL
process.env.PGHOST = process.env.PGHOST || 'localhost';  
process.env.PGSSLMODE = 'prefer';
process.env.PGSOCKET = ''; 
process.env.PGCONNECT_TIMEOUT = '10';

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ Neon DB
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';

console.log('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚úÖ –§–∏–∫—Å –¥–ª—è –ë–î –ø—Ä–∏–º–µ–Ω–µ–Ω');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
const { Pool } = require('pg');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
if (!process.env.DATABASE_URL) {
  console.error('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB.');
  process.exit(1);
} else {
  // –ú–∞—Å–∫–∏—Ä—É–µ–º URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö
  const maskedUrl = process.env.DATABASE_URL.replace(/\/\/([^:]+):([^@]+)@/, '//\\1:***@');
  console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üîê DATABASE_URL:', maskedUrl);
}

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Neon DB
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false // –î–ª—è Neon DB
  },
  max: 5,
  idleTimeoutMillis: 10000,
  connectionTimeoutMillis: 5000
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
pool.on('error', (err) => {
  console.error('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', err.message);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
async function executeQuery(query, params = []) {
  try {
    const client = await pool.connect();
    try {
      const result = await client.query(query, params);
      return result.rows;
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
async function getTables() {
  const query = `
    SELECT 
      table_name,
      (SELECT count(*) FROM information_schema.columns WHERE table_name = t.table_name) AS column_count,
      (SELECT pg_catalog.obj_description(pg_catalog.pg_class.oid)
       FROM pg_catalog.pg_class
       WHERE pg_catalog.pg_class.relname = t.table_name LIMIT 1) AS table_description
    FROM information_schema.tables t
    WHERE table_schema = 'public'
    ORDER BY table_name;
  `;
  
  return await executeQuery(query);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
async function getTableStructure(tableName) {
  const query = `
    SELECT 
      column_name, 
      data_type, 
      character_maximum_length,
      column_default,
      is_nullable,
      (SELECT pg_catalog.col_description(pg_catalog.pg_class.oid, cols.ordinal_position)
       FROM pg_catalog.pg_class
       WHERE pg_catalog.pg_class.relname = cols.table_name LIMIT 1) AS column_description
    FROM information_schema.columns cols
    WHERE table_name = $1
    ORDER BY ordinal_position;
  `;
  
  return await executeQuery(query, [tableName]);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–∞—Ö
async function getPrimaryKeys(tableName) {
  const query = `
    SELECT 
      tc.constraint_name, 
      kcu.column_name
    FROM information_schema.table_constraints tc
    JOIN information_schema.key_column_usage kcu
      ON tc.constraint_name = kcu.constraint_name
    WHERE tc.table_name = $1 
      AND tc.constraint_type = 'PRIMARY KEY'
    ORDER BY kcu.ordinal_position;
  `;
  
  return await executeQuery(query, [tableName]);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö
async function getForeignKeys(tableName) {
  const query = `
    SELECT
      tc.constraint_name,
      kcu.column_name,
      ccu.table_name AS foreign_table_name,
      ccu.column_name AS foreign_column_name
    FROM information_schema.table_constraints tc
    JOIN information_schema.key_column_usage kcu
      ON tc.constraint_name = kcu.constraint_name
    JOIN information_schema.constraint_column_usage ccu
      ON ccu.constraint_name = tc.constraint_name
    WHERE tc.table_name = $1
      AND tc.constraint_type = 'FOREIGN KEY'
    ORDER BY kcu.ordinal_position;
  `;
  
  return await executeQuery(query, [tableName]);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö
async function getIndexes(tableName) {
  const query = `
    SELECT
      indexname AS index_name,
      indexdef AS index_definition
    FROM pg_indexes
    WHERE tablename = $1
    ORDER BY indexname;
  `;
  
  return await executeQuery(query, [tableName]);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
async function checkTableIntegrity(tableName) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    const countQuery = `SELECT COUNT(*) as count FROM "${tableName}"`;
    const countResult = await executeQuery(countQuery);
    const rowCount = parseInt(countResult[0].count);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–∞—Ö
    const primaryKeys = await getPrimaryKeys(tableName);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (primaryKeys.length > 0) {
      const pkColumns = primaryKeys.map(pk => `"${pk.column_name}"`).join(', ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π
      const duplicatesQuery = `
        SELECT ${pkColumns}, COUNT(*) 
        FROM "${tableName}" 
        GROUP BY ${pkColumns} 
        HAVING COUNT(*) > 1
        LIMIT 5;
      `;
      
      const duplicates = await executeQuery(duplicatesQuery);
      
      return {
        rowCount,
        hasPrimaryKey: true,
        primaryKeyColumns: primaryKeys.map(pk => pk.column_name),
        hasDuplicates: duplicates.length > 0,
        duplicatesCount: duplicates.length > 0 ? duplicates.length : 0
      };
    } else {
      return {
        rowCount,
        hasPrimaryKey: false,
        warning: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∏–º–µ–µ—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞'
      };
    }
  } catch (error) {
    return {
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã: ${error.message}`
    };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã transactions
async function checkTransactionsPartitioning() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã transactions
    const tableExistsQuery = `
      SELECT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'transactions'
      ) AS exists;
    `;
    
    const tableExists = await executeQuery(tableExistsQuery);
    
    if (!tableExists[0].exists) {
      return {
        exists: false,
        message: '–¢–∞–±–ª–∏—Ü–∞ transactions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
    const isPartitionedQuery = `
      SELECT
        relkind = 'p' AS is_partitioned
      FROM pg_class
      WHERE relname = 'transactions';
    `;
    
    const isPartitioned = await executeQuery(isPartitionedQuery);
    
    if (!isPartitioned.length || !isPartitioned[0].is_partitioned) {
      return {
        exists: true,
        isPartitioned: false,
        message: '–¢–∞–±–ª–∏—Ü–∞ transactions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞'
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–∏—Ü–∏–π
    const partitionsQuery = `
      SELECT
        child.relname AS partition_name,
        pg_catalog.pg_get_expr(child.relpartbound, child.oid, true) AS partition_expression
      FROM pg_inherits
      JOIN pg_class parent ON pg_inherits.inhparent = parent.oid
      JOIN pg_class child ON pg_inherits.inhrelid = child.oid
      WHERE parent.relname = 'transactions'
      ORDER BY child.relname;
    `;
    
    const partitions = await executeQuery(partitionsQuery);
    
    return {
      exists: true,
      isPartitioned: true,
      partitionsCount: partitions.length,
      partitions: partitions.map(p => ({
        name: p.partition_name,
        expression: p.partition_expression
      }))
    };
  } catch (error) {
    return {
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`
    };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function checkAuthTablesExist() {
  const requiredTables = ['auth_users', 'sessions', 'telegram_users'];
  const results = {};
  
  for (const tableName of requiredTables) {
    try {
      const query = `
        SELECT EXISTS (
          SELECT 1 FROM information_schema.tables 
          WHERE table_name = $1
        ) AS exists;
      `;
      
      const result = await executeQuery(query, [tableName]);
      results[tableName] = result[0].exists;
      
      if (result[0].exists) {
        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        const countQuery = `SELECT COUNT(*) AS count FROM "${tableName}"`;
        const countResult = await executeQuery(countQuery);
        results[`${tableName}_count`] = parseInt(countResult[0].count);
      }
    } catch (error) {
      results[tableName] = false;
      results[`${tableName}_error`] = error.message;
    }
  }
  
  return results;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function runDiagnostics() {
  console.log('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üîç –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü...');
    const tables = await getTables();
    console.log(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tables.length} —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ public`);
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–ª–æ–Ω–æ–∫
    console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üìä –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:');
    tables.forEach((table, index) => {
      console.log(`   ${index + 1}. ${table.table_name} (–∫–æ–ª–æ–Ω–æ–∫: ${table.column_count})${table.table_description ? ` - ${table.table_description}` : ''}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const authTablesStatus = await checkAuthTablesExist();
    
    console.log('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üìã –°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    for (const [key, value] of Object.entries(authTablesStatus)) {
      if (!key.includes('_count') && !key.includes('_error')) {
        console.log(`   ${key}: ${value ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        
        if (value && authTablesStatus[`${key}_count`] !== undefined) {
          console.log(`      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${authTablesStatus[`${key}_count`]}`);
        }
        
        if (authTablesStatus[`${key}_error`]) {
          console.log(`      –û—à–∏–±–∫–∞: ${authTablesStatus[`${key}_error`]}`);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã transactions
    console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã transactions...');
    const transactionsPartitioning = await checkTransactionsPartitioning();
    
    if (transactionsPartitioning.error) {
      console.error(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚ùå ${transactionsPartitioning.error}`);
    } else if (!transactionsPartitioning.exists) {
      console.log(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚ö†Ô∏è ${transactionsPartitioning.message}`);
    } else if (!transactionsPartitioning.isPartitioned) {
      console.log(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚ö†Ô∏è ${transactionsPartitioning.message}`);
    } else {
      console.log(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ ${transactionsPartitioning.partitionsCount} –ø–∞—Ä—Ç–∏—Ü–∏–π`);
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏—Ü–∏—è—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
      if (transactionsPartitioning.partitionsCount <= 10) {
        console.log('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üìã –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–∏—Ü–∏–π:');
        transactionsPartitioning.partitions.forEach((partition, index) => {
          console.log(`   ${index + 1}. ${partition.name}: ${partition.expression}`);
        });
      }
    }
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    const criticalTables = ['auth_users', 'sessions', 'telegram_users', 'transactions', 'referrals'];
    
    for (const tableName of criticalTables) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      const tableExists = tables.some(t => t.table_name === tableName);
      
      if (!tableExists) {
        console.log(`\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ "${tableName}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!`);
        continue;
      }
      
      console.log(`\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã "${tableName}"...`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      const columns = await getTableStructure(tableName);
      console.log(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üìã –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã "${tableName}":`);
      columns.forEach((column, index) => {
        console.log(`   ${index + 1}. ${column.column_name} (${column.data_type}${column.character_maximum_length ? `(${column.character_maximum_length})` : ''})${column.is_nullable === 'YES' ? ' NULL' : ' NOT NULL'}${column.column_default ? ` DEFAULT ${column.column_default}` : ''}`);
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏
      const primaryKeys = await getPrimaryKeys(tableName);
      console.log(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üîë –ü–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏ —Ç–∞–±–ª–∏—Ü—ã "${tableName}":`);
      if (primaryKeys.length === 0) {
        console.log(`   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ "${tableName}" –Ω–µ –∏–º–µ–µ—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞!`);
      } else {
        primaryKeys.forEach((pk, index) => {
          console.log(`   ${index + 1}. ${pk.column_name} (${pk.constraint_name})`);
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
      const foreignKeys = await getForeignKeys(tableName);
      console.log(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ —Ç–∞–±–ª–∏—Ü—ã "${tableName}":`);
      if (foreignKeys.length === 0) {
        console.log(`   ‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ "${tableName}" –Ω–µ –∏–º–µ–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π`);
      } else {
        foreignKeys.forEach((fk, index) => {
          console.log(`   ${index + 1}. ${fk.column_name} -> ${fk.foreign_table_name}.${fk.foreign_column_name} (${fk.constraint_name})`);
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
      const indexes = await getIndexes(tableName);
      console.log(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üìë –ò–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã "${tableName}":`);
      if (indexes.length === 0) {
        console.log(`   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ "${tableName}" –Ω–µ –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤!`);
      } else {
        indexes.forEach((index, idx) => {
          console.log(`   ${idx + 1}. ${index.index_name}`);
          console.log(`      ${index.index_definition}`);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      console.log(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã "${tableName}"...`);
      const integrity = await checkTableIntegrity(tableName);
      
      if (integrity.error) {
        console.error(`   ‚ùå ${integrity.error}`);
      } else {
        console.log(`   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${integrity.rowCount}`);
        
        if (integrity.hasPrimaryKey) {
          console.log(`   ‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á: ${integrity.primaryKeyColumns.join(', ')}`);
          
          if (integrity.hasDuplicates) {
            console.log(`   ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: ${integrity.duplicatesCount}`);
          } else {
            console.log(`   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
          }
        } else if (integrity.warning) {
          console.log(`   ‚ö†Ô∏è ${integrity.warning}`);
        }
      }
    }
    
    console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  } finally {
    await pool.end();
    console.log('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
runDiagnostics().catch(error => {
  console.error('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°—Ö–µ–º—ã] ‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  process.exit(1);
});