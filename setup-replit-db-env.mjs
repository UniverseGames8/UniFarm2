/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PostgreSQL –Ω–∞ Replit
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª .env —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è
 * –ª–æ–∫–∞–ª—å–Ω–æ–π PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Replit, —É–¥–∞–ª—è—è –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Neon DB.
 */

import fs from 'fs';
import path from 'path';

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env
const envPath = path.resolve('.env');

// –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PostgreSQL –Ω–∞ Replit
const newEnvVars = {
  // –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  'DATABASE_URL': 'postgresql://runner@localhost:5432/postgres',
  
  // –û—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è PostgreSQL
  'PGHOST': 'localhost',
  'PGPORT': '5432',
  'PGUSER': 'runner',
  'PGPASSWORD': '',
  'PGDATABASE': 'postgres',
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  'USE_LOCAL_DB_ONLY': 'true'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ .env (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
function readEnvFile() {
  try {
    if (fs.existsSync(envPath)) {
      return fs.readFileSync(envPath, 'utf8');
    }
    return '';
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ .env:', error);
    return '';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ .env –≤ –æ–±—ä–µ–∫—Ç
function parseEnvFile(content) {
  const envVars = {};
  
  if (!content) {
    return envVars;
  }
  
  const lines = content.split('\n');
  
  for (const line of lines) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if (!line || line.startsWith('#')) {
      continue;
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
    const match = line.match(/^([^=]+)=(.*)$/);
    if (match) {
      const key = match[1].trim();
      const value = match[2].trim();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –ø—É—Å—Ç–æ–π
      if (key) {
        envVars[key] = value;
      }
    }
  }
  
  return envVars;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ .env
function updateEnvFile(currentEnvVars) {
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ (–Ω–æ–≤—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  const updatedEnvVars = {
    ...currentEnvVars,
    ...newEnvVars
  };
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Neon DB
  const filteredEnvVars = { ...updatedEnvVars };
  Object.keys(filteredEnvVars).forEach(key => {
    // –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Neon DB
    if (key.includes('NEON') || 
        (filteredEnvVars[key] && typeof filteredEnvVars[key] === 'string' && 
         filteredEnvVars[key].includes('neon'))) {
      delete filteredEnvVars[key];
    }
  });
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ .env
  let envContent = '# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PostgreSQL –Ω–∞ Replit\n';
  envContent += '# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–∫—Ä–∏–ø—Ç–æ–º setup-replit-db-env.mjs\n';
  envContent += '# –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ' + new Date().toISOString() + '\n\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  Object.entries(filteredEnvVars).forEach(([key, value]) => {
    envContent += `${key}=${value}\n`;
  });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
  try {
    fs.writeFileSync(envPath, envContent, 'utf8');
    console.log('‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ .env:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
function exportEnvironmentVariables() {
  Object.entries(newEnvVars).forEach(([key, value]) => {
    process.env[key] = value;
  });
  
  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PostgreSQL –Ω–∞ Replit...');
  
  // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª .env
  const currentContent = readEnvFile();
  const currentEnvVars = parseEnvFile(currentContent);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª .env
  const success = updateEnvFile(currentEnvVars);
  
  if (success) {
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    exportEnvironmentVariables();
    
    console.log('\nüèÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìä –¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ PostgreSQL –Ω–∞ Replit');
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    console.log('\nüìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    Object.entries(newEnvVars).forEach(([key, value]) => {
      console.log(`   ${key}=${value}`);
    });
    
    console.log('\n‚ùó –í–∞–∂–Ω–æ: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É!');
  } else {
    console.error('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();