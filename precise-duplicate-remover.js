/**
 * –¢–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ missions –º–∞—Ä—à—Ä—É—Ç–æ–≤
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã, —É–¥–∞–ª—è–µ—Ç –≤—Ç–æ—Ä—ã–µ
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîß –¢–û–ß–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–ö–ê–¢–û–í MISSIONS –ú–ê–†–®–†–£–¢–û–í\n');

function removeDuplicates() {
  const routesFile = path.join(__dirname, 'server', 'routes-new.ts');
  
  if (!fs.existsSync(routesFile)) {
    console.log('‚ùå –§–∞–π–ª routes-new.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  let content = fs.readFileSync(routesFile, 'utf8');
  const lines = content.split('\n');
  
  // –ù–∞–π–¥–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å missions –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
  const missionRoutes = [
    '/api/v2/missions/active',
    '/api/v2/missions/complete', 
    '/api/v2/user-missions'
  ];
  
  console.log('üîç –ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í:');
  
  const routeOccurrences = {};
  
  // –ù–∞–π—Ç–∏ –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  missionRoutes.forEach(route => {
    routeOccurrences[route] = [];
    lines.forEach((line, index) => {
      if (line.includes(route) && line.includes('app.get') || line.includes('app.post')) {
        routeOccurrences[route].push({
          lineNumber: index + 1,
          content: line.trim(),
          index: index
        });
      }
    });
    
    console.log(`  ${route}: –Ω–∞–π–¥–µ–Ω–æ ${routeOccurrences[route].length} –≤—Ö–æ–∂–¥–µ–Ω–∏–π`);
    routeOccurrences[route].forEach((occurrence, i) => {
      console.log(`    ${i + 1}. –°—Ç—Ä–æ–∫–∞ ${occurrence.lineNumber}: ${occurrence.content}`);
    });
  });
  
  console.log('\nüéØ –ü–õ–ê–ù –£–î–ê–õ–ï–ù–ò–Ø:');
  console.log('–û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã, —É–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä—ã–µ\n');
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–±–∏–≤–∞–ª–∏—Å—å)
  const linesToRemove = [];
  
  missionRoutes.forEach(route => {
    const occurrences = routeOccurrences[route];
    if (occurrences.length > 1) {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
      for (let i = 1; i < occurrences.length; i++) {
        linesToRemove.push(occurrences[i].index);
        console.log(`‚úÇÔ∏è  –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç: —Å—Ç—Ä–æ–∫–∞ ${occurrences[i].lineNumber}`);
      }
    }
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  linesToRemove.sort((a, b) => b - a);
  
  console.log(`\nüîß –£–î–ê–õ–Ø–ï–ú ${linesToRemove.length} –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–• –°–¢–†–û–ö:`);
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  linesToRemove.forEach(lineIndex => {
    console.log(`  –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É ${lineIndex + 1}: ${lines[lineIndex].trim()}`);
    lines.splice(lineIndex, 1);
  });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  const newContent = lines.join('\n');
  fs.writeFileSync(routesFile, newContent, 'utf8');
  
  console.log('\n‚úÖ –î–£–ë–õ–ò–ö–ê–¢–´ –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù–´!');
  console.log('‚úÖ –§–∞–π–ª routes-new.ts –æ–±–Ω–æ–≤–ª–µ–Ω');
  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n');
}

// –ó–∞–ø—É—Å–∫
removeDuplicates();