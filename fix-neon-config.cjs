/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Neon DB
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã,
 * –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Replit PostgreSQL –≤–º–µ—Å—Ç–æ Neon DB.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m'
};

console.log(`${colors.blue}==========================================`);
console.log(`= –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò NEON DB =`);
console.log(`==========================================${colors.reset}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env.neon
console.log(`${colors.blue}[1] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env.neon${colors.reset}`);
if (!fs.existsSync('.env.neon')) {
  console.log(`${colors.red}‚ùå –§–∞–π–ª .env.neon –Ω–µ –Ω–∞–π–¥–µ–Ω!${colors.reset}`);
  process.exit(1);
}

// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env.neon
const envNeonContent = fs.readFileSync('.env.neon', 'utf-8');
console.log(`${colors.green}‚úÖ –§–∞–π–ª .env.neon –Ω–∞–π–¥–µ–Ω${colors.reset}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
const dbUrlMatch = envNeonContent.match(/DATABASE_URL=(.+)/);
if (!dbUrlMatch) {
  console.log(`${colors.red}‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.neon${colors.reset}`);
} else {
  const dbUrl = dbUrlMatch[1];
  if (dbUrl.includes('neon.tech')) {
    console.log(`${colors.green}‚úÖ DATABASE_URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ Neon DB: ${dbUrl.replace(/:[^:]*@/, ':***@')}${colors.reset}`);
  } else {
    console.log(`${colors.red}‚ùå DATABASE_URL –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ Neon DB: ${dbUrl}${colors.reset}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB
console.log(`${colors.blue}[2] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB${colors.reset}`);
const forceNeonDb = envNeonContent.includes('FORCE_NEON_DB=true');
const disableReplitDb = envNeonContent.includes('DISABLE_REPLIT_DB=true');
const dbProvider = envNeonContent.match(/DATABASE_PROVIDER=(\w+)/)?.[1];
const overrideProvider = envNeonContent.match(/OVERRIDE_DB_PROVIDER=(\w+)/)?.[1];

console.log(`FORCE_NEON_DB: ${forceNeonDb ? colors.green + '‚úÖ true' : colors.red + '‚ùå false'}${colors.reset}`);
console.log(`DISABLE_REPLIT_DB: ${disableReplitDb ? colors.green + '‚úÖ true' : colors.red + '‚ùå false'}${colors.reset}`);
console.log(`DATABASE_PROVIDER: ${dbProvider === 'neon' ? colors.green + '‚úÖ neon' : colors.red + '‚ùå ' + dbProvider}${colors.reset}`);
console.log(`OVERRIDE_DB_PROVIDER: ${overrideProvider === 'neon' ? colors.green + '‚úÖ neon' : colors.red + '‚ùå ' + overrideProvider}${colors.reset}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª server/db-selector-new.ts
console.log(`${colors.blue}[3] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ server/db-selector-new.ts${colors.reset}`);
const dbSelectorPath = path.join('server', 'db-selector-new.ts');
if (!fs.existsSync(dbSelectorPath)) {
  console.log(`${colors.red}‚ùå –§–∞–π–ª ${dbSelectorPath} –Ω–µ –Ω–∞–π–¥–µ–Ω!${colors.reset}`);
} else {
  const dbSelectorContent = fs.readFileSync(dbSelectorPath, 'utf-8');
  console.log(`${colors.green}‚úÖ –§–∞–π–ª ${dbSelectorPath} –Ω–∞–π–¥–µ–Ω${colors.reset}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ —Ñ–∞–π–ª–µ db-selector-new.ts
  const forcedNeonLines = [
    'return \'neon\';',
    'currentDatabaseProvider = \'neon\';',
    '–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï NEON DB'
  ];
  
  let allLinesFound = true;
  let missingLines = [];
  
  forcedNeonLines.forEach(line => {
    if (!dbSelectorContent.includes(line)) {
      allLinesFound = false;
      missingLines.push(line);
    }
  });
  
  if (allLinesFound) {
    console.log(`${colors.green}‚úÖ –§–∞–π–ª ${dbSelectorPath} —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB${colors.reset}`);
  } else {
    console.log(`${colors.red}‚ùå –§–∞–π–ª ${dbSelectorPath} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏:${colors.reset}`);
    missingLines.forEach(line => {
      console.log(`   - ${line}`);
    });
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª server/index.ts –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–º–ø–æ—Ä—Ç–∞ db-selector-new
console.log(`${colors.blue}[4] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ db-selector-new –≤ server/index.ts${colors.reset}`);
const indexPath = path.join('server', 'index.ts');
if (!fs.existsSync(indexPath)) {
  console.log(`${colors.red}‚ùå –§–∞–π–ª ${indexPath} –Ω–µ –Ω–∞–π–¥–µ–Ω!${colors.reset}`);
} else {
  const indexContent = fs.readFileSync(indexPath, 'utf-8');
  console.log(`${colors.green}‚úÖ –§–∞–π–ª ${indexPath} –Ω–∞–π–¥–µ–Ω${colors.reset}`);
  
  if (indexContent.includes('import { setDatabaseProvider } from "./db-selector-new"')) {
    console.log(`${colors.green}‚úÖ –§–∞–π–ª ${indexPath} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç setDatabaseProvider –∏–∑ db-selector-new${colors.reset}`);
  } else {
    console.log(`${colors.red}‚ùå –§–∞–π–ª ${indexPath} –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç setDatabaseProvider –∏–∑ db-selector-new${colors.reset}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª server/db.ts (Neon DB)
console.log(`${colors.blue}[5] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ server/db.ts (Neon DB)${colors.reset}`);
const dbPath = path.join('server', 'db.ts');
if (!fs.existsSync(dbPath)) {
  console.log(`${colors.red}‚ùå –§–∞–π–ª ${dbPath} –Ω–µ –Ω–∞–π–¥–µ–Ω!${colors.reset}`);
} else {
  const dbContent = fs.readFileSync(dbPath, 'utf-8');
  console.log(`${colors.green}‚úÖ –§–∞–π–ª ${dbPath} –Ω–∞–π–¥–µ–Ω${colors.reset}`);
  
  if (dbContent.includes('console.log(\'[DB-NEON] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Neon DB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\');')) {
    console.log(`${colors.green}‚úÖ –§–∞–π–ª ${dbPath} —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Neon DB${colors.reset}`);
  } else {
    console.log(`${colors.red}‚ùå –§–∞–π–ª ${dbPath} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Neon DB${colors.reset}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–∏ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
console.log(`${colors.blue}[6] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö${colors.reset}`);
const otherDbSelectors = [
  'db-selector.ts',
  'db-selector.js',
  'db-override.ts',
  'db-override.js'
];

otherDbSelectors.forEach(file => {
  const filePath = path.join('server', file);
  if (fs.existsSync(filePath)) {
    console.log(`${colors.yellow}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${filePath}${colors.reset}`);
    const content = fs.readFileSync(filePath, 'utf-8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ server/index.ts
    if (indexPath && fs.existsSync(indexPath)) {
      const indexContent = fs.readFileSync(indexPath, 'utf-8');
      if (indexContent.includes(`import { setDatabaseProvider } from "./${file.replace(/\.[^.]+$/, '')}"`)) {
        console.log(`${colors.red}‚ùå –≠—Ç–æ—Ç —Ñ–∞–π–ª –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ server/index.ts –≤–º–µ—Å—Ç–æ db-selector-new.ts!${colors.reset}`);
      }
    }
  }
});

// –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log(`${colors.blue}==========================================`);
console.log(`= –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò =`);
console.log(`==========================================${colors.reset}`);

// –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
console.log(`${colors.yellow}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:${colors.reset}`);
console.log(`1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon`);
console.log(`2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ start-with-neon-db.js –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞–π–ª dist/index.js, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏`);
console.log(`3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è`);
console.log(`4. –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É npm run build –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞`);
console.log(`5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_PROVIDER –≤ –∫–∞–∫–æ–º-—Ç–æ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –∫–æ–¥–∞`);

console.log(`${colors.blue}===========================================${colors.reset}`);