/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–ø–ª–æ—è UniFarm —Å –¥–æ—Å—Ç—É–ø–æ–º —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
 * CommonJS –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Replit
 */

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.NODE_ENV = 'production';
process.env.FORCE_NEON_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';
process.env.DATABASE_PROVIDER = 'neon';
process.env.SKIP_TELEGRAM_CHECK = 'true';
process.env.ALLOW_BROWSER_ACCESS = 'true';

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
console.log('=================================================');
console.log('  UNIFARM - –ü–†–Ø–ú–û–ô –î–û–°–¢–£–ü –ß–ï–†–ï–ó –ë–†–ê–£–ó–ï–†');
console.log('=================================================');
console.log(`NODE_ENV = ${process.env.NODE_ENV}`);
console.log(`FORCE_NEON_DB = ${process.env.FORCE_NEON_DB}`);
console.log(`SKIP_TELEGRAM_CHECK = ${process.env.SKIP_TELEGRAM_CHECK}`);
console.log('=================================================');
console.log(`–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toISOString()}`);
console.log('=================================================');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
const express = require('express');
const path = require('path');
const fs = require('fs');
const http = require('http');

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
const PORT = process.env.PORT || 3000;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
const distPath = path.join(__dirname, 'dist', 'public');
const clientDistPath = path.join(__dirname, 'client', 'dist');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫
const hasDistFolder = fs.existsSync(distPath);
const hasClientDistFolder = fs.existsSync(clientDistPath);

// –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
let staticPath = hasDistFolder ? distPath : hasClientDistFolder ? clientDistPath : null;

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
if (staticPath) {
  console.log(`–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑: ${staticPath}`);
  app.use(express.static(staticPath));
} else {
  console.log('–ü–∞–ø–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}

// –ü—Ä–æ—Å—Ç–æ–π API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    config: {
      NODE_ENV: process.env.NODE_ENV,
      FORCE_NEON_DB: process.env.FORCE_NEON_DB,
      SKIP_TELEGRAM_CHECK: process.env.SKIP_TELEGRAM_CHECK,
      DATABASE_PROVIDER: process.env.DATABASE_PROVIDER
    }
  });
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const fallbackHtml = `
<!DOCTYPE html>
<html>
  <head>
    <title>UniFarm</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 40px;
        line-height: 1.6;
        color: #333;
        background-color: #f9f9f9;
      }
      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 30px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      }
      h1 { 
        color: #0088cc; 
        text-align: center;
        margin-bottom: 30px;
      }
      .status { 
        background: #e8f5e9;
        padding: 20px; 
        border-radius: 8px;
        margin-bottom: 30px;
        text-align: center;
      }
      .info {
        background: #e3f2fd;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
      }
      .logo {
        font-size: 48px;
        text-align: center;
        margin-bottom: 20px;
      }
      a {
        color: #0088cc;
        text-decoration: none;
      }
      a:hover {
        text-decoration: underline;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="logo">üåæ</div>
      <h1>UniFarm</h1>
      <div class="status">
        <p>‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
        <p>–í—Ä–µ–º—è: ${new Date().toISOString()}</p>
      </div>
      <div class="info">
        <p>–≠—Ç–æ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞ UniFarm –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.</p>
        <p>–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API: <a href="/api/health">/api/health</a></p>
      </div>
    </div>
  </body>
</html>
`;

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.get('*', (req, res) => {
  if (staticPath && fs.existsSync(path.join(staticPath, 'index.html'))) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å index.html, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    res.sendFile(path.join(staticPath, 'index.html'));
  } else {
    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É-–∑–∞–≥–ª—É—à–∫—É
    res.send(fallbackHtml);
  }
});

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(app);
server.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  server.close(() => {
    console.log('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});