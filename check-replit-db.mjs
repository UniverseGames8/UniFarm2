/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
 * 
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
 */

import { Pool } from 'pg';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç DATABASE_URL
let connectionConfig;
let dbProvider = 'replit'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Replit

// –ï—Å–ª–∏ –µ—Å—Ç—å DATABASE_URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
if (process.env.DATABASE_URL) {
  connectionConfig = {
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.DATABASE_URL.includes('localhost') ? false : { rejectUnauthorized: false }
  };
  dbProvider = process.env.DATABASE_URL.includes('neon') ? 'neon' : 'external';
} else {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PostgreSQL –æ—Ç Replit
  connectionConfig = {
    host: 'localhost',
    port: 5432,
    user: 'runner',
    password: '',
    database: 'postgres',
  };
}

console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${dbProvider} PostgreSQL...`);
console.log('üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');

if (connectionConfig.connectionString) {
  // –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ URL —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  let safeUrl = connectionConfig.connectionString.replace(/\/\/([^:]+):([^@]+)@/, '//***:***@');
  console.log(`  Connection URL: ${safeUrl}`);
} else {
  // –î–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  console.log(`  Host: ${connectionConfig.host}`);
  console.log(`  Port: ${connectionConfig.port}`);
  console.log(`  User: ${connectionConfig.user}`);
  console.log(`  Database: ${connectionConfig.database}`);
}

async function checkDatabaseConnection() {
  const pool = new Pool(connectionConfig);
  
  try {
    // –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...');
    const result = await client.query('SELECT current_timestamp as time, current_database() as db_name');
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:');
    console.log(`  –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].time}`);
    console.log(`  –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${result.rows[0].db_name}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü...');
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    if (tables.rows.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tables.rows.length} —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`);
      tables.rows.forEach((row, index) => {
        console.log(`  ${index + 1}. ${row.table_name}`);
      });
    } else {
      console.log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è.');
    }
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    client.release();
    await pool.end();
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    if (error.code) {
      console.error(`üìå –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
    }
    
    try {
      await pool.end();
    } catch (endError) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞
    }
    
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('  1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å PostgreSQL –∑–∞–ø—É—â–µ–Ω –≤ Replit');
    console.log('  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('  3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DATABASE_PROVIDER=replit –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDatabaseConnection();