#!/usr/bin/env node

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

console.log('üîÑ –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ UniFarm...');

try {
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
  try {
    await execAsync('pkill -f "npm.*dev" || true');
    await execAsync('pkill -f "node.*server" || true');
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  }

  console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ñ–æ–Ω–µ
  const child = exec('npm run dev', (error, stdout, stderr) => {
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
      return;
    }
  });
  
  child.stdout?.on('data', (data) => {
    console.log(data.toString());
  });
  
  child.stderr?.on('data', (data) => {
    console.error(data.toString());
  });
  
  console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!');
  console.log('üì± –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –±–æ—Ç–µ @UniFarming_Bot');
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:', error);
}