/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Neon —Å –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º–æ–π Drizzle
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ø—Ä—è–º–æ–π —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ö–æ–¥–∏—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –∏ –Ω–∞–ø—Ä—è–º—É—é —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ Neon DB —á–µ—Ä–µ–∑ —Å—Ö–µ–º—É Drizzle
 */

import 'dotenv/config';
import fs from 'fs';
import { drizzle } from 'drizzle-orm/node-postgres';
import { migrate } from 'drizzle-orm/node-postgres/migrator';
import pkg from 'pg';
const { Pool } = pkg;

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.neon
if (fs.existsSync('.env.neon')) {
  const envContent = fs.readFileSync('.env.neon', 'utf-8');
  const envLines = envContent.split('\n');
  
  envLines.forEach(line => {
    if (line && !line.startsWith('#')) {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length) {
        process.env[key.trim()] = valueParts.join('=').trim();
      }
    }
  });
  
  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.neon –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB
if (!process.env.DATABASE_URL || !process.env.DATABASE_URL.includes('neon.tech')) {
  console.error('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ Neon DB');
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env.neon —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Neon DB');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å Neon DB
console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Neon DB...');
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: true
  }
});

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É Drizzle
import * as schema from './shared/schema.js';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Drizzle —Å –Ω–∞—à–µ–π —Å—Ö–µ–º–æ–π
const db = drizzle(pool, { schema });

console.log('üõ†Ô∏è –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ Neon DB...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
try {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const result = await pool.query('SELECT NOW() AS time');
  console.log(`‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Neon DB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${result.rows[0].time}`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
  const existingTables = await pool.query(`
    SELECT table_name 
    FROM information_schema.tables 
    WHERE table_schema = 'public'
  `);
  
  if (existingTables.rows.length > 0) {
    console.log('üìã –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã:');
    existingTables.rows.forEach(row => {
      console.log(`   - ${row.table_name}`);
    });
    
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ö–µ–º—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const requiredTables = ['users', 'transactions', 'referrals'];
    const missingTables = requiredTables.filter(tableName => 
      !existingTables.rows.some(row => row.table_name === tableName)
    );
    
    if (missingTables.length > 0) {
      console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: ${missingTables.join(', ')}`);
    } else {
      console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
    }
  } else {
    console.log('üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ drizzle-orm
    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const migrationsDir = './drizzle';
      if (!fs.existsSync(migrationsDir)) {
        fs.mkdirSync(migrationsDir, { recursive: true });
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã
      await migrate(db, { migrationsFolder: migrationsDir });
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤ Neon DB');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', error.message);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –Ω–æ–≤—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
  try {
    const usersCount = await db.query.users.count();
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç ${usersCount} –∑–∞–ø–∏—Å–µ–π`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã users:', error.message);
  }
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Neon DB:', error.message);
  console.error(error.stack);
} finally {
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  await pool.end();
  console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
}