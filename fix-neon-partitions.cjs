/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π –≤ Neon DB –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CommonJS –≤–º–µ—Å—Ç–æ ES –º–æ–¥—É–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */

require('dotenv').config({ path: '.env.neon' });
const { Pool } = require('pg');
const fs = require('fs');
const { format, addDays } = require('date-fns');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π
async function createDailyPartitions() {
  log('\nüõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Ç–∏—Ü–∏—è–º–∏ –≤ Neon DB', colors.cyan + colors.bold);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Neon DB
  process.env.FORCE_NEON_DB = 'true';
  process.env.DISABLE_REPLIT_DB = 'true';
  process.env.OVERRIDE_DB_PROVIDER = 'neon';
  process.env.DATABASE_PROVIDER = 'neon';
  process.env.USE_LOCAL_DB_ONLY = 'false';
  process.env.NODE_ENV = 'production';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.DATABASE_URL) {
    log('‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', colors.red);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env.neon
    if (fs.existsSync('.env.neon')) {
      const envContent = fs.readFileSync('.env.neon', 'utf-8');
      const envLines = envContent.split('\n');
      
      envLines.forEach(line => {
        if (line && !line.startsWith('#')) {
          const [key, ...valueParts] = line.split('=');
          if (key && valueParts.length) {
            process.env[key.trim()] = valueParts.join('=').trim();
          }
        }
      });
      
      log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.neon –∑–∞–≥—Ä—É–∂–µ–Ω—ã', colors.green);
    } else {
      log('‚ùå –§–∞–π–ª .env.neon –Ω–µ –Ω–∞–π–¥–µ–Ω', colors.red);
      process.exit(1);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –µ—Å—Ç—å neon.tech
  if (!process.env.DATABASE_URL || !process.env.DATABASE_URL.includes('neon.tech')) {
    log('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ Neon DB', colors.red);
    log(`–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${process.env.DATABASE_URL?.replace(/:[^:]*@/, ':***@')}`, colors.yellow);
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –µ—Å—Ç—å sslmode=require
  if (!process.env.DATABASE_URL.includes('sslmode=require')) {
    log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sslmode=require', colors.yellow);
    log('–î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä sslmode=require –≤ URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', colors.yellow);
    
    const url = process.env.DATABASE_URL;
    process.env.DATABASE_URL = url.includes('?') 
      ? `${url}&sslmode=require` 
      : `${url}?sslmode=require`;
  }
  
  let pool;
  try {
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: {
        rejectUnauthorized: true
      },
      max: 10, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—É–ª–µ
      idleTimeoutMillis: 30000, // –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      connectionTimeoutMillis: 8000, // –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    const client = await pool.connect();
    log(`üîå –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB`, colors.green);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ transactions –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
    const isPartitioned = await checkPartitioning(client);
    
    if (!isPartitioned) {
      log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ transactions –Ω–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞', colors.yellow);
      log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã', colors.yellow);
      log('–ü—Ä–∏–º–µ—Ä: node server/migrations/create_auto_partitioned_transactions.js', colors.yellow);
    } else {
      log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions —É–∂–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞', colors.green);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä—Ç–∏—Ü–∏–π
      const partitions = await getPartitionsList(client);
      
      if (partitions.length > 0) {
        log(`\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏ (${partitions.length}):`, colors.cyan);
        partitions.forEach((partition, index) => {
          if (index < 10) {
            log(`   - ${partition.partition_name}`, colors.cyan);
          } else if (index === 10) {
            log(`   - ... –∏ –µ—â—ë ${partitions.length - 10} –ø–∞—Ä—Ç–∏—Ü–∏–π`, colors.cyan);
          }
        });
        
        log('\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π...', colors.yellow);
        const overlappingPartitions = await checkPartitionOverlaps(client);
        
        if (overlappingPartitions.length > 0) {
          log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π:', colors.red);
          overlappingPartitions.forEach(overlap => {
            log(`   - ${overlap.partition1} –∏ ${overlap.partition2} –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É: ${overlap.range}`, colors.red);
          });
          
          const fixOverlaps = await promptYesNo('–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è?');
          if (fixOverlaps) {
            await fixPartitionOverlaps(client, overlappingPartitions);
          }
        } else {
          log('‚úÖ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã', colors.green);
        }
      } else {
        log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—Ç–∏—Ü–∏–∏', colors.yellow);
      }
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
      const createMonthlyPartitions = await promptYesNo('–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü?');
      
      if (createMonthlyPartitions) {
        await createPartitionsForCurrentMonth(client);
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    client.release();
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, colors.red);
    console.error(error);
  } finally {
    if (pool) {
      await pool.end();
      log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ', colors.blue);
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
 */
async function checkPartitioning(client) {
  try {
    const query = `
      SELECT pt.relname as parent_table, 
             c.relname as child_table,
             pg_get_expr(c.relpartbound, c.oid) as partition_expression
      FROM pg_inherits i
      JOIN pg_class pt ON pt.oid = i.inhparent
      JOIN pg_class c ON c.oid = i.inhrelid
      JOIN pg_namespace n ON n.oid = c.relnamespace
      WHERE pt.relname = 'transactions' 
      AND n.nspname = 'public'
      LIMIT 1;
    `;
    
    const result = await client.query(query);
    return result.rowCount > 0;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏—Ü–∏–π
 */
async function getPartitionsList(client) {
  try {
    const query = `
      SELECT
        child.relname AS partition_name,
        pg_size_pretty(pg_total_relation_size(child.oid)) AS size,
        pg_get_expr(child.relpartbound, child.oid) AS partition_expression
      FROM pg_inherits i
      JOIN pg_class parent ON parent.oid = i.inhparent
      JOIN pg_class child ON child.oid = i.inhrelid
      JOIN pg_namespace n ON n.oid = parent.relnamespace
      WHERE parent.relname = 'transactions'
      AND n.nspname = 'public'
      ORDER BY
        child.relname;
    `;
    
    const result = await client.query(query);
    return result.rows;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π: ${error.message}`, colors.red);
    return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π
 */
async function checkPartitionOverlaps(client) {
  try {
    const partitions = await getPartitionsList(client);
    const overlaps = [];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–∑ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ø–∞—Ä—Ç–∏—Ü–∏–π
    const partitionRanges = partitions.map(p => {
      const expr = p.partition_expression;
      const matches = expr.match(/FROM \('(.+?)'\) TO \('(.+?)'\)/);
      if (matches && matches.length >= 3) {
        return {
          name: p.partition_name,
          from: matches[1],
          to: matches[2]
        };
      }
      return null;
    }).filter(p => p !== null);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    for (let i = 0; i < partitionRanges.length; i++) {
      for (let j = i + 1; j < partitionRanges.length; j++) {
        const p1 = partitionRanges[i];
        const p2 = partitionRanges[j];
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        if ((p1.from < p2.to && p1.to > p2.from) ||
            (p2.from < p1.to && p2.to > p1.from)) {
          overlaps.push({
            partition1: p1.name,
            partition2: p2.name,
            range: `${Math.max(p1.from, p2.from)} - ${Math.min(p1.to, p2.to)}`
          });
        }
      }
    }
    
    return overlaps;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø–∞—Ä—Ç–∏—Ü–∏–π: ${error.message}`, colors.red);
    return [];
  }
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π
 */
async function fixPartitionOverlaps(client, overlaps) {
  try {
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    for (const overlap of overlaps) {
      log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É ${overlap.partition1} –∏ ${overlap.partition2}...`, colors.yellow);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
      const tempTable = `temp_fix_${Date.now()}`;
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      await client.query(`
        CREATE TABLE ${tempTable} (
          id SERIAL,
          user_id INTEGER NOT NULL,
          amount DECIMAL(18, 9) NOT NULL,
          type TEXT NOT NULL,
          currency TEXT,
          status TEXT,
          source TEXT,
          category TEXT,
          tx_hash TEXT,
          description TEXT,
          source_user_id INTEGER,
          data TEXT,
          wallet_address TEXT,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )
      `);
      
      // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–µ–∏—Ö –ø–∞—Ä—Ç–∏—Ü–∏–π
      await client.query(`
        INSERT INTO ${tempTable} (id, user_id, amount, type, currency, status, source, category, tx_hash, 
                                 description, source_user_id, data, wallet_address, created_at)
        SELECT id, user_id, amount, type, currency, status, source, category, tx_hash, 
               description, source_user_id, data, wallet_address, created_at
        FROM ${overlap.partition1}
      `);
      
      await client.query(`
        INSERT INTO ${tempTable} (id, user_id, amount, type, currency, status, source, category, tx_hash, 
                                 description, source_user_id, data, wallet_address, created_at)
        SELECT id, user_id, amount, type, currency, status, source, category, tx_hash, 
               description, source_user_id, data, wallet_address, created_at
        FROM ${overlap.partition2}
      `);
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏
      await client.query(`DROP TABLE IF EXISTS ${overlap.partition1}`);
      await client.query(`DROP TABLE IF EXISTS ${overlap.partition2}`);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
      // (—ç—Ç–∞ —á–∞—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–∏—Ü–∏—è—Ö)
      
      // –û—á–∏—â–∞–µ–º
      await client.query(`DROP TABLE IF EXISTS ${tempTable}`);
      
      log(`‚úÖ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–µ–∂–¥—É ${overlap.partition1} –∏ ${overlap.partition2} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ`, colors.green);
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø–∞—Ä—Ç–∏—Ü–∏–π: ${error.message}`, colors.red);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
 */
async function createPartitionsForCurrentMonth(client) {
  try {
    const today = new Date();
    const year = today.getFullYear();
    const month = today.getMonth() + 1; // JavaScript –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Å—è—Ü –æ—Ç 0 –¥–æ 11
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    const daysInMonth = new Date(year, month, 0).getDate();
    
    log(`\nüóìÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–π –Ω–∞ ${month}/${year} (${daysInMonth} –¥–Ω–µ–π)`, colors.cyan);
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month - 1, day);
      const dateStr = format(date, 'yyyy_MM_dd');
      const partitionName = `transactions_${dateStr}`;
      
      const startDate = format(date, 'yyyy-MM-dd');
      const endDate = format(addDays(date, 1), 'yyyy-MM-dd');
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–∞—Ä—Ç–∏—Ü–∏—è
        const checkQuery = `
          SELECT 1 FROM pg_class c
          JOIN pg_namespace n ON n.oid = c.relnamespace
          WHERE c.relname = $1 AND n.nspname = 'public'
        `;
        const checkResult = await client.query(checkQuery, [partitionName]);
        
        if (checkResult.rowCount > 0) {
          log(`‚è© –ü–∞—Ä—Ç–∏—Ü–∏—è ${partitionName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`, colors.yellow);
          continue;
        }
        
        log(`üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏ ${partitionName} –¥–ª—è –¥–∞—Ç—ã ${startDate}`, colors.blue);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏—é
        await client.query(`
          CREATE TABLE IF NOT EXISTS ${partitionName}
          PARTITION OF transactions
          FOR VALUES FROM ('${startDate}') TO ('${endDate}');
        `);
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        await client.query(`CREATE INDEX IF NOT EXISTS ${partitionName}_user_id_idx ON ${partitionName} (user_id)`);
        await client.query(`CREATE INDEX IF NOT EXISTS ${partitionName}_type_idx ON ${partitionName} (type)`);
        await client.query(`CREATE INDEX IF NOT EXISTS ${partitionName}_created_at_idx ON ${partitionName} (created_at)`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∏
        await client.query(`
          INSERT INTO partition_logs 
          (operation, partition_name, status, notes) 
          VALUES 
          ('create', $1, 'success', $2)
        `, [partitionName, `Partition created for date ${startDate}`]);
        
        log(`‚úÖ –ü–∞—Ä—Ç–∏—Ü–∏—è ${partitionName} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`, colors.green);
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–∏ ${partitionName}: ${error.message}`, colors.red);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        try {
          await client.query(`
            INSERT INTO partition_logs 
            (operation, partition_name, status, notes, error_details) 
            VALUES 
            ('create', $1, 'error', $2, $3)
          `, [partitionName, `Failed to create partition for date ${startDate}`, error.message]);
        } catch (logError) {
          log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ –ª–æ–≥: ${logError.message}`, colors.red);
        }
      }
    }
    
    log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–π –¥–ª—è ${month}/${year} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`, colors.green);
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π –¥–ª—è –º–µ—Å—è—Ü–∞: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞/–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (mock)
 */
async function promptYesNo(question) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  // –ù–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
  log(`‚ùì ${question} (–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º: –î–∞)`, colors.magenta);
  return true;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  createDailyPartitions();
}

module.exports = { createDailyPartitions };