/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */

import pg from 'pg';
import https from 'https';
import { promisify } from 'util';

const { Client } = pg;

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ DATABASE_URL
const dbUrl = process.env.DATABASE_URL;
const urlObj = new URL(dbUrl.replace(/^postgresql:\/\//, 'https://'));

const host = urlObj.hostname;
const port = urlObj.port || '5432';
const database = urlObj.pathname.substring(1);
const user = urlObj.username;
const password = urlObj.searchParams.has('password') ? 
                urlObj.searchParams.get('password') : 
                urlObj.password;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞
async function checkHostConnectivity() {
  console.log(`üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞ ${host}...`);
  
  return new Promise((resolve) => {
    const req = https.get(`https://${host}`, (res) => {
      console.log(`‚úÖ –•–æ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${res.statusCode}`);
      resolve(true);
    });
    
    req.on('error', (error) => {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ö–æ—Å—Ç–∞: ${error.message}`);
      resolve(false);
    });
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –≤ 5 —Å–µ–∫—É–Ω–¥
    req.setTimeout(5000, () => {
      console.log('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ö–æ—Å—Ç–∞');
      req.abort();
      resolve(false);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function testConnection() {
  console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon Database...');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞
  const hostAvailable = await checkHostConnectivity();
  
  if (!hostAvailable) {
    console.log('‚ö†Ô∏è –•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const client = new Client({
    host,
    port,
    database,
    user,
    password,
    ssl: {
      rejectUnauthorized: false
    },
    connectionTimeoutMillis: 10000
  });
  
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await client.connect();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
    const serverInfoResult = await client.query('SELECT version()');
    console.log(`üìä –í–µ—Ä—Å–∏—è PostgreSQL: ${serverInfoResult.rows[0].version}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
    const tableCheckResult = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'users'
      ) as exists
    `);
    
    if (tableCheckResult.rows[0].exists) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users
      const countResult = await client.query('SELECT COUNT(*) FROM users');
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users: ${countResult.rows[0].count}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
      const usersResult = await client.query('SELECT id, username, ref_code FROM users ORDER BY id DESC LIMIT 5');
      
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
      usersResult.rows.forEach((user, i) => {
        console.log(`  ${i+1}. ID: ${user.id}, Username: ${user.username}, RefCode: ${user.ref_code}`);
      });
    } else {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  } finally {
    try {
      await client.end();
      console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    } catch (e) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
testConnection().catch(error => {
  console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});