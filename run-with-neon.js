/**
 * –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Neon DB –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫ —Å—Ö–µ–º—ã
 */

import 'dotenv/config';
import { exec } from 'child_process';
import * as fs from 'fs';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.neon
if (fs.existsSync('.env.neon')) {
  const envContent = fs.readFileSync('.env.neon', 'utf-8');
  const envLines = envContent.split('\n');
  
  envLines.forEach(line => {
    if (line && !line.startsWith('#')) {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length) {
        process.env[key.trim()] = valueParts.join('=').trim();
      }
    }
  });
  
  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.neon –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Neon DB
console.log('üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB...');
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';
process.env.USE_LOCAL_DB_ONLY = 'false';
process.env.NODE_ENV = 'production';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL –¥–ª—è Neon DB
if (!process.env.DATABASE_URL || !process.env.DATABASE_URL.includes('neon.tech')) {
  console.error('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Neon DB');
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env.neon —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Neon DB');
  process.exit(1);
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å partition_logs
console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ–ª–µ–º partition_logs...');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∫–æ–¥–æ–º
const partitionManagerPath = path.join(process.cwd(), 'server', 'controllers', 'partitionManager.ts');

if (fs.existsSync(partitionManagerPath)) {
  let content = fs.readFileSync(partitionManagerPath, 'utf-8');
  
  // –ó–∞–º–µ–Ω—è–µ–º operation_type –Ω–∞ operation
  content = content.replace(/operation_type/g, 'operation');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  fs.writeFileSync(partitionManagerPath, content);
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–ª–µ operation_type –Ω–∞ operation –≤ partitionManager.ts');
} else {
  console.log('‚ö†Ô∏è –§–∞–π–ª partitionManager.ts –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏–∏...');

// –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
console.log('üîß –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç...');
try {
  const result = exec('npm run build', (error, stdout, stderr) => {
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: ${error.message}`);
      console.error('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏');
    } else {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    startApplication();
  });
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: ${error.message}`);
  console.error('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
  startApplication();
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function startApplication() {
  console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Neon DB...');
  console.log('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log(`- DATABASE_PROVIDER: ${process.env.DATABASE_PROVIDER}`);
  console.log(`- FORCE_NEON_DB: ${process.env.FORCE_NEON_DB}`);
  console.log(`- DATABASE_URL: ${process.env.DATABASE_URL.replace(/:[^:]*@/, ':***@')}`);
  console.log(`- NODE_ENV: ${process.env.NODE_ENV}`);
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const node = exec('node --max-old-space-size=512 dist/index.js', { 
      env: process.env 
    });
    
    node.stdout.pipe(process.stdout);
    node.stderr.pipe(process.stderr);
    
    node.on('exit', (code) => {
      if (code !== 0) {
        console.error(`\n‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –∫–æ–¥–æ–º ${code}`);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    process.on('SIGINT', () => {
      console.log('\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      node.kill();
      process.exit(0);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
    process.exit(1);
  }
}