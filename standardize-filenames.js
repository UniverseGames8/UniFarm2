/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã, —á—Ç–æ–±—ã –æ–Ω–∏ —Å—Å—ã–ª–∞–ª–∏—Å—å –Ω–∞
 * —Ñ–∞–π–ª—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º. –í –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
 * —Ñ–∞–π–ª–æ–≤-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–∞–º–∏ —Ñ–∞–π–ª—ã, –∞ —Ç–æ–ª—å–∫–æ
 * –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã.
 * 
 * –°–æ–≥–ª–∞—à–µ–Ω–∏—è –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏:
 * - –§–∞–π–ª—ã —Å–µ—Ä–≤–∏—Å–æ–≤: camelCase + Service.ts
 * - –§–∞–π–ª—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: camelCase + Controller.ts
 * - –§–∞–π–ª—ã —É—Ç–∏–ª–∏—Ç: camelCase.ts
 * - –§–∞–π–ª—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ React: PascalCase.tsx
 */

import fs from 'fs';
import path from 'path';
import { glob } from 'glob';
import { exec } from 'child_process';
import { promisify } from 'util';

const execPromise = promisify(exec);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const CONFIG = {
  // –°–ø–∏—Å–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ { oldImport: '–∏–º–ø–æ—Ä—Ç/–≤/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º/—Ä–µ–≥–∏—Å—Ç—Ä–µ', newImport: '–∏–º–ø–æ—Ä—Ç/–≤/–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º/—Ä–µ–≥–∏—Å—Ç—Ä–µ' }
  importFixList: [
    // –°–µ—Ä–≤–∏—Å—ã (camelCase)
    { oldImport: './UserService', newImport: './userService' },
    { oldImport: './TransactionService', newImport: './transactionService' },
    { oldImport: './SessionService', newImport: './sessionService' },
    { oldImport: '@server/services/UserService', newImport: '@server/services/userService' },
    { oldImport: '@server/services/TransactionService', newImport: '@server/services/transactionService' },
    { oldImport: '@server/services/SessionService', newImport: '@server/services/sessionService' },
    { oldImport: './services/UserService', newImport: './services/userService' },
    { oldImport: './services/TransactionService', newImport: './services/transactionService' },
    { oldImport: './services/SessionService', newImport: './services/sessionService' },
    
    // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (camelCase)
    { oldImport: './UserController', newImport: './userController' },
    { oldImport: './TransactionController', newImport: './transactionController' },
    { oldImport: './SessionController', newImport: './sessionController' },
    { oldImport: '@server/controllers/UserController', newImport: '@server/controllers/userController' },
    { oldImport: '@server/controllers/TransactionController', newImport: '@server/controllers/transactionController' },
    { oldImport: '@server/controllers/SessionController', newImport: '@server/controllers/sessionController' },
    { oldImport: './controllers/UserController', newImport: './controllers/userController' },
    { oldImport: './controllers/TransactionController', newImport: './controllers/transactionController' },
    { oldImport: './controllers/SessionController', newImport: './controllers/sessionController' },
  ],
  
  // –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
  filesToRemoveAfterFix: [
    'server/services/UserService.ts',
    'server/services/TransactionService.ts',
    'server/services/SessionService.ts',
    'server/controllers/UserController.ts',
    'server/controllers/TransactionController.ts',
    'server/controllers/SessionController.ts',
  ],
  
  // –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
  projectRoot: './',
  
  // –§–∞–π–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–º–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏
  filesToSearch: [
    './server/routes.ts',
    './server/routes-new.ts',
    './server/index.ts',
    './server/controllers/*.ts',
    './server/services/*.ts'
  ],
  
  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è - —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
  excludedFiles: [
    '**/node_modules/**',
    '**/dist/**',
    '**/build/**',
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–∏ —Ñ–∞–π–ª—ã-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∏
    '**/UserService.ts',
    '**/TransactionService.ts',
    '**/SessionService.ts',
    '**/UserController.ts',
    '**/TransactionController.ts',
    '**/SessionController.ts'
  ]
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function fileExists(filePath) {
  try {
    await fs.promises.access(filePath, fs.constants.F_OK);
    return true;
  } catch (error) {
    return false;
  }
}

async function createBackupOfFile(filePath) {
  const backupPath = `${filePath}.bak`;
  await fs.promises.copyFile(filePath, backupPath);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);
  return backupPath;
}

async function revertFromBackup(backupPath) {
  const originalPath = backupPath.replace('.bak', '');
  await fs.promises.copyFile(backupPath, originalPath);
  console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${originalPath}`);
}

async function getAllFilesToUpdate() {
  let files = [];
  
  for (const pattern of CONFIG.filesToSearch) {
    const matchedFiles = await glob(pattern, { ignore: CONFIG.excludedFiles });
    files.push(...matchedFiles);
  }
  
  return files;
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function moveFile(oldPath, newPath) {
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  if (!(await fileExists(oldPath))) {
    console.warn(`‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${oldPath}`);
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
  if (await fileExists(newPath)) {
    // –§–∞–π–ª –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏–∑-–∑–∞ case-insensitive —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    const oldContent = await fs.promises.readFile(oldPath, 'utf8');
    const newContent = await fs.promises.readFile(newPath, 'utf8');
    
    if (oldContent === newContent) {
      console.log(`‚úÖ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ –Ω–æ–≤–æ–º—É –ø—É—Ç–∏: ${newPath}`);
      return true;
    } else {
      console.error(`‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç: —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: ${newPath}`);
      return false;
    }
  }
  
  // –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const targetDir = path.dirname(newPath);
  try {
    await fs.promises.mkdir(targetDir, { recursive: true });
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  }
  
  // –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
  await fs.promises.copyFile(oldPath, newPath);
  console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${oldPath} -> ${newPath}`);
  
  return true;
}

async function checkAndFixImportsInFile(file) {
  let content = await fs.promises.readFile(file, 'utf8');
  let fileWasUpdated = false;
  
  // –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–º–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
  for (const fixItem of CONFIG.importFixList) {
    const { oldImport, newImport } = fixItem;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–æ–≤
    const importPatterns = [
      // ES6 –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç: import { something } from 'module-name'
      `import\\s+\\{[^}]*\\}\\s+from\\s+['"]${oldImport}['"]`,
      // ES6 –∏–º–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: import Name from 'module-name'
      `import\\s+[^{]*\\s+from\\s+['"]${oldImport}['"]`,
      // ES6 –∏–º–ø–æ—Ä—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω: import * as name from 'module-name'
      `import\\s+\\*\\s+as\\s+[^\\s]+\\s+from\\s+['"]${oldImport}['"]`,
      // –¢–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç: import 'module-name'
      `import\\s+['"]${oldImport}['"]`,
      // CommonJS –∏–º–ø–æ—Ä—Ç: require('module-name')
      `require\\(['"]${oldImport}['"]\\)`
    ];
    
    for (const pattern of importPatterns) {
      const regex = new RegExp(pattern, 'g');
      if (regex.test(content)) {
        // –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        if (!fileWasUpdated) {
          await createBackupOfFile(file);
          fileWasUpdated = true;
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        content = content.replace(regex, (match) => {
          return match.replace(oldImport, newImport);
        });
      }
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if (fileWasUpdated) {
    await fs.promises.writeFile(file, content, 'utf8');
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ: ${file}`);
    return true;
  }
  
  return false;
}

async function removeProxyFiles() {
  console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤ —Å –≤–µ—Ä—Ö–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º...');
  
  let successCount = 0;
  let errorCount = 0;
  
  for (const filePath of CONFIG.filesToRemoveAfterFix) {
    const fullPath = path.join(CONFIG.projectRoot, filePath);
    const fileName = path.basename(filePath, '.ts');
    
    try {
      if (await fileExists(fullPath)) {
        // –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∏–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –≥–¥–µ-—Ç–æ –∏–º–ø–æ—Ä—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: grep –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ 1, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ,
        // —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ execPromise, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ
        try {
          const importsCheckResult = await execPromise(`grep -r "from.*${fileName}" --include="*.ts" --include="*.tsx" ./server`);
          
          if (importsCheckResult.stdout.trim() !== '') {
            console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è ${filePath}, –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è:`);
            console.warn(importsCheckResult.stdout);
            errorCount++;
            continue;
          }
        } catch (grepError) {
          // –ï—Å–ª–∏ grep –Ω–µ –Ω–∞—à–µ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!
          // –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ 1 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
          if (grepError.code !== 1) {
            console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è ${filePath}:`);
            console.error(grepError);
            errorCount++;
            continue;
          }
        }
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        await fs.promises.unlink(fullPath);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫: ${filePath}`);
        successCount++;
      } else {
        console.log(`‚ÑπÔ∏è –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${filePath}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`);
      console.error(error);
      errorCount++;
    }
  }
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: ${successCount} —Ñ–∞–π–ª–æ–≤`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  
  return { successCount, errorCount };
}

async function standardizeImports() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—é –∏–º–ø–æ—Ä—Ç–æ–≤...\n');
  
  // –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const filesToUpdate = await getAllFilesToUpdate();
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${filesToUpdate.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤`);
  
  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  let updatedCount = 0;
  let errorCount = 0;
  
  for (const file of filesToUpdate) {
    try {
      const wasUpdated = await checkAndFixImportsInFile(file);
      if (wasUpdated) {
        updatedCount++;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`);
      console.error(error);
      errorCount++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('\nüìä –ò—Ç–æ–≥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤:');
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${updatedCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  
  // –®–∞–≥ 3: –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∏ –µ—Å–ª–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
  if (updatedCount > 0 && errorCount === 0) {
    // –î–∞—Ç—å –≤—Ä–µ–º—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∏ TypeScript –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∏
    const removalResult = await removeProxyFiles();
    
    if (removalResult.successCount > 0 && removalResult.errorCount === 0) {
      console.log('\n‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } else {
      console.warn('\n‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
      console.warn('   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∏ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫.');
    }
  } else if (errorCount > 0) {
    console.warn('\n‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏.');
    console.warn('   –§–∞–π–ª—ã-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∏ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
  } else {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å.');
  }
  
  console.log('\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —ç—Ç–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
async function testGrepImports(pattern) {
  try {
    const { stdout, stderr } = await execPromise(`grep -r "from.*${pattern}" --include="*.ts" --include="*.tsx" ./server`);
    console.log(`–ù–∞–π–¥–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è ${pattern}:`);
    console.log(stdout);
    if (stderr) {
      console.error('–û—à–∏–±–∫–∏:');
      console.error(stderr);
    }
  } catch (error) {
    console.log(`–ò–º–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${pattern} –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:`);
    if (error.stderr) {
      console.error(error.stderr);
    } else {
      console.error(error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏
//standardizeImports();

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤
(async function() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤...\n');
  const result = await removeProxyFiles();
  
  if (result.successCount > 0 && result.errorCount === 0) {
    console.log('\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } else if (result.errorCount > 0) {
    console.warn('\n‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏.');
  } else {
    console.log('\n‚úÖ –§–∞–π–ª—ã-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã.');
  }
})();