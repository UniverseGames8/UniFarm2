import { db } from './db-connect-unified';
import { users, uniFarmingDeposits, tonBoostDeposits } from '@shared/schema';
import { UniFarmingService } from './services/uniFarmingService';
import { NewUniFarmingService } from './services/newUniFarmingService';
import { TonBoostService } from './services/tonBoostService';
import { ReferralBonusService } from './services/referralBonusService';
import { Currency } from './services/transactionService';
import { and, ne, isNotNull, eq } from 'drizzle-orm';
import { referralBonusProcessor } from './services/referralBonusProcessor';
import { referralSystem } from './services/referralSystemIntegrator';

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
 */
export function startBackgroundTasks(): void {
  try {
    console.log('[Background Tasks] ‚úÖ Starting background tasks');
    
    // –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞ (–∫–∞–∂–¥—ã–π —á–∞—Å)
    const ONE_HOUR_MS = 60 * 60 * 1000;
    setInterval(async () => {
      try {
        console.log('[Background Tasks] üîÑ Starting farming update cycle');
        await updateAllUsersFarming();
        console.log('[Background Tasks] ‚úÖ Farming update cycle completed successfully');
      } catch (error) {
        console.error('[Background Tasks] ‚ùå Error in farming update cycle:', error);
      }
    }, ONE_HOUR_MS);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞,
    // –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    setTimeout(() => {
      try {
        console.log('[Background Tasks] ‚úÖ Initial system check after server start');
        systemInitialized = true;
      } catch (error) {
        console.error('[Background Tasks] ‚ùå Error in system initialization:', error);
      }
    }, 5000);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    initializeReferralProcessor();
    console.log('[Background Tasks] ‚úÖ Background tasks initialization completed');
  } catch (error) {
    console.error('[Background Tasks] ‚ùå Critical error starting background tasks:', error);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
 * - –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã
 * - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
 */
async function initializeReferralProcessor(): Promise<void> {
  try {
    console.log('[Background Tasks] Initializing referral bonus processor');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
    await referralBonusProcessor.ensureIndexes();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    const recoveredCount = await referralBonusProcessor.recoverFailedProcessing();
    
    if (recoveredCount > 0) {
      console.log(`[Background Tasks] Recovered ${recoveredCount} referral reward operations`);
    } else {
      console.log('[Background Tasks] No failed referral operations to recover');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    await referralSystem.initialize();
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    if (process.env.USE_OPTIMIZED_REFERRALS === 'true') {
      referralSystem.enableOptimizedMode();
      console.log('[Background Tasks] Optimized referral system ENABLED');
    } else {
      console.log('[Background Tasks] Using standard referral system (optimized system available but disabled)');
    }
    
    console.log('[Background Tasks] Referral bonus processor initialized successfully');
  } catch (error) {
    console.error('[Background Tasks] Error initializing referral processor:', error);
  }
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥
let lastLogTime = 0;

// –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
const SERVER_START_TIME = new Date();

// –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—à–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
let systemInitialized = false;

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –æ—Ç –¥–æ—Ö–æ–¥–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞
const MIN_REFERRAL_THRESHOLD = 0.000001;

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
const MAX_RESTART_OFFSET = 10;

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞—Ä–º–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –¥–æ—Ö–æ–¥
 * –ø—Ä—è–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function updateAllUsersFarming(): Promise<void> {
  try {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
    const startTime = new Date();
    const secondsSinceServerStart = Math.floor((startTime.getTime() - SERVER_START_TIME.getTime()) / 1000);
    
    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!systemInitialized) {
      console.log(`[Background Tasks] Initializing farming system. Skipping first update to prevent excessive rewards.`);
      systemInitialized = true;
      return;
    }
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (secondsSinceServerStart < 2) {
      console.log(`[Background Tasks] Server just started (${secondsSinceServerStart}s ago). Waiting for system stabilization.`);
      return;
    }
    
    console.log(`[Background Tasks] Starting hourly farming update - ${new Date().toISOString()}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã
    try {
      const uniFarmingService = new NewUniFarmingService();
      const tonBoostService = new TonBoostService();
      
      const usersWithUniDeposits = await uniFarmingService.getUsersWithActiveDeposits();
      const usersWithTonBoosts = await tonBoostService.getUsersWithActiveDeposits();
      
      console.log(`[Background Tasks] Found ${usersWithUniDeposits.length} users with UNI deposits, ${usersWithTonBoosts.length} users with TON boosts`);
    } catch (error) {
      console.error('[Background Tasks] Error fetching users with deposits:', error);
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let activeUsers = [...usersWithUniDeposits.map(record => ({ id: record.user_id }))];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost-–¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ)
    for (const record of usersWithTonBoosts) {
      if (!activeUsers.some(user => user.id === record.user_id)) {
        activeUsers.push({ id: record.user_id });
      }
    }

    // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ UNI –∏–ª–∏ TON, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
    if (activeUsers.length === 0) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞—Ä–º–∏–Ω–≥–æ–º –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ
      const legacyUsers = await db
        .select({ id: users.id })
        .from(users)
        .where(
          /* WHERE uni_deposit_amount > 0 AND uni_farming_start_timestamp IS NOT NULL */
          and(
            ne(users.uni_deposit_amount, '0'),
            isNotNull(users.uni_farming_start_timestamp)
          )
        );
      
      activeUsers = legacyUsers;
    }
    
    if (activeUsers.length === 0) {
      console.log(`[Background Tasks] No active farming users found. Skipping update.`);
      return;
    }
    
    console.log(`[Background Tasks] Processing hourly farming update for ${activeUsers.length} users`);
    
    let updatedCount = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of activeUsers) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º UNI-—Ñ–∞—Ä–º–∏–Ω–≥
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
        const uniDeposits = await db
          .select()
          .from(uniFarmingDeposits)
          .where(and(
            eq(uniFarmingDeposits.user_id, user.id),
            eq(uniFarmingDeposits.is_active, true)
          ));
        
        if (uniDeposits.length > 0) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
          await NewUniFarmingService.calculateAndUpdateUserFarming(user.id);
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          await UniFarmingService.calculateAndUpdateUserFarming(user.id);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º TON-—Ñ–∞—Ä–º–∏–Ω–≥
        const tonBoosts = await db
          .select()
          .from(tonBoostDeposits)
          .where(and(
            eq(tonBoostDeposits.user_id, user.id),
            eq(tonBoostDeposits.is_active, true)
          ));
        
        if (tonBoosts.length > 0) {
          // –û–±–Ω–æ–≤–ª—è–µ–º TON-—Ñ–∞—Ä–º–∏–Ω–≥
          const result = await TonBoostService.calculateAndUpdateUserTonFarming(user.id);
          if (result && result.success) {
            console.log(`[Background Tasks] User ${user.id} TON farming updated: +${result.earnedTon} TON`);
          }
        }
        
        updatedCount++;
      } catch (userError) {
        console.error(`[Background Tasks] Error updating farming for user ${user.id}:`, userError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
    
    console.log(`[Background Tasks] Hourly farming update completed. Successfully updated ${updatedCount}/${activeUsers.length} users.`);
  } catch (error) {
    console.error('[Background Tasks] Error in hourly farming update:', error);
  }
}