/**
 * –¢–ï–°–¢–û–í–ò–ô –ï–ù–î–ü–û–Ü–ù–¢ –î–õ–Ø –ü–†–Ø–ú–û–ì–û –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û PRODUCTION –ë–ê–ó–ò
 * –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –¥–æ ep-lucky-boat-a463bggt
 */

import { Request, Response } from 'express';
import { Pool } from 'pg';

// –ü–†–Ø–ú–ï –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û –í–ê–®–û–á –ü–†–ê–í–ò–õ–¨–ù–û–á PRODUCTION –ë–ê–ó–ò
const CORRECT_PRODUCTION_DB = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';

async function getProductionPool() {
  return new Pool({
    connectionString: CORRECT_PRODUCTION_DB,
    ssl: { rejectUnauthorized: false },
    max: 5,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 10000,
  });
}

// –°—Ç–∞—Ç—É—Å production –±–∞–∑–∏
export async function getProductionDbStatus(req: Request, res: Response) {
  try {
    console.log('üéØ [TEST] –ü—Ä—è–º–∏–π –∑–∞–ø–∏—Ç –¥–æ production –±–∞–∑–∏ ep-lucky-boat-a463bggt');
    
    const pool = await getProductionPool();
    const client = await pool.connect();
    
    const result = await client.query(`
      SELECT 
        current_database() as database_name,
        COUNT(*) as total_users,
        'ep-lucky-boat-a463bggt' as endpoint_name
      FROM public.users
    `);
    
    const users = await client.query(`
      SELECT id, telegram_id, username, guest_id, ref_code, created_at 
      FROM public.users 
      ORDER BY id DESC 
      LIMIT 10
    `);
    
    client.release();
    await pool.end();
    
    console.log('‚úÖ [TEST] –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ production –±–∞–∑–∏');
    
    res.json({
      success: true,
      endpoint: 'ep-lucky-boat-a463bggt',
      database: result.rows[0],
      users: users.rows,
      message: '–ü—Ä—è–º–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó production –±–∞–∑–∏ –ø—Ä–∞—Ü—é—î!'
    });
    
  } catch (error) {
    console.error('‚ùå [TEST] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ production –±–∞–∑–∏:', error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      endpoint: 'ep-lucky-boat-a463bggt'
    });
  }
}

// –¢–µ—Å—Ç–æ–≤–∞ Telegram —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
export async function testTelegramRegistration(req: Request, res: Response) {
  try {
    const { telegram_id, username } = req.body;
    
    if (!telegram_id || !username) {
      return res.status(400).json({
        success: false,
        error: '–ü–æ—Ç—Ä—ñ–±–Ω—ñ telegram_id —Ç–∞ username'
      });
    }
    
    console.log(`üéØ [TEST] –¢–µ—Å—Ç–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${username} (${telegram_id})`);
    
    const pool = await getProductionPool();
    const client = await pool.connect();
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ref_code
    const refCode = `TEST_${telegram_id}_${Date.now()}`.substring(0, 20);
    const guestId = `guest_${telegram_id}`;
    
    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const insertResult = await client.query(`
      INSERT INTO public.users 
      (telegram_id, username, guest_id, ref_code, balance_uni, balance_ton, created_at) 
      VALUES ($1, $2, $3, $4, 0, 0, NOW()) 
      RETURNING id, telegram_id, username, guest_id, ref_code, created_at
    `, [telegram_id, username, guestId, refCode]);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const countResult = await client.query('SELECT COUNT(*) as total FROM public.users');
    
    client.release();
    await pool.end();
    
    console.log('‚úÖ [TEST] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤ production –±–∞–∑—ñ');
    
    res.json({
      success: true,
      endpoint: 'ep-lucky-boat-a463bggt',
      user: insertResult.rows[0],
      totalUsers: countResult.rows[0].total,
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π production –±–∞–∑—ñ!'
    });
    
  } catch (error) {
    console.error('‚ùå [TEST] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      endpoint: 'ep-lucky-boat-a463bggt'
    });
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export async function checkUser(req: Request, res: Response) {
  try {
    const { user_id } = req.params;
    
    console.log(`üéØ [TEST] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID ${user_id} –≤ production –±–∞–∑—ñ`);
    
    const pool = await getProductionPool();
    const client = await pool.connect();
    
    const result = await client.query(`
      SELECT id, telegram_id, username, guest_id, ref_code, balance_uni, balance_ton, created_at 
      FROM public.users 
      WHERE id = $1
    `, [user_id]);
    
    client.release();
    await pool.end();
    
    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        error: `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`,
        endpoint: 'ep-lucky-boat-a463bggt'
      });
    }
    
    console.log('‚úÖ [TEST] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ production –±–∞–∑—ñ');
    
    res.json({
      success: true,
      endpoint: 'ep-lucky-boat-a463bggt',
      user: result.rows[0],
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π production –±–∞–∑—ñ!'
    });
    
  } catch (error) {
    console.error('‚ùå [TEST] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      endpoint: 'ep-lucky-boat-a463bggt'
    });
  }
}