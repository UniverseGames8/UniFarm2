/**
 * –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–º–Ω–æ–≥–æ –±–æ—Ç–∞
 */

import { Router } from "express";
import { Request, Response } from "express";
import { getDbStatus, resetDbConnection, testCreateTable } from "./db-status";
import { storage } from "../../storage";
import logger from "../../utils/logger";

const router = Router();

// üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
router.get("/db-status", getDbStatus);
router.post("/db-reset", resetDbConnection);
router.post("/db-test", testCreateTable);
router.post("/db/reconnect", async (req: Request, res: Response) => {
  try {
    await storage.reconnect();
    logger.info('[Admin] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    res.json({ success: true, message: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞" });
  } catch (error) {
    logger.error('[Admin] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ë–î:', error);
    res.json({ success: false, error: "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" });
  }
});

// üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
router.get("/users/stats", async (req: Request, res: Response) => {
  try {
    const users = await storage.getAllUsers();
    const totalUsers = users.length;
    const activeUsers = users.filter(u => u.uni_balance > 0).length;
    const newToday = users.filter(u => {
      const today = new Date();
      const userDate = new Date(u.created_at);
      return userDate.toDateString() === today.toDateString();
    }).length;
    
    res.json({
      success: true,
      data: {
        total: totalUsers,
        active: activeUsers,
        newToday,
        lastRegistered: users[users.length - 1]?.created_at || null
      }
    });
  } catch (error) {
    logger.error('[Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.json({ success: false, error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" });
  }
});

router.get("/users/search", async (req: Request, res: Response) => {
  try {
    const { query } = req.query;
    const users = await storage.getAllUsers();
    
    let filteredUsers = users;
    if (query) {
      const searchTerm = String(query).toLowerCase();
      filteredUsers = users.filter(u => 
        u.username?.toLowerCase().includes(searchTerm) ||
        u.telegram_id?.toString().includes(searchTerm) ||
        u.id.toString().includes(searchTerm)
      );
    }
    
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const results = filteredUsers.slice(0, 20).map(u => ({
      id: u.id,
      telegram_id: u.telegram_id,
      username: u.username,
      uni_balance: u.uni_balance,
      created_at: u.created_at
    }));
    
    res.json({ success: true, data: results });
  } catch (error) {
    logger.error('[Admin] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.json({ success: false, error: "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
  }
});

// üí∞ –§–∏–Ω–∞–Ω—Å—ã
router.get("/finance/withdrawals", async (req: Request, res: Response) => {
  try {
    const transactions = await storage.getAllTransactions();
    const withdrawals = transactions
      .filter(t => t.type === 'withdraw' && t.status === 'pending')
      .slice(0, 10)
      .map(t => ({
        id: t.id,
        userId: t.user_id,
        amount: t.amount,
        currency: t.currency,
        status: t.status,
        created_at: t.created_at
      }));
    
    res.json({ success: true, data: withdrawals });
  } catch (error) {
    logger.error('[Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:', error);
    res.json({ success: false, error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫" });
  }
});

router.get("/finance/deposits", async (req: Request, res: Response) => {
  try {
    const deposits = await storage.getAllDeposits();
    const recentDeposits = deposits
      .slice(0, 10)
      .map(d => ({
        id: d.id,
        userId: d.user_id,
        amount: d.amount,
        status: d.status,
        created_at: d.created_at
      }));
    
    res.json({ success: true, data: recentDeposits });
  } catch (error) {
    logger.error('[Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
    res.json({ success: false, error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤" });
  }
});

// üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
router.get("/analytics/overview", async (req: Request, res: Response) => {
  try {
    const users = await storage.getAllUsers();
    const transactions = await storage.getAllTransactions();
    const deposits = await storage.getAllDeposits();
    
    const totalUniInSystem = users.reduce((sum, u) => sum + parseFloat(u.uni_balance || '0'), 0);
    const totalDeposits = deposits.reduce((sum, d) => sum + parseFloat(d.amount || '0'), 0);
    const totalWithdraws = transactions
      .filter(t => t.type === 'withdraw')
      .reduce((sum, t) => sum + parseFloat(t.amount || '0'), 0);
    
    res.json({
      success: true,
      data: {
        totalUsers: users.length,
        totalUniInSystem: totalUniInSystem.toFixed(2),
        totalDeposits: totalDeposits.toFixed(2),
        totalWithdraws: totalWithdraws.toFixed(2),
        pendingWithdrawals: transactions.filter(t => t.type === 'withdraw' && t.status === 'pending').length
      }
    });
  } catch (error) {
    logger.error('[Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    res.json({ success: false, error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏" });
  }
});

// üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞  
router.get("/referral/stats", async (req: Request, res: Response) => {
  try {
    const users = await storage.getAllUsers();
    const usersWithReferrals = users.filter(u => u.parent_ref_code);
    const referralCodes = [...new Set(users.map(u => u.ref_code).filter(Boolean))];
    
    res.json({
      success: true,
      data: {
        totalReferrals: usersWithReferrals.length,
        totalReferralCodes: referralCodes.length,
        topReferrers: users
          .map(u => ({
            username: u.username,
            refCode: u.ref_code,
            referrals: users.filter(ru => ru.parent_ref_code === u.ref_code).length
          }))
          .filter(u => u.referrals > 0)
          .sort((a, b) => b.referrals - a.referrals)
          .slice(0, 5)
      }
    });
  } catch (error) {
    logger.error('[Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
    res.json({ success: false, error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤" });
  }
});

// ‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞
router.get("/system/logs", async (req: Request, res: Response) => {
  try {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    res.json({
      success: true,
      data: {
        lastEvents: [
          { time: new Date(), event: '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞', level: 'info' },
          { time: new Date(Date.now() - 60000), event: '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ', level: 'info' }
        ]
      }
    });
  } catch (error) {
    logger.error('[Admin] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
    res.json({ success: false, error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤" });
  }
});

export default router;