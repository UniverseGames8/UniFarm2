import { getSingleDbConnection } from '../single-db-connection';
import { missions, userMissions, users, transactions, Mission, UserMission } from '@shared/schema';
import { eq, and, sql } from 'drizzle-orm';
import { NotFoundError, ValidationError, InsufficientFundsError } from '../middleware/errorHandler';

/**
 * –°—Ç–∞—Ç—É—Å—ã –º–∏—Å—Å–∏–π
 */
export enum MissionStatus {
  AVAILABLE = 'available',
  PROCESSING = 'processing',
  COMPLETED = 'completed'
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏ 
 */
export interface MissionCompletionResult {
  success: boolean;
  message: string;
  reward?: number;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏—Å—Å–∏–∏ 
 */
export interface MissionSubmissionResult {
  success: boolean;
  message: string;
  status: MissionStatus;
  progress?: number;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∏—Å—Å–∏–∏
 */
export interface MissionStatusResult {
  id: number;
  status: MissionStatus;
  progress?: number;
  isCompleted: boolean;
  canClaim: boolean;
  completedAt?: Date | null;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
 */
export interface MissionWithCompletion {
  id: number;
  type: string | null;
  title: string | null;
  description: string | null;
  reward_uni: string | null;
  is_active: boolean | null;
  is_completed: boolean;
  completed_at?: Date | null;
  status?: MissionStatus;
  progress?: number;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏—Å—Å–∏—è–º–∏
 */
export interface IMissionService {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏
   * @returns –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  getActiveMissions(): Promise<Mission[]>;
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ú–∞—Å—Å–∏–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  getUserCompletedMissions(userId: number): Promise<UserMission[]>;
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–∏—Å—Å–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ú–∞—Å—Å–∏–≤ –º–∏—Å—Å–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  getAllMissionsWithCompletion(userId: number): Promise<MissionWithCompletion[]>;
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∏—Å—Å–∏—é
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns true –µ—Å–ª–∏ –º–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –∏–Ω–∞—á–µ false
   * @throws {ValidationError} –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  isUserMissionCompleted(userId: number, missionId: number): Promise<boolean>;
  
  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  validateUserExists(userId: number): Promise<void>;
  
  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏ –∏ –µ—ë –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns –û–±—ä–µ–∫—Ç –º–∏—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
   * @throws {NotFoundError} –ï—Å–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
   */
  validateMissionExists(missionId: number): Promise<Mission>;
  
  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
   * @throws {ValidationError} –ï—Å–ª–∏ –º–∏—Å—Å–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î
   */
  completeMission(userId: number, missionId: number): Promise<MissionCompletionResult>;
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –º–∏—Å—Å–∏–∏
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
   * @throws {ValidationError} –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  getMissionStatus(userId: number, missionId: number): Promise<MissionStatusResult>;
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∏—Å—Å–∏—é –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∏—Å—Å–∏–∏
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
   * @throws {ValidationError} –ï—Å–ª–∏ –º–∏—Å—Å–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  submitMission(userId: number, missionId: number): Promise<MissionSubmissionResult>;
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –º–∏—Å—Å–∏—é
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
   * @throws {ValidationError} –ï—Å–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  claimMissionReward(userId: number, missionId: number): Promise<MissionCompletionResult>;
}

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏—Å—Å–∏—è–º–∏
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–∏—Å—Å–∏—è–º–∏
 */
class MissionServiceImpl implements IMissionService {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏
   * @returns –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  async getActiveMissions(): Promise<Mission[]> {
    try {
      console.log('[MissionService] üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π —á–µ—Ä–µ–∑ Drizzle ORM');
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
      const db = await getSingleDbConnection();
      console.log('[MissionService] üì° DB CONNECTION TYPE:', typeof db);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
      const rawResult = await db.execute(sql`SELECT COUNT(*) as count FROM missions WHERE is_active = true`);
      console.log('[MissionService] üìä RAW SQL COUNT:', rawResult);
      
      const activeMissions = await db
        .select()
        .from(missions)
        .where(eq(missions.is_active, true));
      
      console.log('[MissionService] üìã DRIZZLE RESULT:', activeMissions);
      console.log('[MissionService] üìä DRIZZLE COUNT:', activeMissions.length);
      
      return activeMissions;
    } catch (error) {
      console.error('[MissionService] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ú–∞—Å—Å–∏–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  async getUserCompletedMissions(userId: number): Promise<UserMission[]> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.validateUserExists(userId);
      
      const userCompletedMissions = await db
        .select()
        .from(userMissions)
        .where(eq(userMissions.user_id, userId));
      
      return userCompletedMissions;
    } catch (error) {
      if (error instanceof NotFoundError) {
        throw error;
      }
      console.error('[MissionService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–∏—Å—Å–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ú–∞—Å—Å–∏–≤ –º–∏—Å—Å–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  async getAllMissionsWithCompletion(userId: number): Promise<MissionWithCompletion[]> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.validateUserExists(userId);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏
      const allMissions = await this.getActiveMissions();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const completedMissions = await this.getUserCompletedMissions(userId);
      
      // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const completedMap = new Map<number, UserMission>();
      completedMissions.forEach(mission => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mission_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        if (mission.mission_id !== null && mission.mission_id !== undefined) {
          completedMap.set(mission.mission_id, mission);
        }
      });
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const missionsWithCompletion: MissionWithCompletion[] = allMissions.map(mission => {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ id
        if (!mission.id) {
          console.warn('[MissionService] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–∏—Å—Å–∏—è –±–µ–∑ id:', mission);
        }
        
        const completed = mission.id ? completedMap.get(mission.id) : undefined;
        
        return {
          id: mission.id ?? 0, // –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
          type: mission.type,
          title: mission.title,
          description: mission.description,
          reward_uni: mission.reward_uni,
          is_active: mission.is_active, 
          is_completed: !!completed,
          completed_at: completed?.completed_at ?? null
        };
      });
      
      return missionsWithCompletion;
    } catch (error) {
      if (error instanceof NotFoundError) {
        throw error;
      }
      console.error('[MissionService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Å—Å–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∏—Å—Å–∏—é
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns true –µ—Å–ª–∏ –º–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –∏–Ω–∞—á–µ false
   * @throws {ValidationError} –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  async isUserMissionCompleted(userId: number, missionId: number): Promise<boolean> {
    try {
      if (!userId || !missionId || isNaN(userId) || isNaN(missionId) || userId <= 0 || missionId <= 0) {
        throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–∏—Å—Å–∏–∏');
      }
      
      const [existingMission] = await db
        .select()
        .from(userMissions)
        .where(and(
          eq(userMissions.user_id, userId),
          eq(userMissions.mission_id, missionId)
        ));
      
      return !!existingMission;
    } catch (error) {
      if (error instanceof ValidationError) {
        throw error;
      }
      console.error('[MissionService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏');
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  async validateUserExists(userId: number): Promise<void> {
    try {
      const [user] = await db
        .select()
        .from(users)
        .where(eq(users.id, userId));
      
      if (!user) {
        throw new NotFoundError(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    } catch (error) {
      if (error instanceof NotFoundError) {
        throw error;
      }
      console.error('[MissionService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏ –∏ –µ—ë –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns –û–±—ä–µ–∫—Ç –º–∏—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
   * @throws {NotFoundError} –ï—Å–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
   */
  async validateMissionExists(missionId: number): Promise<Mission> {
    try {
      const [mission] = await db
        .select()
        .from(missions)
        .where(and(
          eq(missions.id, missionId),
          eq(missions.is_active, true)
        ));
      
      if (!mission) {
        throw new NotFoundError(`–ú–∏—Å—Å–∏—è —Å ID ${missionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞`);
      }
      
      return mission;
    } catch (error) {
      if (error instanceof NotFoundError) {
        throw error;
      }
      console.error('[MissionService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏—Å—Å–∏–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏');
    }
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
   * @throws {ValidationError} –ï—Å–ª–∏ –º–∏—Å—Å–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î
   */
  async completeMission(userId: number, missionId: number): Promise<MissionCompletionResult> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.validateUserExists(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∏—Å—Å–∏–∏
      const mission = await this.validateMissionExists(missionId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª —ç—Ç—É –º–∏—Å—Å–∏—é
      const isCompleted = await this.isUserMissionCompleted(userId, missionId);
      
      if (isCompleted) {
        throw new ValidationError('–≠—Ç–∞ –º–∏—Å—Å–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      }
      
      // REDMAP COMPLIANCE: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ 500 UNI –∑–∞ –∫–∞–∂–¥—É—é –º–∏—Å—Å–∏—é
      // –°–æ–≥–ª–∞—Å–Ω–æ REDMAP –≤—Å–µ –º–∏—Å—Å–∏–∏ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å 500 UNI, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ë–î
      const reward = 500;
      
      console.log(`[MissionService] REDMAP: –ù–∞—á–∏—Å–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É ${reward} UNI –∑–∞ –º–∏—Å—Å–∏—é ${missionId} (—Ç–∏–ø: ${mission.type})`);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ
      await this.processCompletionTransaction(userId, missionId, reward);
      
      return {
        success: true,
        message: `–ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. ${reward} UNI –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å.`,
        reward
      };
    } catch (error) {
      if (error instanceof NotFoundError || error instanceof ValidationError) {
        throw error;
      }
      console.error('[MissionService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏—Å—Å–∏—é');
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @param reward –†–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã
   * @private
   */
  private async processCompletionTransaction(userId: number, missionId: number, reward: number): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏
      await db.insert(userMissions).values({
        user_id: userId,
        mission_id: missionId,
        completed_at: new Date()
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db
        .update(users)
        .set({ 
          balance_uni: sql`${users.balance_uni} + ${reward.toString()}`
        })
        .where(eq(users.id, userId));
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã
      await db.insert(transactions).values({
        user_id: userId,
        type: "reward",
        currency: "UNI",
        amount: reward.toString(),
        status: "confirmed",
        source: "mission",
        description: `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ #${missionId}`,
        created_at: new Date()
      });
      
      console.log(`[MissionService] –ú–∏—Å—Å–∏—è ${missionId} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} —Å –Ω–∞–≥—Ä–∞–¥–æ–π ${reward} UNI`);
    } catch (error) {
      console.error('[MissionService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –º–∏—Å—Å–∏–∏
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
   * @throws {ValidationError} –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  async getMissionStatus(userId: number, missionId: number): Promise<MissionStatusResult> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–∏—Å—Å–∏–∏
      await this.validateUserExists(userId);
      const mission = await this.validateMissionExists(missionId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –º–∏—Å—Å–∏—è
      const isCompleted = await this.isUserMissionCompleted(userId, missionId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      const [completedMission] = isCompleted 
        ? await db
            .select()
            .from(userMissions)
            .where(and(
              eq(userMissions.user_id, userId),
              eq(userMissions.mission_id, missionId)
            ))
        : [];
        
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∏—Å—Å–∏–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
      // –°–µ–π—á–∞—Å –º–∏—Å—Å–∏–∏ –ª–∏–±–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ª–∏–±–æ –Ω–µ—Ç, –Ω–æ –≤ –±—É–¥—É—â–µ–º –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (0-100%)
      let progress = isCompleted ? 100 : 0;
      let status = MissionStatus.AVAILABLE;
      
      // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ç–∏–ø—É –º–∏—Å—Å–∏–∏
      if (isCompleted) {
        status = MissionStatus.COMPLETED;
      } else if (mission.type === 'social' || mission.type === 'check-in') {
        // –î–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∏—Å—Å–∏–π –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        status = MissionStatus.AVAILABLE;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
      // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      const canClaim = false;
      
      return {
        id: missionId,
        status,
        progress,
        isCompleted,
        canClaim,
        completedAt: completedMission?.completed_at ?? null
      };
    } catch (error) {
      if (error instanceof NotFoundError || error instanceof ValidationError) {
        throw error;
      }
      console.error('[MissionService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∏—Å—Å–∏–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏');
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∏—Å—Å–∏—é –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∏—Å—Å–∏–∏
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
   * @throws {ValidationError} –ï—Å–ª–∏ –º–∏—Å—Å–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  async submitMission(userId: number, missionId: number): Promise<MissionSubmissionResult> {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (!userId || !missionId || isNaN(userId) || isNaN(missionId) || userId <= 0 || missionId <= 0) {
        throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–∏—Å—Å–∏–∏');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–∏—Å—Å–∏–∏
      await this.validateUserExists(userId);
      const mission = await this.validateMissionExists(missionId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ –º–∏—Å—Å–∏—è
      const isCompleted = await this.isUserMissionCompleted(userId, missionId);
      
      if (isCompleted) {
        return {
          success: false,
          message: '–≠—Ç–∞ –º–∏—Å—Å–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
          status: MissionStatus.COMPLETED,
          progress: 100
        };
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∏—Å—Å–∏–∏
      switch(mission.type) {
        case 'check-in':
          // –ú–∏—Å—Å–∏–∏ –ø–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –≤—Ö–æ–¥—É –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
          await this.completeMission(userId, missionId);
          return {
            success: true,
            message: '–ú–∏—Å—Å–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
            status: MissionStatus.COMPLETED,
            progress: 100
          };
          
        case 'social':
          // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∏—Å—Å–∏–∏ (–ø–æ–¥–ø–∏—Å–∫–∏, etc) —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
          return {
            success: true,
            message: '–ú–∏—Å—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É',
            status: MissionStatus.PROCESSING,
            progress: 50
          };
          
        case 'invite':
          // –ú–∏—Å—Å–∏–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
          return {
            success: true,
            message: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ',
            status: MissionStatus.PROCESSING,
            progress: 10
          };
          
        default:
          throw new ValidationError(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–∏—Å—Å–∏–∏: ${mission.type}`);
      }
    } catch (error) {
      if (error instanceof NotFoundError || error instanceof ValidationError) {
        throw error;
      }
      console.error('[MissionService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∏—Å—Å–∏–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∏—Å—Å–∏—é –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –º–∏—Å—Å–∏—é
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param missionId ID –º–∏—Å—Å–∏–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
   * @throws {NotFoundError} –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
   * @throws {ValidationError} –ï—Å–ª–∏ –º–∏—Å—Å–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
   * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
   */
  async claimMissionReward(userId: number, missionId: number): Promise<MissionCompletionResult> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–∏—Å—Å–∏–∏
      await this.validateUserExists(userId);
      const mission = await this.validateMissionExists(missionId);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏
      const missionStatus = await this.getMissionStatus(userId, missionId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –º–∏—Å—Å–∏—è –∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –ª–∏ —É–∂–µ –Ω–∞–≥—Ä–∞–¥–∞
      if (!missionStatus.isCompleted) {
        throw new ValidationError('–ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –º–∏—Å—Å–∏—é');
      }
      
      if (!missionStatus.canClaim) {
        throw new ValidationError('–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —ç—Ç—É –º–∏—Å—Å–∏—é —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –º–∏—Å—Å–∏—é
      const rewardUni = mission.reward_uni;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      let reward = 0;
      if (rewardUni !== null && rewardUni !== undefined) {
        const parsedReward = parseFloat(rewardUni);
        if (!isNaN(parsedReward)) {
          reward = parsedReward;
        }
      }
      
      // –ó–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É (–≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –≤ completeMission)
      
      return {
        success: true,
        message: `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏—Å—Å–∏—é –ø–æ–ª—É—á–µ–Ω–∞. ${reward} UNI –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å.`,
        reward
      };
    } catch (error) {
      if (error instanceof NotFoundError || error instanceof ValidationError) {
        throw error;
      }
      console.error('[MissionService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∏—Å—Å–∏—é:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –º–∏—Å—Å–∏—é');
    }
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –º–∏—Å—Å–∏–π
 * @returns –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –º–∏—Å—Å–∏–π
 */
export function createMissionService(): IMissionService {
  return new MissionServiceImpl();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
export const missionServiceInstance = createMissionService();