/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
 * 
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –¥–ª—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

import { db } from '../db-connect-unified';
import { users, uniFarmingDeposits, tonBoostDeposits } from '@shared/schema';
import { and, ne, isNotNull, eq, sql } from 'drizzle-orm';
import { NewUniFarmingService } from './newUniFarmingService';
import { UniFarmingService } from './uniFarmingService';
import { TonBoostService } from './tonBoostService';

interface UserWithDeposits {
  id: number;
  telegram_id: string;
  username: string | null;
  first_name: string | null;
  last_name: string | null;
  uniDepositsCount: number;
  tonDepositsCount: number;
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–µ JOIN –∑–∞–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ü–∏–∫–ª–µ
 */
export class OptimizedBackgroundService {
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
   */
  static async getUsersWithDepositsInfo(): Promise<UserWithDeposits[]> {
    try {
      const result = await db
        .select({
          id: users.id,
          telegram_id: users.telegram_id,
          username: users.username,
          first_name: users.first_name,
          last_name: users.last_name,
          uniDepositsCount: sql<number>`COUNT(DISTINCT ${uniFarmingDeposits.id})`.as('uni_deposits_count'),
          tonDepositsCount: sql<number>`COUNT(DISTINCT ${tonBoostDeposits.id})`.as('ton_deposits_count')
        })
        .from(users)
        .leftJoin(
          uniFarmingDeposits, 
          and(
            eq(uniFarmingDeposits.user_id, users.id),
            eq(uniFarmingDeposits.is_active, true)
          )
        )
        .leftJoin(
          tonBoostDeposits,
          and(
            eq(tonBoostDeposits.user_id, users.id),
            eq(tonBoostDeposits.is_active, true)
          )
        )
        .where(
          and(
            ne(users.telegram_id, ''),
            isNotNull(users.telegram_id)
          )
        )
        .groupBy(users.id, users.telegram_id, users.username, users.first_name, users.last_name)
        .having(
          sql`COUNT(DISTINCT ${uniFarmingDeposits.id}) > 0 OR COUNT(DISTINCT ${tonBoostDeposits.id}) > 0`
        );

      return result;
    } catch (error) {
      console.error('[OptimizedBackgroundService] Error fetching users with deposits:', error);
      throw error;
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  static async processAllUsersFarming(): Promise<{
    processedUsers: number;
    uniUpdates: number;
    tonUpdates: number;
    errors: number;
  }> {
    const startTime = Date.now();
    let processedUsers = 0;
    let uniUpdates = 0;
    let tonUpdates = 0;
    let errors = 0;

    try {
      console.log('[OptimizedBackgroundService] üöÄ Starting optimized farming update cycle');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const usersWithDeposits = await this.getUsersWithDepositsInfo();
      
      console.log(`[OptimizedBackgroundService] Found ${usersWithDeposits.length} users with active deposits`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrency
      const batchSize = 10; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      
      for (let i = 0; i < usersWithDeposits.length; i += batchSize) {
        const batch = usersWithDeposits.slice(i, i + batchSize);
        
        await Promise.allSettled(
          batch.map(async (user) => {
            try {
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º UNI —Ñ–∞—Ä–º–∏–Ω–≥
              if (user.uniDepositsCount > 0) {
                await NewUniFarmingService.calculateAndUpdateUserFarming(user.id);
                uniUpdates++;
              }

              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º TON —Ñ–∞—Ä–º–∏–Ω–≥
              if (user.tonDepositsCount > 0) {
                const result = await TonBoostService.calculateAndUpdateUserTonFarming(user.id);
                if (result && result.success) {
                  tonUpdates++;
                }
              }

              processedUsers++;
            } catch (userError) {
              console.error(`[OptimizedBackgroundService] Error processing user ${user.id}:`, userError);
              errors++;
            }
          })
        );

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î
        if (i + batchSize < usersWithDeposits.length) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }

      const endTime = Date.now();
      const duration = endTime - startTime;

      console.log('[OptimizedBackgroundService] ‚úÖ Optimized farming update completed:', {
        duration: `${duration}ms`,
        processedUsers,
        uniUpdates,
        tonUpdates,
        errors,
        avgTimePerUser: processedUsers > 0 ? `${(duration / processedUsers).toFixed(1)}ms` : '0ms'
      });

      return { processedUsers, uniUpdates, tonUpdates, errors };

    } catch (error) {
      console.error('[OptimizedBackgroundService] ‚ùå Critical error in optimized farming update:', error);
      throw error;
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–æ–≤
   */
  static async performanceComparison(): Promise<{
    oldMethod: { duration: number; users: number };
    newMethod: { duration: number; users: number };
    improvement: string;
  }> {
    console.log('[OptimizedBackgroundService] üìä Starting performance comparison');

    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
    const oldStart = Date.now();
    const usersForOldMethod = await db
      .select()
      .from(users)
      .where(and(ne(users.telegram_id, ''), isNotNull(users.telegram_id)))
      .limit(50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const oldEnd = Date.now();

    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
    const newStart = Date.now();
    const usersWithDeposits = await this.getUsersWithDepositsInfo();
    const newEnd = Date.now();

    const oldDuration = oldEnd - oldStart;
    const newDuration = newEnd - newStart;
    const improvement = ((oldDuration - newDuration) / oldDuration * 100).toFixed(1);

    const result = {
      oldMethod: { duration: oldDuration, users: usersForOldMethod.length },
      newMethod: { duration: newDuration, users: usersWithDeposits.length },
      improvement: `${improvement}% faster`
    };

    console.log('[OptimizedBackgroundService] üìà Performance comparison results:', result);
    return result;
  }
}

export default OptimizedBackgroundService;