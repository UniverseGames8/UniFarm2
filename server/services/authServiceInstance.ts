import crypto from 'crypto';
import { storage } from '../storage';
import { User, InsertUser } from '@shared/schema';
import { validateTelegramInitData, TelegramValidationResult } from '../utils/telegramUtils';
import { generateUniqueRefCode } from '../utils/refCodeUtils';
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Å—Ç–∞–Ω—Å-–ø–æ–¥—Ö–æ–¥ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
import { userService, referralBonusService } from './index';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
 */
export interface TelegramAuthData {
  authData?: string;
  userId?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  startParam?: string;
  referrerId?: number;
  refCode?: string;
  guest_id?: string;
  testMode?: boolean;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface GuestRegistrationData {
  guest_id: string;
  username?: string;
  parent_ref_code?: string;
  ref_code?: string;
  airdrop_mode?: boolean;
  telegram_id?: number;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserRegistrationData {
  username: string;
  refCode?: string;
  parentRefCode?: string;
  startParam?: string;
  telegram_id?: number;
  guest_id?: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export interface IAuthService {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Telegram initData –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  authenticateTelegram(authData: TelegramAuthData, isDevelopment?: boolean): Promise<User>;
  
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id
   */
  registerGuestUser(data: GuestRegistrationData): Promise<User>;
  
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  registerUser(data: UserRegistrationData): Promise<User>;
}

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
class AuthServiceImpl implements IAuthService {
  private BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '';

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Telegram initData –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async authenticateTelegram(authData: TelegramAuthData, isDevelopment: boolean = false): Promise<User> {
    try {
      console.log(`[AuthService] üöÄ –ù–ê–ß–ê–õ–û –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò TELEGRAM:`);
      console.log(`[AuthService] - authData:`, JSON.stringify(authData, null, 2));
      console.log(`[AuthService] - isDevelopment:`, isDevelopment);
      
      // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram
      const validationResult: TelegramValidationResult = validateTelegramInitData(
        authData.authData || '',
        this.BOT_TOKEN,
        isDevelopment || authData.testMode || false
      );
      
      console.log(`[AuthService] - validationResult:`, JSON.stringify(validationResult, null, 2));

      if (!validationResult.isValid && !isDevelopment && !authData.testMode) {
        throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö Telegram: ${validationResult.errors?.join(', ')}`);
      }

      // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let telegramUserId = validationResult.userId;

      // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if ((isDevelopment || authData.testMode) && authData.userId && !telegramUserId) {
        telegramUserId = authData.userId;
      }

      if (!telegramUserId && !authData.guest_id) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
      }

      // 3. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id Telegram –∏–ª–∏ guest_id
      let user: User | undefined;

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–∏—Å–∫–∞: guest_id > telegram_id
      if (authData.guest_id) {
        user = await userService.getUserByGuestId(authData.guest_id);
      }

      if (!user && telegramUserId) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ getUserByTelegramId –∏–∑ storage
        const numericTelegramId = typeof telegramUserId === 'string' 
          ? parseInt(telegramUserId, 10) 
          : telegramUserId;
        
        user = await storage.getUserByTelegramId(numericTelegramId);
      }

      // 4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–∏–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
      if (user) {
        console.log(`[AuthService] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateData: Partial<User> = {};
        
        // –û–±–Ω–æ–≤–ª—è–µ–º guest_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ authData
        if (!user.guest_id && authData.guest_id) {
          console.log(`  - –ü—Ä–∏–≤—è–∑–∫–∞ guest_id: ${authData.guest_id}`);
          updateData.guest_id = authData.guest_id;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º telegram_id, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!user.telegram_id && telegramUserId) {
          const numericTelegramId = typeof telegramUserId === 'string' 
            ? parseInt(telegramUserId, 10) 
            : telegramUserId;
            
          console.log(`  - –ü—Ä–∏–≤—è–∑–∫–∞ telegram_id: ${numericTelegramId}`);
          updateData.telegram_id = numericTelegramId;
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        if (Object.keys(updateData).length > 0) {
          try {
            await storage.updateUser(user.id, updateData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = {...user, ...updateData};
            console.log(`[AuthService] ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
          } catch (error) {
            console.error(`[AuthService] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error);
          }
        }

        return user;
      }

      // 5. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ "–ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
      console.log(`[AuthService] üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: telegram_id=${telegramUserId}, guest_id=${authData.guest_id}`);
      
      const username = authData.username || 
                      `user_${telegramUserId || crypto.randomBytes(4).toString('hex')}`;

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      const ref_code = await generateUniqueRefCode();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      const parent_ref_code = authData.startParam || authData.refCode || null;
      
      console.log(`[AuthService] üìù –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: username=${username}, ref_code=${ref_code}, parent_ref_code=${parent_ref_code}`);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π telegramUserId –≤ —á–∏—Å–ª–æ (–∏–ª–∏ null –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
      let numericTelegramId: number | null = null;
      
      if (telegramUserId) {
        if (typeof telegramUserId === 'string') {
          numericTelegramId = parseInt(telegramUserId, 10);
        } else if (typeof telegramUserId === 'number') {
          numericTelegramId = telegramUserId;
        }
      }
        
      const newUser: InsertUser = {
        telegram_id: numericTelegramId,
        guest_id: authData.guest_id || null,
        username,
        wallet: null,
        ton_wallet_address: null,
        ref_code,
        parent_ref_code
      };

      const createdUser = await storage.createUser(newUser);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥
      if (parent_ref_code) {
        await referralBonusService.processRegistrationBonus(createdUser.id, parent_ref_code);
      }

      return createdUser;
    } catch (error) {
      console.error('[AuthService] –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram:', error);
      throw error;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id
   */
  async registerGuestUser(data: GuestRegistrationData): Promise<User> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º guest_id
      const existingUser = await userService.getUserByGuestId(data.guest_id);
      if (existingUser) {
        return existingUser;
      }

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      const ref_code = data.ref_code || await generateUniqueRefCode();

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ AirDrop
      const newUser: InsertUser = {
        telegram_id: data.telegram_id || null,
        guest_id: data.guest_id,
        username: data.username || `guest_${data.guest_id.substring(0, 8)}`,
        wallet: null,
        ton_wallet_address: null,
        ref_code,
        parent_ref_code: data.parent_ref_code || null,
      };

      const createdUser = await storage.createUser(newUser);

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
      if (data.parent_ref_code) {
        await referralBonusService.processRegistrationBonus(createdUser.id, data.parent_ref_code);
      }

      return createdUser;
    } catch (error) {
      console.error('[AuthService] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async registerUser(data: UserRegistrationData): Promise<User> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
      const existingUserByUsername = await userService.getUserByUsername(data.username);
      if (existingUserByUsername) {
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º ${data.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω telegram_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (data.telegram_id) {
        const existingUserByTelegramId = await storage.getUserByTelegramId(data.telegram_id);
        if (existingUserByTelegramId) {
          console.log(`[AuthService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id ${data.telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          return existingUserByTelegramId;
        }
      }

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      const ref_code = data.refCode || await generateUniqueRefCode();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      const parent_ref_code = data.parentRefCode || data.startParam || null;

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser: InsertUser = {
        telegram_id: data.telegram_id || null,
        guest_id: data.guest_id || null,
        username: data.username,
        wallet: null,
        ton_wallet_address: null,
        ref_code,
        parent_ref_code,
      };

      const createdUser = await storage.createUser(newUser);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥
      if (parent_ref_code) {
        await referralBonusService.processRegistrationBonus(createdUser.id, parent_ref_code);
      }

      return createdUser;
    } catch (error) {
      console.error('[AuthService] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async createOrUpdateSession(userId: number): Promise<string> {
    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
      const sessionId = crypto.randomUUID();

      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏
      // –¥—Ä—É–≥–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π. –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.

      return sessionId;
    } catch (error) {
      console.error('[AuthService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      throw error;
    }
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @returns –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export function createAuthService(): IAuthService {
  return new AuthServiceImpl();
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const authServiceInstance = createAuthService();