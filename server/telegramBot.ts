/**
 * –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram-–±–æ—Ç–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏
 */

import fetch from 'node-fetch';
import { db } from './db';
import { users } from '../shared/schema';
import { eq } from 'drizzle-orm';
import { storage } from './storage';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error('üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

// –¢–∏–ø—ã –¥–ª—è Telegram Update
interface TelegramUser {
  id: number;
  first_name?: string;
  username?: string;
}

interface TelegramChat {
  id: number;
  type: string;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: TelegramChat;
  date: number;
  text?: string;
}

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message?: TelegramMessage;
  chat_instance: string;
  data?: string;
}

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function sendMessage(chatId: number, text: string, options: Record<string, any> = {}): Promise<any> {
  if (!BOT_TOKEN) {
    console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      })
    });

    const data: any = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', data.description);
    }
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ping
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
 */
async function handlePingCommand(chatId: number): Promise<any> {
  const startTime = Date.now();
  const responseTime = new Date().toISOString();
  
  // –ü–æ–ª—É—á–∞–µ–º webhookInfo –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const webhookStatus = await getWebhookInfo();
  const webhookUrl = webhookStatus?.data?.url || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
  const processingTime = Date.now() - startTime;
  
  const message = `
<b>üü¢ Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç</b>

‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${processingTime}ms
‚è∞ –î–∞—Ç–∞/–≤—Ä–µ–º—è: ${responseTime}
üîå Webhook: ${webhookUrl}

<i>–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.</i>
  `;
  
  return sendMessage(chatId, message);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /info
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
async function handleInfoCommand(chatId: number, { userId, username, firstName }: { userId: number, username?: string, firstName?: string }): Promise<any> {
  const message = `
<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

ID: <code>${userId}</code>
–ò–º—è: ${firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
Username: ${username ? `@${username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}
Chat ID: <code>${chatId}</code>

–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toLocaleString()}
  `;
  return sendMessage(chatId, message);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /refcode
 * –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleRefCodeCommand(chatId: number, userId: number): Promise<any> {
  // –ó–¥–µ—Å—å –º—ã –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–π –ë–î, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ref_code
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const [user] = await db.select()
      .from(users)
      .where(eq(users.telegram_id, userId));

    if (user && user.ref_code) {
      return sendMessage(chatId, `
<b>üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥</b>

–ö–æ–¥: <code>${user.ref_code}</code>
–°—Å—ã–ª–∫–∞: <code>https://t.me/UniFarming_Bot/UniFarm?ref_code=${user.ref_code}</code>

Telegram ID: <code>${userId}</code>
User ID –≤ —Å–∏—Å—Ç–µ–º–µ: <code>${user.id}</code>
      `);
    } else {
      return sendMessage(chatId, `
‚ö†Ô∏è <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
- –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ
- Telegram ID (${userId}) –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É
- –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å Mini App –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
      `);
    }
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ref_code:', error);
    return sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${error.message}`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /app
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Telegram Mini App
 */
async function handleAppCommand(chatId: number): Promise<any> {
  console.log(`[Telegram Bot] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ UniFarm –≤ —á–∞—Ç ${chatId}`);
  
  // URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
  const appUrl = "https://t.me/UniFarming_Bot/UniFarm";
  
  const messageText = `
üöÄ <b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ UniFarm</b>

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ UniFarm –∏ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

<i>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –±–æ—Ç–∞.</i>
  `;
  
  return sendMessage(chatId, messageText, {
    parse_mode: 'HTML',
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ 
          text: "üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm", 
          web_app: { url: appUrl } 
        }]
      ]
    }),
    disable_web_page_preview: true
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
 * –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
 */
async function handleStartCommand(chatId: number, { userId, username, firstName }: { userId: number, username?: string, firstName?: string }): Promise<any> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä ref_code –≤ –∫–æ–º–∞–Ω–¥–µ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫)
  const welcomeMessage = `
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å${firstName ? ', ' + firstName : ''}!</b>

–Ø –±–æ—Ç <b>UniFarm</b> - —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥–∞ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.

üåü <b>–° –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ:</b>
‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–∞—Ä–º–∏–Ω–≥ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ —Å 20 —É—Ä–æ–≤–Ω—è–º–∏
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∏—Å—Å–∏–∏

üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "<b>–û—Ç–∫—Ä—ã—Ç—å UniFarm</b>" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.
  `;

  // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  const inlineKeyboard = {
    inline_keyboard: [
      [
        { 
          text: "üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm", 
          web_app: { url: "https://t.me/UniFarming_Bot/UniFarm" }
        }
      ],
      [
        { 
          text: "üîç –ß—Ç–æ —Ç–∞–∫–æ–µ UniFarm?", 
          callback_data: "about_unifarm" 
        },
        { 
          text: "üí∞ –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", 
          callback_data: "how_to_earn" 
        }
      ],
      [
        { 
          text: "üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", 
          callback_data: "get_ref_link" 
        }
      ]
    ]
  };

  // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (–±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
  const replyMarkup = {
    keyboard: [
      [
        { text: "üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: "https://t.me/UniFarming_Bot/UniFarm" } }
      ],
      [
        { text: "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å" },
        { text: "‚ÑπÔ∏è –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" }
      ],
      [
        { text: "üîó –ú–æ–π —Ä–µ—Ñ. –∫–æ–¥" },
        { text: "‚ùì –ü–æ–º–æ—â—å" }
      ]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
  await sendMessage(chatId, welcomeMessage, { 
    parse_mode: 'HTML',
    reply_markup: JSON.stringify(inlineKeyboard),
    disable_web_page_preview: true
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  return sendMessage(chatId, `
<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.

<i>–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ!</i>
  `, {
    parse_mode: 'HTML',
    reply_markup: JSON.stringify(replyMarkup)
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ callback_query
 * @param callbackQueryId - ID callback query –¥–ª—è –æ—Ç–≤–µ—Ç–∞
 * @param text - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param showAlert - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫ alert –∏–ª–∏ –∫–∞–∫ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
async function answerCallbackQuery(callbackQueryId: string, text?: string, showAlert: boolean = false): Promise<any> {
  if (!BOT_TOKEN) {
    console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text,
        show_alert: showAlert
      })
    });

    const data: any = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:', data.description);
    }
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:', error);
  }
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param text - –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 */
async function editMessageText(chatId: number, messageId: number, text: string, options: Record<string, any> = {}): Promise<any> {
  if (!BOT_TOKEN) {
    console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/editMessageText`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
        text,
        parse_mode: 'HTML',
        ...options
      })
    });

    const data: any = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', data.description);
    }
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback_query –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
 * @param callbackQuery - –û–±—ä–µ–∫—Ç callback_query –æ—Ç Telegram
 */
async function handleCallbackQuery(callbackQuery: TelegramCallbackQuery): Promise<any> {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  if (!callbackQuery.data || !callbackQuery.message) {
    console.error('[Telegram Bot] –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π callback_query –±–µ–∑ data –∏–ª–∏ message');
    return;
  }

  const data = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const userId = callbackQuery.from.id;
  const username = callbackQuery.from.username;
  
  console.log(`[Telegram Bot] –ü–æ–ª—É—á–µ–Ω callback_query: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username || userId}`);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã callback_data
  switch (data) {
    case 'about_unifarm':
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ UniFarm
      await answerCallbackQuery(callbackQuery.id, '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ UniFarm...');
      
      await editMessageText(chatId, messageId, `
<b>üåü –û –ø—Ä–æ–µ–∫—Ç–µ UniFarm</b>

UniFarm - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞
‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
‚Ä¢ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å 20 —É—Ä–æ–≤–Ω—è–º–∏
‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ TON –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç

<i>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å UniFarm"</i>
      `, {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: "üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: "https://t.me/UniFarming_Bot/UniFarm" } }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]
          ]
        })
      });
      break;
      
    case 'how_to_earn':
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞
      await answerCallbackQuery(callbackQuery.id, '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ...');
      
      await editMessageText(chatId, messageId, `
<b>üí∞ –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å UniFarm</b>

–£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞:

1Ô∏è‚É£ <b>–§–∞—Ä–º–∏–Ω–≥ UNI</b>
‚Ä¢ –í–ª–æ–∂–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ñ–∞—Ä–º–∏–Ω–≥-–¥–µ–ø–æ–∑–∏—Ç
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –¥–æ—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é –±—É—Å—Ç–æ–≤

2Ô∏è‚É£ <b>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ 100% –æ—Ç –∏—Ö –¥–æ—Ö–æ–¥–∞ (–Ω–∞ 1 —É—Ä–æ–≤–Ω–µ)
‚Ä¢ 20 —É—Ä–æ–≤–Ω–µ–π –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π (–¥–æ 2-20% –Ω–∞ —É—Ä–æ–≤–Ω—è—Ö 2-20)

3Ô∏è‚É£ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã</b>
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ UNI-—Ç–æ–∫–µ–Ω—ã
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –º–∏—Å—Å–∏—è—Ö –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤

<i>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>
      `, {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: "üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: "https://t.me/UniFarming_Bot/UniFarm" } }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]
          ]
        })
      });
      break;
      
    case 'get_ref_link':
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥)
      await answerCallbackQuery(callbackQuery.id, '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏...');
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        const [user] = await db.select()
          .from(users)
          .where(eq(users.telegram_id, userId));
    
        if (user && user.ref_code) {
          await editMessageText(chatId, messageId, `
<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>

–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –æ—Ç –∏—Ö —Ñ–∞—Ä–º–∏–Ω–≥–∞.

–ö–æ–¥: <code>${user.ref_code}</code>
–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:
<code>https://t.me/UniFarming_Bot/UniFarm?ref_code=${user.ref_code}</code>

<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ UniFarm –ø–æ –≤–∞—à–µ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.</i>
          `, {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [{ text: "üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: "https://t.me/UniFarming_Bot/UniFarm" } }],
                [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]
              ]
            })
          });
        } else {
          await editMessageText(chatId, messageId, `
‚ö†Ô∏è <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ –í–∞—à Telegram ID (${userId}) –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É
‚Ä¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.
          `, {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [{ text: "üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: "https://t.me/UniFarming_Bot/UniFarm" } }],
                [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]
              ]
            })
          });
        }
      } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ref_code:', error);
        await editMessageText(chatId, messageId, `
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        `, {
          reply_markup: JSON.stringify({
            inline_keyboard: [
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]
            ]
          })
        });
      }
      break;
      
    case 'back_to_menu':
      // –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
      await answerCallbackQuery(callbackQuery.id, '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
      
      await editMessageText(chatId, messageId, `
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

–Ø –±–æ—Ç <b>UniFarm</b> - —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥–∞ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.

üåü <b>–° –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ:</b>
‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–∞—Ä–º–∏–Ω–≥ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ —Å 20 —É—Ä–æ–≤–Ω—è–º–∏
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∏—Å—Å–∏–∏

üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "<b>–û—Ç–∫—Ä—ã—Ç—å UniFarm</b>" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.
      `, {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: "üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: "https://t.me/UniFarming_Bot/UniFarm" } }],
            [
              { text: "üîç –ß—Ç–æ —Ç–∞–∫–æ–µ UniFarm?", callback_data: "about_unifarm" },
              { text: "üí∞ –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data: "how_to_earn" }
            ],
            [{ text: "üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data: "get_ref_link" }]
          ]
        })
      });
      break;
      
    default:
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
      await answerCallbackQuery(callbackQuery.id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞', true);
      console.log(`[Telegram Bot] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: ${data}`);
      break;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –æ—Ç webhook Telegram
 * @param update - –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
 */
async function handleTelegramUpdate(update: TelegramUpdate): Promise<any> {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (!update) {
    console.error('[Telegram Bot] –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  if (update.message) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    return handleMessageUpdate(update);
  } else if (update.callback_query) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    return handleCallbackQuery(update.callback_query);
  } else {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    console.log('[Telegram Bot] –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', 
      Object.keys(update).filter(key => key !== 'update_id').join(', '));
    return;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
 * @param update - –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
async function handleMessageUpdate(update: TelegramUpdate): Promise<any> {
  const { message } = update;
  
  if (!message) {
    console.error('[Telegram Bot] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    return;
  }
  
  const chatId = message.chat.id;
  const userId = message.from.id;
  const username = message.from.username;
  const firstName = message.from.first_name;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
  const userInfo = username ? `@${username} (ID: ${userId})` : `User ID: ${userId}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!message.text) {
    console.log(`[Telegram Bot] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç ${userInfo}`);
    return sendMessage(chatId, '–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.');
  }
  
  const messageText = message.text.trim();
  
  // –ö—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log(`\n[Telegram Bot] [${new Date().toISOString()}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userInfo}:`);
  console.log(`   –¢–µ–∫—Å—Ç: "${messageText}"`);
  console.log(`   –ß–∞—Ç: ${message.chat.type} (ID: ${chatId})`);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (messageText === '/start') {
    console.log(`[Telegram Bot] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start`);
    return handleStartCommand(chatId, { userId, username, firstName });
  } else if (messageText === '/ping' || messageText === 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å (/ping)') {
    console.log(`[Telegram Bot] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ping`);
    return handlePingCommand(chatId);
  } else if (messageText === '/info' || messageText === '‚ÑπÔ∏è –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (/info)') {
    console.log(`[Telegram Bot] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info`);
    return handleInfoCommand(chatId, { userId, username, firstName });
  } else if (messageText === '/refcode' || messageText === 'üîó –ú–æ–π —Ä–µ—Ñ. –∫–æ–¥ (/refcode)') {
    console.log(`[Telegram Bot] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /refcode`);
    return handleRefCodeCommand(chatId, userId);
  } else if (messageText === '/app' || messageText === 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (/app)') {
    console.log(`[Telegram Bot] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /app`);
    return handleAppCommand(chatId);
  } else {
    // –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    console.log(`[Telegram Bot] –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${messageText}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —ç—Ç–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    if (messageText.startsWith('/start')) {
      return handleStartCommand(chatId, { userId, username, firstName });
    } else if (messageText.includes('ping') || messageText.includes('–ø–∏–Ω–≥')) {
      return handlePingCommand(chatId);
    } else if (messageText.includes('info') || messageText.includes('–∏–Ω—Ñ–æ')) {
      return handleInfoCommand(chatId, { userId, username, firstName });
    } else if (messageText.includes('ref') || messageText.includes('–∫–æ–¥') || messageText.includes('—Ä–µ—Ñ')) {
      return handleRefCodeCommand(chatId, userId);
    } else if (messageText.includes('app') || messageText.includes('–ø—Ä–∏–ª') || messageText.includes('–æ—Ç–∫—Ä—ã—Ç—å')) {
      return handleAppCommand(chatId);
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    return sendMessage(chatId, `–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.`);
  }
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è Telegram –±–æ—Ç–∞
 * @param webhookUrl - URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://your-domain.com/api/telegram/webhook)
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
 */
async function setWebhook(webhookUrl: string): Promise<any> {
  if (!BOT_TOKEN) {
    console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' };
  }

  console.log(`[Telegram Bot] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ URL: ${webhookUrl}`);

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: webhookUrl,
        drop_pending_updates: true, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        allowed_updates: ["message"] // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ñ–∏–ª—å—Ç—Ä —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      })
    });

    const data: any = await response.json();
    
    if (data.ok) {
      console.log('[Telegram Bot] –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return { success: true, data };
    } else {
      console.error('[Telegram Bot] –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞:', data.description);
      return { success: false, error: data.description };
    }
  } catch (error: any) {
    console.error('[Telegram Bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è –±–æ—Ç–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
 */
async function deleteWebhook(): Promise<any> {
  if (!BOT_TOKEN) {
    console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' };
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        drop_pending_updates: true // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      })
    });

    const data: any = await response.json();
    
    if (data.ok) {
      console.log('[Telegram Bot] –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      return { success: true, data };
    } else {
      console.error('[Telegram Bot] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞:', data.description);
      return { success: false, error: data.description };
    }
  } catch (error: any) {
    console.error('[Telegram Bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook
 * @returns –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ
 */
async function getWebhookInfo(): Promise<any> {
  if (!BOT_TOKEN) {
    console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' };
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`, {
      method: 'GET'
    });

    const data: any = await response.json();
    
    if (data.ok) {
      console.log('[Telegram Bot] –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ:', data.result);
      return { success: true, data: data.result };
    } else {
      console.error('[Telegram Bot] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ:', data.description);
      return { success: false, error: data.description };
    }
  } catch (error: any) {
    console.error('[Telegram Bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
 * @param chatId - ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param status - –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ("started", "deployed", "updated", "error")
 * @param details - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
 */
async function sendAppStatusNotification(
  chatId: number, 
  status: "started" | "deployed" | "updated" | "error",
  details?: string
): Promise<any> {
  let emoji: string;
  let title: string;
  
  switch (status) {
    case "started":
      emoji = "üöÄ";
      title = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ";
      break;
    case "deployed":
      emoji = "‚úÖ";
      title = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ";
      break;
    case "updated":
      emoji = "üîÑ";
      title = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ";
      break;
    case "error":
      emoji = "‚ùå";
      title = "–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏";
      break;
  }
  
  const message = `
${emoji} <b>${title}</b>

‚è± –î–∞—Ç–∞/–≤—Ä–µ–º—è: ${new Date().toISOString()}
üåê URL: ${process.env.APP_URL || "–ù–µ —É–∫–∞–∑–∞–Ω"}

${details ? `<i>${details}</i>` : ""}
`;

  return sendMessage(chatId, message);
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥
 */
async function setMyCommands(): Promise<any> {
  if (!BOT_TOKEN) {
    console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' };
  }
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞
    const commands = [
      { command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
      { command: 'ping', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞' },
      { command: 'info', description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é' },
      { command: 'refcode', description: '–ü–æ–ª—É—á–∏—Ç—å –º–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥' },
      { command: 'app', description: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ UniFarm' }
    ];
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setMyCommands`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ commands })
    });
    
    const data: any = await response.json();
    
    if (data.ok) {
      console.log('[Telegram Bot] –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      return { success: true, data };
    } else {
      console.error('[Telegram Bot] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:', data.description);
      return { success: false, error: data.description };
    }
  } catch (error: any) {
    console.error('[Telegram Bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:', error);
    return { success: false, error: error.message };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ routes.ts
export {
  sendMessage,
  handleTelegramUpdate,
  handleMessageUpdate,
  setWebhook,
  deleteWebhook,
  getWebhookInfo,
  sendAppStatusNotification,
  setMyCommands
};