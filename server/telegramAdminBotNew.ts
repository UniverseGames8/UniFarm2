/**
 * ü§ñ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å UniFarm —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
 * 
 * –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
 * - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ 
 * - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * - –°–∏—Å—Ç–µ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
 * - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
 */

import fetch from 'node-fetch';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
const ADMIN_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const AUTHORIZED_ADMINS = ['DimaOsadchuk', 'a888bnd'];

// API URL –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const API_BASE_URL = process.env.NODE_ENV === 'production' 
  ? 'https://uni-farm-connect-x-lukyanenkolawfa.replit.app'
  : 'https://uni-farm-connect-x-lukyanenkolawfa.replit.app';

// –ê–¥–º–∏–Ω—Å–∫–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
const ADMIN_SECRET = 'unifarm_admin_secret_2025';

// –¢–∏–ø—ã –¥–ª—è Telegram API
interface TelegramUser {
  id: number;
  first_name?: string;
  username?: string;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: { id: number };
  text?: string;
}

interface TelegramUpdate {
  message?: TelegramMessage;
  callback_query?: {
    id: string;
    from: TelegramUser;
    message?: TelegramMessage;
    data?: string;
  };
}

/**
 * üéØ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò
 */
function getMainMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data: "menu_database" },
        { text: "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data: "menu_users" }
      ],
      [
        { text: "üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data: "menu_finance" },
        { text: "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data: "menu_analytics" }
      ],
      [
        { text: "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data: "menu_referral" },
        { text: "‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data: "menu_system" }
      ],
      [
        { text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data: "refresh_status" }
      ]
    ]
  };
}

/**
 * üóÑÔ∏è –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
 */
function getDatabaseMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üîå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –ë–î", callback_data: "db_reconnect" },
        { text: "üìã –°–æ–±—ã—Ç–∏—è –ë–î", callback_data: "db_events" }
      ],
      [
        { text: "üìä –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", callback_data: "db_status" },
        { text: "üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data: "db_test" }
      ],
      [
        { text: "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü", callback_data: "db_tables_stats" },
        { text: "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏", callback_data: "db_integrity" }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }
      ]
    ]
  };
}

/**
 * üë• –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
 */
function getUsersMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üë§ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data: "user_search" },
        { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data: "user_stats" }
      ],
      [
        { text: "üÜï –ù–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data: "user_new" },
        { text: "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data: "user_active" }
      ],
      [
        { text: "üí∞ –¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É", callback_data: "user_top_balance" },
        { text: "üéØ –¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º", callback_data: "user_top_referrals" }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }
      ]
    ]
  };
}

/**
 * üí∞ –ú–ï–ù–Æ –§–ò–ù–ê–ù–°–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô
 */
function getFinanceMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data: "finance_withdrawals" },
        { text: "üì• –î–µ–ø–æ–∑–∏—Ç—ã", callback_data: "finance_deposits" }
      ],
      [
        { text: "üíé –î–æ–±–∞–≤–∏—Ç—å UNI", callback_data: "finance_add_uni" },
        { text: "üìä –û–±—â–∏–π –±–∞–ª–∞–Ω—Å", callback_data: "finance_total_balance" }
      ],
      [
        { text: "üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data: "finance_transactions" },
        { text: "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤", callback_data: "finance_revenue" }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }
      ]
    ]
  };
}

/**
 * üìä –ú–ï–ù–Æ –ê–ù–ê–õ–ò–¢–ò–ö–ò
 */
function getAnalyticsMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "analytics_general" },
        { text: "üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data: "analytics_user_activity" }
      ],
      [
        { text: "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", callback_data: "analytics_financial" },
        { text: "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data: "analytics_referral" }
      ],
      [
        { text: "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data: "analytics_weekly" },
        { text: "üìÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data: "analytics_monthly" }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }
      ]
    ]
  };
}

/**
 * üîó –ú–ï–ù–Æ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 */
function getReferralMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data: "ref_stats" },
        { text: "üå≥ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ", callback_data: "ref_tree" }
      ],
      [
        { text: "üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤", callback_data: "ref_top" },
        { text: "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã", callback_data: "ref_rewards" }
      ],
      [
        { text: "üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞", callback_data: "ref_generate" },
        { text: "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É", callback_data: "ref_search" }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }
      ]
    ]
  };
}

/**
 * ‚öôÔ∏è –ú–ï–ù–Æ –°–ò–°–¢–ï–ú–ù–´–• –û–ü–ï–†–ê–¶–ò–ô
 */
function getSystemMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞", callback_data: "system_restart" },
        { text: "üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data: "system_logs" }
      ],
      [
        { text: "üß™ –¢–µ—Å—Ç API", callback_data: "system_test_api" },
        { text: "ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data: "system_bot_status" }
      ],
      [
        { text: "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data: "system_monitoring" },
        { text: "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data: "system_security" }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }
      ]
    ]
  };
}

/**
 * üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
 */
async function sendMessage(chatId: number, text: string, options: any = {}): Promise<void> {
  try {
    const url = `https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/sendMessage`;
    
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML',
      ...options
    };

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      console.error(`[AdminBot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.statusText}`);
    }
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

/**
 * ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function editMessage(chatId: number, messageId: number, text: string, options: any = {}): Promise<void> {
  try {
    const url = `https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/editMessageText`;
    
    const payload = {
      chat_id: chatId,
      message_id: messageId,
      text: text,
      parse_mode: 'HTML',
      ...options
    };

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      console.error(`[AdminBot] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.statusText}`);
    }
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

/**
 * üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
function isAuthorizedAdmin(username?: string): boolean {
  return username ? AUTHORIZED_ADMINS.includes(username) : false;
}

/**
 * üè† –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
 */
async function sendMainMenu(chatId: number, messageId?: number): Promise<void> {
  const welcomeText = `
üéõÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å UniFarm</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π!
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:

<i>üí° –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</i>
  `;

  if (messageId) {
    await editMessage(chatId, messageId, welcomeText, {
      reply_markup: JSON.stringify(getMainMenuKeyboard())
    });
  } else {
    await sendMessage(chatId, welcomeText, {
      reply_markup: JSON.stringify(getMainMenuKeyboard())
    });
  }
}

/**
 * üóÑÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function handleDatabaseAction(chatId: number, action: string, messageId?: number, username?: string): Promise<void> {
  if (!username) {
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å username");
    return;
  }

  switch (action) {
    case 'menu_database':
      const dbMenuText = `
üóÑÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</b>

–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:
      `;
      
      if (messageId) {
        await editMessage(chatId, messageId, dbMenuText, {
          reply_markup: JSON.stringify(getDatabaseMenuKeyboard())
        });
      }
      break;

    case 'db_reconnect':
      await sendMessage(chatId, "üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
      
      try {
        const response = await fetch(`${API_BASE_URL}/api/db/reconnect`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            admin_username: username,
            admin_key: ADMIN_SECRET
          })
        });

        const result = await response.json();
        
        if (result.success) {
          await sendMessage(chatId, `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞!\n\n${result.data.message || ''}`);
        } else {
          await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.error}`);
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error}`);
      }
      break;

    case 'db_events':
      try {
        const response = await fetch(`${API_BASE_URL}/api/db/events?admin_username=${username}&admin_key=${ADMIN_SECRET}`);
        const result = await response.json();
        
        if (result.success && result.data.events) {
          const events = result.data.events.slice(0, 10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
          let eventsText = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ë–î:</b>\n\n";
          
          events.forEach((event: any, index: number) => {
            eventsText += `${index + 1}. <code>${event.timestamp}</code>\n`;
            eventsText += `   ${event.type}: ${event.message}\n\n`;
          });
          
          await sendMessage(chatId, eventsText);
        } else {
          await sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –ë–î");
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: ${error}`);
      }
      break;

    case 'db_status':
      try {
        const response = await fetch(`${API_BASE_URL}/api/admin/db-status`);
        const result = await response.json();
        
        if (result.success) {
          const status = result.data;
          const statusText = `
üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î</b>

üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b> ${status.connected ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}
üè¢ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> <code>${status.database}</code>
üåê <b>–•–æ—Å—Ç:</b> <code>${status.host}</code>
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>${status.user}</code>
‚ö° <b>–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:</b> ${status.poolSize || 'N/A'}

‚è∞ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> ${new Date().toLocaleString('ru-RU')}
          `;
          
          await sendMessage(chatId, statusText);
        } else {
          await sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ë–î");
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error}`);
      }
      break;

    default:
      await sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ë–î");
  }
}

/**
 * üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function handleUsersAction(chatId: number, action: string, messageId?: number): Promise<void> {
  switch (action) {
    case 'menu_users':
      const usersMenuText = `
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
      `;
      
      if (messageId) {
        await editMessage(chatId, messageId, usersMenuText, {
          reply_markup: JSON.stringify(getUsersMenuKeyboard())
        });
      }
      break;

    case 'user_stats':
      try {
        const response = await fetch(`${API_BASE_URL}/api/users/stats`);
        const result = await response.json();
        
        if (result.success) {
          const stats = result.data;
          const statsText = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${stats.total || 0}
üÜï <b>–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> ${stats.todayNew || 0}
üî• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á:</b> ${stats.active24h || 0}
üí∞ <b>–° –±–∞–ª–∞–Ω—Å–æ–º > 0:</b> ${stats.withBalance || 0}

‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${new Date().toLocaleString('ru-RU')}
          `;
          
          await sendMessage(chatId, statsText);
        } else {
          await sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`);
      }
      break;

    default:
      await sendMessage(chatId, "‚ùå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
  }
}

/**
 * üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
 */
async function handleFinanceAction(chatId: number, action: string, messageId?: number): Promise<void> {
  switch (action) {
    case 'menu_finance':
      const financeMenuText = `
üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
      `;
      
      if (messageId) {
        await editMessage(chatId, messageId, financeMenuText, {
          reply_markup: JSON.stringify(getFinanceMenuKeyboard())
        });
      }
      break;

    case 'finance_withdrawals':
      try {
        const response = await fetch(`${API_BASE_URL}/api/finance/withdrawals`);
        const result = await response.json();
        
        if (result.success) {
          const withdrawals = result.data.slice(0, 5); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
          let withdrawText = "üì§ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:</b>\n\n";
          
          if (withdrawals.length === 0) {
            withdrawText += "‚úÖ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç";
          } else {
            withdrawals.forEach((w: any, index: number) => {
              withdrawText += `${index + 1}. üë§ ID: ${w.userId}\n`;
              withdrawText += `   üí∞ –°—É–º–º–∞: ${w.amount} UNI\n`;
              withdrawText += `   üìÖ –î–∞—Ç–∞: ${new Date(w.created_at).toLocaleString('ru-RU')}\n\n`;
            });
          }
          
          await sendMessage(chatId, withdrawText);
        } else {
          await sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥");
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: ${error}`);
      }
      break;

    default:
      await sendMessage(chatId, "‚ùå –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
  }
}

/**
 * üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
async function handleUpdate(update: TelegramUpdate): Promise<void> {
  try {
    if (update.message) {
      const message = update.message;
      const chatId = message.chat.id;
      const username = message.from.username;
      const text = message.text;

      console.log(`[AdminBot] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username || message.from.id}: ${text}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if (!isAuthorizedAdmin(username)) {
        await sendMessage(chatId, `
‚õîÔ∏è <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>

–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä UniFarm.
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.
        `);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (text === '/start' || text === '/menu') {
        await sendMainMenu(chatId);
      } else {
        await sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é");
      }
    }

    if (update.callback_query) {
      const query = update.callback_query;
      const chatId = query.message?.chat.id;
      const messageId = query.message?.message_id;
      const username = query.from.username;
      const data = query.data;

      if (!chatId || !messageId || !data) return;

      console.log(`[AdminBot] Callback –æ—Ç ${username || query.from.id}: ${data}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if (!isAuthorizedAdmin(username)) {
        await sendMessage(chatId, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω");
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback'–∏
      if (data === 'back_main') {
        await sendMainMenu(chatId, messageId);
      } else if (data.startsWith('menu_database') || data.startsWith('db_')) {
        await handleDatabaseAction(chatId, data, messageId, username);
      } else if (data.startsWith('menu_users') || data.startsWith('user_')) {
        await handleUsersAction(chatId, data, messageId);
      } else if (data.startsWith('menu_finance') || data.startsWith('finance_')) {
        await handleFinanceAction(chatId, data, messageId);
      } else if (data === 'refresh_status') {
        await sendMainMenu(chatId, messageId);
      } else {
        await sendMessage(chatId, "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ callback_query_id: query.id })
      });
    }
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
  }
}

/**
 * ‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞
 */
export async function setAdminBotWebhook(baseUrl: string): Promise<boolean> {
  if (!ADMIN_BOT_TOKEN) {
    console.error('[AdminBot] –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  try {
    const webhookUrl = `${baseUrl}/api/admin/webhook`;
    
    const response = await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url: webhookUrl })
    });

    const data = await response.json();
    if (data.ok) {
      console.log(`[AdminBot] ‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
      return true;
    } else {
      console.error(`[AdminBot] ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${data.description}`);
      return false;
    }
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:', error);
    return false;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
export {
  handleUpdate,
  sendMessage,
  isAuthorizedAdmin,
  sendMainMenu
};