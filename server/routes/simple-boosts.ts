/**
 * –ü–†–û–°–¢–ò–ô –†–ê–ë–û–ß–ò–ô –ú–ê–†–®–†–£–¢ –î–õ–Ø –ë–£–°–¢–Ü–í
 * –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

import { Router } from 'express';

const router = Router();

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö boost-–ø–∞–∫–µ—Ç—ñ–≤
router.get('/api/v2/boosts/active', async (req, res) => {
  try {
    console.log('[SIMPLE BOOSTS] üöÄ –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö boost-–ø–∞–∫–µ—Ç–æ–≤');
    
    const { getSingleDbConnection } = await import('../single-db-connection');
    const { eq } = await import('drizzle-orm');
    
    const db = await getSingleDbConnection();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è boost-–ø–∞–∫–µ—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    const activeBoosts = await db.execute(`
      SELECT id, name, description, price_uni, price_ton, 
             fixed_ton_daily_rate, uni_bonus_amount, duration_hours
      FROM boost_packages 
      WHERE is_active = true
      ORDER BY price_ton ASC
    `);
    
    console.log('[SIMPLE BOOSTS] üìã –ù–∞–π–¥–µ–Ω–æ boost-–ø–∞–∫–µ—Ç–æ–≤:', activeBoosts.length);
    
    res.status(200).json({
      success: true,
      data: activeBoosts,
      message: `–ù–∞–π–¥–µ–Ω–æ ${activeBoosts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö boost-–ø–∞–∫–µ—Ç–æ–≤`
    });

  } catch (error) {
    console.error('[SIMPLE BOOSTS] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è boost-–ø–∞–∫–µ—Ç–æ–≤:', error);

    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è boost-–ø–∞–∫–µ—Ç–æ–≤',
      message: error instanceof Error ? error.message : String(error)
    });
  }
});

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ boost-–ø–∞–∫–µ—Ç–∞
router.post('/api/v2/boosts/purchase', async (req, res) => {
  try {
    const { user_id, boost_package_id } = req.body;
    console.log('[SIMPLE BOOSTS] üõí –ü–æ–∫—É–ø–∫–∞ boost-–ø–∞–∫–µ—Ç–∞:', { user_id, boost_package_id });
    
    const { getSingleDbConnection } = await import('../single-db-connection');
    
    const db = await getSingleDbConnection();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ boost-–ø–∞–∫–µ—Ç–µ
    const boostInfo = await db.execute(`
      SELECT id, name, price_uni, price_ton, boost_multiplier, duration_hours
      FROM boost_packages 
      WHERE id = ${boost_package_id} AND is_active = true
    `);
    
    if (boostInfo.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Boost-–ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    const boost = boostInfo[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBalance = await db.execute(`
      SELECT balance_uni, balance_ton FROM users WHERE id = ${user_id}
    `);
    
    if (userBalance.length === 0) {
      return res.status(404).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    const currentBalance = parseFloat(userBalance[0].balance_uni || '0');
    const boostPrice = parseFloat(boost.price_uni || '0');
    
    if (currentBalance < boostPrice) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
        required: boostPrice,
        available: currentBalance
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ boost-–∞
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + parseInt(boost.duration_hours || '24'));
    
    await db.execute(`
      INSERT INTO user_boosts (user_id, boost_package_id, expires_at)
      VALUES (${user_id}, ${boost_package_id}, '${expiresAt.toISOString()}')
    `);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞
    await db.execute(`
      UPDATE users 
      SET balance_uni = balance_uni - ${boostPrice}
      WHERE id = ${user_id}
    `);
    
    console.log('[SIMPLE BOOSTS] ‚úÖ Boost-–ø–∞–∫–µ—Ç –∫—É–ø–ª–µ–Ω:', boost.name);
    
    res.status(200).json({
      success: true,
      data: {
        boost_name: boost.name,
        multiplier: boost.boost_multiplier,
        duration_hours: boost.duration_hours,
        expires_at: expiresAt,
        price_paid: boostPrice
      },
      message: `Boost-–ø–∞–∫–µ—Ç "${boost.name}" —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω`
    });
    
  } catch (error) {
    console.error('[SIMPLE BOOSTS] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ boost-–ø–∞–∫–µ—Ç–∞:', error);
    
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ boost-–ø–∞–∫–µ—Ç–∞',
      message: error instanceof Error ? error.message : String(error)
    });
  }
});

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get('/api/v2/boosts/user/:user_id', async (req, res) => {
  try {
    const userId = parseInt(req.params.user_id);
    console.log('[SIMPLE BOOSTS] üìä –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    const { getSingleDbConnection } = await import('../single-db-connection');
    
    const db = await getSingleDbConnection();
    
    const userBoosts = await db.execute(`
      SELECT 
        ub.id,
        ub.purchased_at,
        ub.expires_at,
        ub.is_active,
        bp.name,
        bp.description,
        bp.boost_multiplier,
        bp.duration_hours,
        CASE 
          WHEN ub.expires_at > NOW() THEN true 
          ELSE false 
        END as is_expired
      FROM user_boosts ub
      JOIN boost_packages bp ON ub.boost_package_id = bp.id
      WHERE ub.user_id = ${userId}
      ORDER BY ub.purchased_at DESC
    `);
    
    res.status(200).json({
      success: true,
      data: userBoosts,
      message: `–ù–∞–π–¥–µ–Ω–æ ${userBoosts.length} –±—É—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
    });
    
  } catch (error) {
    console.error('[SIMPLE BOOSTS] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—É—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—É—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      message: error instanceof Error ? error.message : String(error)
    });
  }
});

export default router;