/**
 * –ü–†–û–°–¢–ò–ô –†–ê–ë–û–ß–ò–ô –ú–ê–†–®–†–£–¢ –î–õ–Ø –ú–ò–°–°–ò–ô
 * –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

import { Router } from 'express';

const router = Router();

// –ü—Ä–æ—Å—Ç–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –º—ñ—Å—ñ–π
router.get('/api/v2/missions/active', async (req, res) => {
  try {
    console.log('[SIMPLE MISSIONS] üöÄ –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π');
    
    const { getSingleDbConnection } = await import('../single-db-connection');
    const { missions } = await import('../../shared/schema');
    const { eq } = await import('drizzle-orm');
    
    const db = await getSingleDbConnection();
    const activeMissions = await db
      .select()
      .from(missions)
      .where(eq(missions.is_active, true));
    
    console.log('[SIMPLE MISSIONS] üìã –ù–∞–π–¥–µ–Ω–æ –º–∏—Å—Å–∏–π:', activeMissions.length);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏—Å—Å–∏–∏
    const withLinks = activeMissions.map(mission => ({
      ...mission,
      link: mission.link || getDefaultLink(mission.type)
    }));
    
    console.log('[SIMPLE MISSIONS] üìã –ú–∏—Å—Å–∏–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏:', withLinks);

    res.status(200).json({
      success: true,
      data: withLinks,
      message: `–ù–∞–π–¥–µ–Ω–æ ${withLinks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π`
    });

  } catch (error) {
    console.error('[SIMPLE MISSIONS] ‚ùå –û—à–∏–±–∫–∞:', error);

    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏—Å—Å–∏–π',
      message: error instanceof Error ? error.message : String(error)
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
function getDefaultLink(type: string): string {
  switch (type) {
    case 'telegram_group':
      return 'https://t.me/unifarmchat';
    case 'telegram_channel':
      return 'https://t.me/unifarmchannel';
    case 'youtube':
      return 'https://youtube.com/@unifarm';
    case 'tiktok':
      return 'https://tiktok.com/@unifarm';
    default:
      return 'https://t.me/unifarm';
  }
}

// –ü—Ä–æ—Å—Ç–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –º—ñ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get('/api/v2/user-missions', async (req, res) => {
  try {
    const userId = parseInt(req.query.user_id as string) || 1;
    console.log('[SIMPLE MISSIONS] üîç –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    const { getSingleDbConnection } = await import('../single-db-connection');
    const { userMissions } = await import('../../shared/schema');
    const { eq } = await import('drizzle-orm');
    
    const db = await getSingleDbConnection();
    const completedMissions = await db
      .select()
      .from(userMissions)
      .where(eq(userMissions.user_id, userId));
    
    res.status(200).json({
      success: true,
      data: completedMissions,
      message: `–ù–∞–π–¥–µ–Ω–æ ${completedMissions.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π`
    });
    
  } catch (error) {
    console.error('[SIMPLE MISSIONS] ‚ùå –ü–æ–º–∏–ª–∫–∞ user missions:', error);
    
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –º—ñ—Å—ñ–π'
    });
  }
});

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º—ñ—Å—ñ—ó
router.post('/api/v2/missions/complete', async (req, res) => {
  try {
    const { user_id, mission_id } = req.body;
    console.log('[SIMPLE MISSIONS] üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏:', { user_id, mission_id });
    
    const { getSingleDbConnection } = await import('../single-db-connection');
    const { userMissions, users, missions } = await import('../../shared/schema');
    const { eq, and } = await import('drizzle-orm');
    
    const db = await getSingleDbConnection();
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º—ñ—Å—ñ—è –Ω–µ –±—É–ª–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —Ä–∞–Ω—ñ—à–µ
    const existingCompletion = await db
      .select()
      .from(userMissions)
      .where(and(
        eq(userMissions.user_id, user_id),
        eq(userMissions.mission_id, mission_id)
      ));
    
    if (existingCompletion.length > 0) {
      console.log('[SIMPLE MISSIONS] ‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', { user_id, mission_id });
      return res.status(409).json({
        success: false,
        error: '–ú–∏—Å—Å–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
        code: 'MISSION_ALREADY_COMPLETED',
        message: '–≠—Ç–∞ –º–∏—Å—Å–∏—è —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ'
      });
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º—ñ—Å—ñ—é –¥–ª—è –Ω–∞–≥–æ—Ä–æ–¥–∏
    const mission = await db
      .select()
      .from(missions)
      .where(eq(missions.id, mission_id));
    
    if (mission.length === 0) {
      return res.status(404).json({
        success: false,
        error: '–ú–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    const reward = parseFloat(mission[0].reward_uni || '0');
    
    // –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ—Å—ñ—ó
    await db.insert(userMissions).values({
      user_id,
      mission_id,
      completed_at: new Date()
    });
    
    // –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–∞–≥–æ—Ä–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —á–µ—Ä–µ–∑ Drizzle
    await db
      .update(users)
      .set({
        balance_uni: `(balance_uni::numeric + ${reward})::varchar`
      })
      .where(eq(users.id, user_id));
    
    console.log('[SIMPLE MISSIONS] ‚úÖ –ú–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞–≥—Ä–∞–¥–∞:', reward);
    
    res.status(200).json({
      success: true,
      data: {
        mission_id,
        reward,
        message: `–ü–æ–ª—É—á–µ–Ω–æ ${reward} UNI!`
      },
      message: '–ú–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    });
    
  } catch (error) {
    console.error('[SIMPLE MISSIONS] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º—ñ—Å—ñ—ó:', error);
    
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º—ñ—Å—ñ—ó',
      message: error instanceof Error ? error.message : String(error)
    });
  }
});

export default router;