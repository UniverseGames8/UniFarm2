// –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ REDMAP.txt
// –ü–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å–≤–µ—Ä—è–π—Å—è —Å RedMap. –ù–∞—Ä—É—à–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã.
// üéØ –°–ü–†–û–©–ï–ù–ï –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ production –±–∞–∑—É
console.log('üéØ [SYSTEM] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è PRODUCTION Neon DB: ep-lucky-boat-a463bggt');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
import dotenv from 'dotenv';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

// ESM –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª .env
const envPath = path.resolve(process.cwd(), '.env');
if (fs.existsSync(envPath)) {
  console.log('[Config] Loading environment variables from:', envPath);
  const result = dotenv.config({ path: envPath });
  
  if (result.error) {
    console.error('[Config] Error loading .env file:', result.error);
  } else {
    console.log('[Config] Environment variables loaded successfully');
  }
} else {
  console.error('[Config] .env file not found at:', envPath);
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π production URL –¥–ª—è Telegram –±–æ—Ç–∞
if (!process.env.APP_URL) {
  process.env.APP_URL = 'https://uni-farm-connect-x-lukyanenkolawfa.replit.app';
  console.log('[Config] Setting APP_URL manually:', process.env.APP_URL);
}

if (!process.env.MINI_APP_URL) {
  process.env.MINI_APP_URL = 'https://uni-farm-connect-x-lukyanenkolawfa.replit.app';
  console.log('[Config] Setting MINI_APP_URL manually:', process.env.MINI_APP_URL);
}

if (!process.env.TELEGRAM_WEBHOOK_URL) {
  process.env.TELEGRAM_WEBHOOK_URL = `${process.env.APP_URL}/api/telegram/webhook`;
  console.log('[Config] Setting TELEGRAM_WEBHOOK_URL manually:', process.env.TELEGRAM_WEBHOOK_URL);
}

// –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('[Telegram Config] APP_URL:', process.env.APP_URL);
console.log('[Telegram Config] MINI_APP_URL:', process.env.MINI_APP_URL);
console.log('[Telegram Config] TELEGRAM_WEBHOOK_URL:', process.env.TELEGRAM_WEBHOOK_URL);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è SSL
process.env.PGSSLMODE = 'require';

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–ø—Ä–æ—â–µ–Ω–∏–π db-connect-unified.ts

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Neon DB –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';
process.env.SKIP_PARTITION_CREATION = 'true';
process.env.IGNORE_PARTITION_ERRORS = 'true';

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Express –∏ –±–∞–∑–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
import express, { 
  type Request, 
  type Response, 
  type NextFunction, 
  Router,
  type RequestHandler,
  type ErrorRequestHandler 
} from "express";
import http from 'http';
import { WebSocketServer } from 'ws';

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import { testConnection, db, queryWithRetry, dbType, pool } from './db-connect-unified';
// –í–∏–¥–∞–ª–µ–Ω–æ: import { DatabaseType } from "./db-config";

// –ò–º–ø–æ—Ä—Ç—ã middleware –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import { databaseErrorHandler } from './middleware/databaseErrorHandler';
import { healthCheckMiddleware } from './middleware/health-check';
import { responseFormatter } from "./middleware/responseFormatter";
import { errorHandler } from "./middleware/errorHandler";

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
import { registerNewRoutes } from "./routes-new";
import { setupVite, serveStatic, log } from "./vite";
// import { setupProductionStatic } from "./productionStatic"; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ –º–∏–≥—Ä–∞—Ü–∏–π
import { startBackgroundTasks } from "./background-tasks";
import { schedulePartitionCreation } from "./cron/partition-scheduler";
import { migrateRefCodes } from "./migrations/refCodeMigration";

// –ò–º–ø–æ—Ä—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
import { setupTelegramHook } from './telegram/setup-hook';

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logger from './utils/logger';

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–π
import session from 'express-session';
import connectPgSimple from 'connect-pg-simple';
import memoryStore from 'memorystore';

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error: Error) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if (error.message && (
      error.message.includes('partitioned') || 
      error.message.includes('partition') ||
      error.message.includes('Failed to create partitions')
    )) {
    logger.warn('[Server] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return; // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  }

  logger.error('[Server] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤ –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason: unknown, promise: Promise<unknown>) => {
  logger.error('[SERVER] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –ø—Ä–æ–º–∏—Å–∞:', {
    reason: reason instanceof Error ? reason.message : String(reason),
    stack: reason instanceof Error ? reason.stack : undefined,
    timestamp: new Date().toISOString()
  });
  
  // –õ–æ–≥–∏—Ä—É–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (reason instanceof Error) {
    logger.error('[SERVER] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      name: reason.name,
      message: reason.message,
      stack: reason.stack,
      time: new Date().toISOString()
    });
  }
});

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
async function startServer(): Promise<void> {
  logger.info('[Server] üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
  logger.info('[Server] üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  const isDbConnected = await testConnection();

  if (!isDbConnected) {
    logger.error('[Server] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
    logger.info('[Server] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

    // –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
    const reconnected = await new Promise<boolean>(resolve => {
      setTimeout(async () => {
        try {
          const result = await testConnection();
          resolve(result);
        } catch (error) {
          logger.error('[Server] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
          resolve(false);
        }
      }, 3000);
    });

    if (!reconnected) {
      logger.error('[Server] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!');
      logger.warn('[Server] ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∑–∞–ø—É—Å–∫, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ API!');
    } else {
      logger.info('[Server] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
  } else {
    logger.info('[Server] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  // –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  const app = express();
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));

  // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
  const MemoryStore = memoryStore(session);
  const PgStore = connectPgSimple(session);
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π middleware
  app.use(session({
    store: process.env.USE_MEMORY_SESSION === 'true' 
      ? new MemoryStore({
          checkPeriod: 86400000 // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        }) 
      : new PgStore({
          pool: pool as any, // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å connect-pg-simple
          tableName: 'session',
          createTableIfMissing: true
        }),
    secret: process.env.SESSION_SECRET || 'UniFarm_secret_key_change_in_production',
    resave: false,
    saveUninitialized: false,
    cookie: { 
      secure: process.env.NODE_ENV === 'production',
      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
      httpOnly: true,
      sameSite: 'lax'
    }
  }));

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
  app.use(databaseErrorHandler as unknown as RequestHandler);
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  app.use(healthCheckMiddleware as express.RequestHandler);
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ API
  app.use(responseFormatter as any);

  // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  const apiLoggingMiddleware: RequestHandler = (req, res, next) => {
    const start = Date.now();
    const path = req.path;
    let capturedJsonResponse: Record<string, any> | undefined = undefined;

    const originalResJson = res.json;
    res.json = function (bodyJson: any) {
      capturedJsonResponse = bodyJson;
      return originalResJson.call(res, bodyJson);
    };

    res.on("finish", () => {
      const duration = Date.now() - start;
      if (path.startsWith("/api")) {
        let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
        if (capturedJsonResponse) {
          logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
        }

        if (logLine.length > 80) {
          logLine = logLine.slice(0, 79) + "‚Ä¶";
        }

        log(logLine);
      }
    });

    next();
  };
  
  app.use('/api', apiLoggingMiddleware);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
  if (process.env.DEBUG_API_REQUESTS === 'true') {
    const debugMiddleware: RequestHandler = (req, _res, next) => {
      if (req.path.startsWith('/api/')) {
        logger.debug('[–ê–£–î–ò–¢] [' + new Date().toISOString() + '] Request to ' + req.method + ' ' + req.url);
        logger.debug('[–ê–£–î–ò–¢] Headers:', JSON.stringify(req.headers, null, 2));
      }
      next();
    };
    
    app.use('/api', debugMiddleware);
  }

  // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è
  const healthRouter = Router();

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
  const healthHandler = (req: Request, res: Response): Response => {
    logger.debug('[Health Check] –ó–∞–ø—Ä–æ—Å –∫ /health —ç–Ω–¥–ø–æ–∏–Ω—Ç—É');
    return res.status(200).send({
      status: 'ok',
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development'
    });
  };
  
  healthRouter.get('/health', healthHandler as any);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
  const rootHealthHandler = (req: Request, res: Response) => {
    logger.debug('[Health Check] –ó–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É');
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç Replit
    if (req.query.health === 'check' || 
        req.headers['user-agent']?.includes('Replit') || 
        req.headers['x-replit-deployment-check']) {
      logger.info('[Health Check] Replit –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
      return res.status(200).send('OK');
    }
    
    // –û—Ç–¥–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const indexPath = path.join(__dirname, '../dist/public/index.html');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (fs.existsSync(indexPath)) {
      logger.debug('[Frontend] –û—Ç–¥–∞–µ–º index.html —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞');
      return res.sendFile(indexPath);
    }
    
    // Fallback –µ—Å–ª–∏ dist –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ—Ç–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π HTML –¥–ª—è Mini App
    logger.debug('[Frontend] dist/index.html –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    res.status(200).send(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>UniFarm</title>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
          <meta name="telegram-web-app-ready" content="true" />
          <meta name="format-detection" content="telephone=no" />
          <meta name="color-scheme" content="light dark" />
        </head>
        <body>
          <div id="root">
            <div style="display: flex; justify-content: center; align-items: center; height: 100vh; font-family: Arial, sans-serif;">
              <div style="text-align: center;">
                <h1>üåæ UniFarm</h1>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...</p>
              </div>
            </div>
          </div>
        </body>
      </html>
    `);
  };
  
  healthRouter.get('/', rootHealthHandler as any);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –∑–¥–æ—Ä–æ–≤—å—è
  app.use('/', healthRouter);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è Telegram WebApp –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const telegramWebAppMiddleware: RequestHandler = (req, res, next) => {
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
    const origin = req.headers.origin || '*';

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Telegram Mini App —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies
    res.header("Access-Control-Allow-Origin", origin);
    res.header("Access-Control-Allow-Credentials", "true");
    res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-telegram-data, x-telegram-user-id");

    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Telegram
    res.header("Content-Security-Policy", "default-src * 'self' data: blob: 'unsafe-inline' 'unsafe-eval'");

    // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ OPTIONS –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
    if (req.method === 'OPTIONS') {
      return res.status(200).send();
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Telegram
    const telegramParams = ['tgWebAppData', 'tgWebAppVersion', 'tgWebAppPlatform', 'tgWebAppStartParam']
      .filter(param => req.query[param])
      .reduce((acc, param) => {
        acc[param] = req.query[param];
        return acc;
      }, {} as Record<string, any>);

    if (Object.keys(telegramParams).length > 0) {
      logger.debug('[TelegramWebApp] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL:', telegramParams);
    }

    next();
  };
  
  app.use(telegramWebAppMiddleware);

  // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const server = http.createServer(app);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const wss = new WebSocketServer({ server });
  
  wss.on('connection', (ws, req) => {
    logger.info('[WebSocket] –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ws.send(JSON.stringify({
      type: 'connection',
      status: 'connected',
      timestamp: new Date().toISOString()
    }));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        logger.info('[WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        
        // –≠—Ö–æ-–æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        ws.send(JSON.stringify({
          type: 'echo',
          originalMessage: message,
          timestamp: new Date().toISOString()
        }));
      } catch (error) {
        logger.error('[WebSocket] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    ws.on('close', (code, reason) => {
      logger.info(`[WebSocket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: ${code} - ${reason}`);
    });
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    ws.on('error', (error) => {
      logger.error(`[WebSocket] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:`, error.message);
      // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ - –ø–æ–∑–≤–æ–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    });
    
    // Heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const heartbeat = setInterval(() => {
      if (ws.readyState === ws.OPEN) {
        ws.ping();
      } else {
        clearInterval(heartbeat);
      }
    }, 30000); // ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    ws.on('pong', () => {
      logger.debug('[WebSocket] Pong –ø–æ–ª—É—á–µ–Ω');
    });
  });
  
  // === API v1 ‚Üí v2 MAPPING –°–ò–°–¢–ï–ú–ê ===
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  
  // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è TON Farming —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.get('/api/ton-farming/info', (req, res, next) => {
    logger.info('[API MAP] /api/ton-farming/info ‚Üí /api/v2/ton-farming/info');
    req.url = '/api/v2/ton-farming/info';
    next();
  });
  
  app.get('/api/ton-farming/boosts', (req, res, next) => {
    logger.info('[API MAP] /api/ton-farming/boosts ‚Üí /api/v2/ton-farming/boosts');
    req.url = '/api/v2/ton-farming/boosts';
    next();
  });
  
  app.get('/api/ton-farming/active', (req, res, next) => {
    logger.info('[API MAP] /api/ton-farming/active ‚Üí /api/v2/ton-farming/active');
    req.url = '/api/v2/ton-farming/active';
    next();
  });
  
  app.post('/api/ton-farming/purchase', (req, res, next) => {
    logger.info('[API MAP] /api/ton-farming/purchase ‚Üí /api/v2/ton-farming/purchase');
    req.url = '/api/v2/ton-farming/purchase';
    next();
  });
  
  app.post('/api/ton-farming/confirm-payment', (req, res, next) => {
    logger.info('[API MAP] /api/ton-farming/confirm-payment ‚Üí /api/v2/ton-farming/confirm-payment');
    req.url = '/api/v2/ton-farming/confirm-payment';
    next();
  });
  
  app.post('/api/ton-farming/update', (req, res, next) => {
    logger.info('[API MAP] /api/ton-farming/update ‚Üí /api/v2/ton-farming/update');
    req.url = '/api/v2/ton-farming/update';
    next();
  });
  
  // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è UniPool Farming —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.get('/api/uni-farming/status', (req, res, next) => {
    logger.info('[API MAP] /api/uni-farming/status ‚Üí /api/v2/uni-farming/status');
    req.url = '/api/v2/uni-farming/status';
    next();
  });
  
  app.post('/api/uni-farming/purchase', (req, res, next) => {
    logger.info('[API MAP] /api/uni-farming/purchase ‚Üí /api/v2/uni-farming/purchase');
    req.url = '/api/v2/uni-farming/purchase';
    next();
  });
  
  app.post('/api/uni-farming/withdraw', (req, res, next) => {
    logger.info('[API MAP] /api/uni-farming/withdraw ‚Üí /api/v2/uni-farming/withdraw');
    req.url = '/api/v2/uni-farming/withdraw';
    next();
  });
  
  // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è Wallet —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.get('/api/wallet/balance', (req, res, next) => {
    logger.info('[API MAP] /api/wallet/balance ‚Üí /api/v2/wallet/balance');
    req.url = '/api/v2/wallet/balance';
    next();
  });
  
  app.post('/api/wallet/connect', (req, res, next) => {
    logger.info('[API MAP] /api/wallet/connect ‚Üí /api/v2/wallet/connect');
    req.url = '/api/v2/wallet/connect';
    next();
  });
  
  app.post('/api/wallet/disconnect', (req, res, next) => {
    logger.info('[API MAP] /api/wallet/disconnect ‚Üí /api/v2/wallet/disconnect');
    req.url = '/api/v2/wallet/disconnect';
    next();
  });
  
  app.get('/api/wallet/transactions', (req, res, next) => {
    logger.info('[API MAP] /api/wallet/transactions ‚Üí /api/v2/wallet/transactions');
    req.url = '/api/v2/wallet/transactions';
    next();
  });
  
  app.post('/api/wallet/withdraw', (req, res, next) => {
    logger.info('[API MAP] /api/wallet/withdraw ‚Üí /api/v2/wallet/withdraw');
    req.url = '/api/v2/wallet/withdraw';
    next();
  });
  
  // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è Boosts —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.get('/api/boosts', (req, res, next) => {
    logger.info('[API MAP] /api/boosts ‚Üí /api/v2/boosts');
    req.url = '/api/v2/boosts';
    next();
  });
  
  app.get('/api/boosts/active', (req, res, next) => {
    logger.info('[API MAP] /api/boosts/active ‚Üí /api/v2/boosts/active');
    req.url = '/api/v2/boosts/active';
    next();
  });
  
  app.post('/api/boosts/purchase', (req, res, next) => {
    logger.info('[API MAP] /api/boosts/purchase ‚Üí /api/v2/boosts/purchase');
    req.url = '/api/v2/boosts/purchase';
    next();
  });
  
  // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è Missions —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.get('/api/missions/active', (req, res, next) => {
    logger.info('[API MAP] /api/missions/active ‚Üí /api/v2/missions/active');
    req.url = '/api/v2/missions/active';
    next();
  });
  
  app.get('/api/user-missions', (req, res, next) => {
    logger.info('[API MAP] /api/user-missions ‚Üí /api/v2/user-missions');
    req.url = '/api/v2/user-missions';
    next();
  });
  
  app.get('/api/missions/with-completion', (req, res, next) => {
    logger.info('[API MAP] /api/missions/with-completion ‚Üí /api/v2/missions/with-completion');
    req.url = '/api/v2/missions/with-completion';
    next();
  });
  
  app.post('/api/missions/complete', (req, res, next) => {
    logger.info('[API MAP] /api/missions/complete ‚Üí /api/v2/missions/complete');
    req.url = '/api/v2/missions/complete';
    next();
  });
  
  // –ö–†–ò–¢–ò–ß–ù–ò–ô –ú–ê–†–®–†–£–¢: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π endpoint –Ω–∞ —Ä–æ–±–æ—á–∏–π
  app.get('/api/v2/missions/user-completed', (req, res, next) => {
    logger.info('[API MAP] /api/v2/missions/user-completed ‚Üí /api/v2/user-missions');
    req.url = '/api/v2/user-missions';
    next();
  });
  

  
  // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è Referrals —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.get('/api/referrals/tree', (req, res, next) => {
    logger.info('[API MAP] /api/referrals/tree ‚Üí /api/v2/referrals/tree');
    req.url = '/api/v2/referrals/tree';
    next();
  });
  
  app.get('/api/referrals/stats', (req, res, next) => {
    logger.info('[API MAP] /api/referrals/stats ‚Üí /api/v2/referrals/stats');
    req.url = '/api/v2/referrals/stats';
    next();
  });
  
  app.post('/api/referrals/apply', (req, res, next) => {
    logger.info('[API MAP] /api/referrals/apply ‚Üí /api/v2/referrals/apply');
    req.url = '/api/v2/referrals/apply';
    next();
  });
  
  // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è Daily Bonus —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.get('/api/daily-bonus/status', (req, res, next) => {
    logger.info('[API MAP] /api/daily-bonus/status ‚Üí /api/v2/daily-bonus/status');
    req.url = '/api/v2/daily-bonus/status';
    next();
  });
  
  app.post('/api/daily-bonus/claim', (req, res, next) => {
    logger.info('[API MAP] /api/daily-bonus/claim ‚Üí /api/v2/daily-bonus/claim');
    req.url = '/api/v2/daily-bonus/claim';
    next();
  });
  
  app.get('/api/daily-bonus/streak-info', (req, res, next) => {
    logger.info('[API MAP] /api/daily-bonus/streak-info ‚Üí /api/v2/daily-bonus/streak-info');
    req.url = '/api/v2/daily-bonus/streak-info';
    next();
  });
  
  // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è Session —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.post('/api/session/restore', (req, res, next) => {
    logger.info('[API MAP] /api/session/restore ‚Üí /api/v2/session/restore');
    req.url = '/api/v2/session/restore';
    next();
  });
  
  // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è Users —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.get('/api/users/:id', (req, res, next) => {
    logger.info('[API MAP] /api/users/:id ‚Üí /api/v2/users/:id');
    req.url = '/api/v2/users/' + req.params.id;
    next();
  });
  
  app.get('/api/users/:userId/transactions', (req, res, next) => {
    logger.info('[API MAP] /api/users/:userId/transactions ‚Üí /api/v2/users/:userId/transactions');
    req.url = '/api/v2/users/' + req.params.userId + '/transactions';
    next();
  });

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ª—é–±—ã—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è v1 –º–∞—Ä—à—Ä—É—Ç–æ–≤
  // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π v2 –º–∞—Ä—à—Ä—É—Ç–æ–≤
  app.use('/api/', (req, res, next) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ v2 –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    if (req.url.startsWith('/v2/') || 
        req.url.startsWith('/health') || 
        req.url.startsWith('/db/') || 
        req.url.startsWith('/telegram/') || 
        req.url.startsWith('/admin/')) {
      return next();
    }
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ /api/* –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /api/v2/*
    const originalUrl = req.url;
    req.url = '/v2' + req.url;
    logger.info(`[API MAP FALLBACK] /api${originalUrl} ‚Üí /api/v2${originalUrl}`);
    next();
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Telegram routes –∏ webhook
  try {
    const { default: telegramRouter } = await import('./telegram/routes');
    app.use('/api/telegram', telegramRouter);

  // –¢–µ—Å—Ç–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ production –±–∞–∑–∏
  const { getProductionDbStatus, testTelegramRegistration, checkUser } = require('./api/test-production-db');
  app.get('/api/test/production-db', getProductionDbStatus);
  app.post('/api/test/telegram-register', testTelegramRegistration);
  app.get('/api/test/user/:user_id', checkUser);
  
  logger.info('[Server] ‚úÖ Telegram –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: /api/telegram/*');
  } catch (error) {
    logger.error('[Server] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Telegram –º–∞—Ä—à—Ä—É—Ç–æ–≤:', error);
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    registerNewRoutes(app);
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —Ä–æ–±–æ—á–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º—ñ—Å—ñ–π
    const simpleMissionsRouter = await import('./routes/simple-missions.js');
    app.use('/', simpleMissionsRouter.default);
    logger.info('[Server] ‚úÖ –ü—Ä–æ—Å—Ç–∏–π –º–∞—Ä—à—Ä—É—Ç –º—ñ—Å—ñ–π –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —Ä–æ–±–æ—á–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –±—É—Å—Ç—ñ–≤
    const simpleBoostsRouter = await import('./routes/simple-boosts.js');
    app.use('/', simpleBoostsRouter.default);
    logger.info('[Server] ‚úÖ –ü—Ä–æ—Å—Ç–∏–π –º–∞—Ä—à—Ä—É—Ç –±—É—Å—Ç—ñ–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API
    const baseUrl = process.env.NODE_ENV === 'production' 
      ? (process.env.PRODUCTION_URL || 'https://uni-farm.app') 
      : 'https://uni-farm-connect-2.osadchukdmitro2.replit.app';
      
    logger.info('[Server] ‚úÖ API –º–∞—Ä—à—Ä—É—Ç—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  } catch (error) {
    logger.error('[Server] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API:', 
      error instanceof Error ? error.message : String(error));
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  app.use((err: any, req: any, res: any, next: any) => {
    errorHandler(err, req, res, next);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º health check endpoint –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
  app.get('/health', (req: any, res: any) => {
    logger.debug('[Health Check] –ó–∞–ø—Ä–æ—Å –∫ health endpoint');
    return res.status(200).json({ status: 'OK', timestamp: new Date().toISOString() });
  });

  // –ö–†–ò–¢–ò–ß–ù–û: –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –º—ñ—Å—ñ–π –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∑ –ë–î
  app.get('/api/v2/missions/active', async (req: any, res: any) => {
    try {
      console.log('[QUICK FIX] üîç –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î');
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
      const { getSingleDbConnection } = await import('./single-db-connection.js');
      const { missions } = await import('../shared/schema.js');
      const { eq } = await import('drizzle-orm');
      
      const db = await getSingleDbConnection();
      
      const activeMissions = await db
        .select()
        .from(missions)
        .where(eq(missions.is_active, true));
      
      console.log('[QUICK FIX] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—ñ–π:', activeMissions.length);
      
      res.status(200).json({
        success: true,
        data: activeMissions,
        message: '–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î'
      });
    } catch (error) {
      console.error('[QUICK FIX] ‚ùå –û—à–∏–±–∫–∞:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏—Å—Å–∏–π',
        message: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (app.get("env") === "development") {
    logger.info('[Server] üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (development), –∏—Å–ø–æ–ª—å–∑—É–µ–º Vite middleware');
    await setupVite(app, server);
  } else {
    logger.info('[Server] üöÄ –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤');
    // setupProductionStatic(app); // –û—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º express.static –Ω–∏–∂–µ
  }
  
  // –ï—â–µ —Ä–∞–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  app.use((err: any, req: any, res: any, next: any) => {
    errorHandler(err, req, res, next);
  });

  // –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è frontend (CSS, JS, assets)
  app.use(express.static(path.join(__dirname, '../dist/public')));

  // –î–æ–±–∞–≤–ª—è–µ–º SPA fallback –¢–û–õ–¨–ö–û –¥–ª—è –Ω–µ-API –º–∞—Ä—à—Ä—É—Ç–æ–≤
  app.use('*', (req: any, res: any) => {
    // –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ API —Ä–æ—É—Ç—ã
    if (req.originalUrl.startsWith('/api/')) {
      logger.debug('[SPA Fallback] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API –∑–∞–ø—Ä–æ—Å:', req.originalUrl);
      return res.status(404).json({ success: false, error: 'API endpoint not found' });
    }
    
    const indexPath = path.join(__dirname, '../dist/public/index.html');
    
    if (fs.existsSync(indexPath)) {
      logger.debug('[SPA Fallback] –û—Ç–¥–∞–µ–º index.html –¥–ª—è SPA –º–∞—Ä—à—Ä—É—Ç–∞:', req.originalUrl);
      return res.sendFile(indexPath);
    }
    
    // Fallback –µ—Å–ª–∏ dist –Ω–µ –Ω–∞–π–¥–µ–Ω
    logger.debug('[SPA Fallback] dist/index.html –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404');
    res.status(404).send('Page not found');
  });

  // –í Replit –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
  const port = parseInt(process.env.PORT || "3000", 10);
  logger.info(`[Server] Starting on port ${port} in ${process.env.NODE_ENV || 'development'} mode`);

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  server.listen(port, "0.0.0.0", () => {
    logger.info(`[Server] üöÄ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    
    // –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –≤–µ–±—Ö—É–∫
    if (process.env.TELEGRAM_BOT_TOKEN) {
      logger.info('[Server] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞...');
      const webhookUrl = `https://${process.env.REPLIT_DEV_DOMAIN || 'localhost:3000'}/api/telegram/webhook`;
      setupTelegramHook(webhookUrl).catch(error => {
        logger.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram –≤–µ–±—Ö—É–∫–∞:', error);
        logger.info('[Server] –ù–∞—Å—Ç—Ä–æ–π–∫—É Telegram –±–æ—Ç–∞ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /api/telegram/setup');
      });
    } else {
      logger.warn('[Server] TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    initBackgroundServices();
  });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
 */
function initBackgroundServices(): void {
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—è–∂–µ–ª—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  setTimeout(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
    try {
      const { initDbAutoRecovery } = require('./utils/db-auto-recovery');
      initDbAutoRecovery({
        initialBackoff: 5000,         // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        maxBackoff: 300000,           // –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        backoffFactor: 1.5,           // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ 1.5 —Ä–∞–∑–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –Ω–µ—É–¥–∞—á–µ
        resetThreshold: 600000,       // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ—É–¥–∞—á –ø–æ—Å–ª–µ 10 –º–∏–Ω—É—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        maxConsecutiveFailures: 5     // –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—É–¥–∞—á
      });
      logger.info('[Server] ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      logger.error('[Server] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:', 
        error instanceof Error ? error.message : String(error));
    }

    // –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    startBackgroundTasks();

    // –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å cron-–∑–∞–¥–∞—á –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      import('./scripts/cron_scheduler.js')
        .then(module => {
          module.setupCronJobs();
          logger.info('[Server] Cron-–∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        })
        .catch(error => {
          logger.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ cron-–∑–∞–¥–∞—á:', error);
        });
    } catch (error) {
      logger.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è cron-–∑–∞–¥–∞—á:', error);
    }

    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π
    try {
      if (process.env.SKIP_PARTITION_CREATION !== 'true') {
        logger.info('[Server] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π...');
        schedulePartitionCreation();
        logger.info('[Server] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Ç–∏—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } else {
        logger.info('[Server] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Ç–∏—Ü–∏–π –ø—Ä–æ–ø—É—â–µ–Ω (SKIP_PARTITION_CREATION=true)');
      }
    } catch (error) {
      logger.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π:', error);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
    try {
      migrateRefCodes()
        .then((result) => {
          logger.info(`[Server] –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.total} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${result.updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
        })
        .catch((error) => {
          logger.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤:', error);
        });
    } catch (error) {
      logger.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤:', error);
    }
  }, 5000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer().catch(error => {
  logger.error('[Server] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  logger.info('[Server] –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
});

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
setInterval(() => {
  logger.debug('[Server] Heartbeat check - server is still running');
}, 1000 * 60 * 5); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç