/**
 * –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç Telegram –¥–ª—è UniFarm
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ @unifarm_admin_bot
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã
 */

import fetch from 'node-fetch';
import { db } from './db';
import { users, transactions, missions } from '../shared/schema';
import { eq, desc, and, gte, lte } from 'drizzle-orm';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
const ADMIN_BOT_TOKEN = '7662298323:AAFLgX05fWtgNYJfT_VeZ_kRZhIBixoseIY';
const AUTHORIZED_ADMINS = ['DimaOsadchuk', 'a888bnd']; // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

// API URL
const API_BASE_URL = process.env.NODE_ENV === 'production' 
  ? 'https://api.unifarm.app' 
  : 'https://uni-farm-connect-x-lukyanenkolawfa.replit.app';

// –¢–∏–ø—ã –¥–ª—è Telegram API
interface TelegramUser {
  id: number;
  first_name?: string;
  username?: string;
}

interface TelegramChat {
  id: number;
  type: string;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: TelegramChat;
  date: number;
  text?: string;
}

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message?: TelegramMessage;
  chat_instance: string;
  data?: string;
}

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
interface ConversationState {
  [chatId: number]: {
    stage: string;
    data: any;
    expiresAt: number;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const conversationState: ConversationState = {};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 * @param username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @returns –ò–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
function isAuthorizedAdmin(username?: string): boolean {
  if (!username) return false;
  return AUTHORIZED_ADMINS.includes(username);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param chatId - ID —á–∞—Ç–∞
 * @param text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function sendMessage(chatId: number, text: string, options: Record<string, any> = {}): Promise<any> {
  if (!ADMIN_BOT_TOKEN) {
    console.error('[AdminBot] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      })
    });

    const data: any = await response.json();
    if (!data.ok) {
      console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', data.description);
    }
    return data;
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ callback_query
 * @param callbackQueryId - ID callback query
 * @param text - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param showAlert - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫ alert
 */
async function answerCallbackQuery(callbackQueryId: string, text?: string, showAlert: boolean = false): Promise<any> {
  if (!ADMIN_BOT_TOKEN) {
    console.error('[AdminBot] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text,
        show_alert: showAlert
      })
    });

    const data: any = await response.json();
    if (!data.ok) {
      console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:', data.description);
    }
    return data;
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:', error);
  }
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param chatId - ID —á–∞—Ç–∞
 * @param messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param text - –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
 * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 */
async function editMessageText(chatId: number, messageId: number, text: string, options: Record<string, any> = {}): Promise<any> {
  if (!ADMIN_BOT_TOKEN) {
    console.error('[AdminBot] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/editMessageText`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
        text,
        parse_mode: 'HTML',
        ...options
      })
    });

    const data: any = await response.json();
    if (!data.ok) {
      console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', data.description);
    }
    return data;
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
 * @param url - URL –¥–ª—è webhook
 */
export async function setAdminBotWebhook(url: string): Promise<boolean> {
  if (!ADMIN_BOT_TOKEN) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞: ADMIN_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return false;
  }

  try {
    const webhookUrl = `${url}/api/admin/bot-webhook`;
    console.log(`[AdminBot] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: ${webhookUrl}`);

    const response = await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url: webhookUrl })
    });

    const data = await response.json();
    if (data.ok) {
      console.log(`[AdminBot] Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
      return true;
    } else {
      console.error(`[AdminBot] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${data.description}`);
      return false;
    }
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:', error);
    return false;
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ReplyMarkup –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω-–±–æ—Ç–∞
 */
function getMainMenuKeyboard(): any {
  return {
    keyboard: [
      [{ text: "üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥" }, { text: "‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤" }],
      [{ text: "üìù –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è" }, { text: "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞" }],
      [{ text: "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ" }, { text: "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ñ –¥—ñ—ó" }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
 * @param chatId - ID —á–∞—Ç–∞
 * @param username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function sendWelcomeMessage(chatId: number, username: string): Promise<void> {
  const welcomeMessage = `
<b>üëã –í—ñ—Ç–∞—é, ${username}!</b>

–í–∏ —É–≤—ñ–π—à–ª–∏ –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ <b>UniFarm</b>.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ—é.

<i>* –í—Å—ñ –¥—ñ—ó –ª–æ–≥—É—é—Ç—å—Å—è –¥–ª—è –±–µ–∑–ø–µ–∫–∏ —Å–∏—Å—Ç–µ–º–∏</i>
  `;

  await sendMessage(chatId, welcomeMessage, {
    reply_markup: JSON.stringify(getMainMenuKeyboard())
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞
 * @param chatId - ID —á–∞—Ç–∞
 */
async function sendAccessDeniedMessage(chatId: number): Promise<void> {
  const message = `
‚õîÔ∏è <b>–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</b>

–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä UniFarm.
  `;

  await sendMessage(chatId, message);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleStartCommand(message: TelegramMessage): Promise<void> {
  const chatId = message.chat.id;
  const username = message.from.username;

  console.log(`[AdminBot] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username || message.from.id}`);

  if (isAuthorizedAdmin(username)) {
    await sendWelcomeMessage(chatId, username || '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä');
  } else {
    await sendAccessDeniedMessage(chatId);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
 * @returns –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
 */
async function getWithdrawRequests(): Promise<any[]> {
  try {
    // –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API
    const pendingWithdraws = await db
      .select()
      .from(transactions)
      .where(
        and(
          eq(transactions.type, 'withdraw'),
          eq(transactions.status, 'pending')
        )
      )
      .orderBy(desc(transactions.created_at))
      .limit(20);

    return pendingWithdraws;
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:', error);
    return [];
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª "–ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥"
 * @param chatId - ID —á–∞—Ç–∞
 */
async function handleWithdrawRequests(chatId: number): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
    const withdrawRequests = await getWithdrawRequests();

    if (withdrawRequests.length === 0) {
      await sendMessage(chatId, `
<b>üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥</b>

–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
      `);
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–∞—Ö
    await sendMessage(chatId, `
<b>üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥</b>

–ó–Ω–∞–π–¥–µ–Ω–æ ${withdrawRequests.length} –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É:
    `);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    for (const request of withdrawRequests) {
      const userId = request.user_id;
      const amount = Math.abs(parseFloat(request.amount)).toFixed(6);
      const currency = request.currency;
      const createdAt = new Date(request.created_at).toLocaleString();
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const [user] = await db.select().from(users).where(eq(users.id, userId));
      const username = user ? (user.username || `ID: ${user.id}`) : `ID: ${userId}`;

      await sendMessage(chatId, `
<b>–ó–∞—è–≤–∫–∞ #${request.id}</b>
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${username}
–°—É–º–∞: ${amount} ${currency}
–î–∞—Ç–∞: ${createdAt}
–°—Ç–∞—Ç—É—Å: <b>–æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</b>
      `, {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [
              { text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data: `confirm_withdraw:${request.id}` },
              { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: `reject_withdraw:${request.id}` }
            ],
            [
              { text: "üë§ –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data: `user_details:${userId}` }
            ]
          ]
        })
      });
    }
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:', error);
    await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤—ñ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
 * @param withdrawId - ID –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function confirmWithdrawRequest(withdrawId: number): Promise<boolean> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API, –∞ –Ω–µ –ø—Ä—è–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ë–î
    await db
      .update(transactions)
      .set({
        status: 'confirmed',
        updated_at: new Date()
      })
      .where(
        and(
          eq(transactions.id, withdrawId),
          eq(transactions.type, 'withdraw'),
          eq(transactions.status, 'pending')
        )
      );
    
    return true;
  } catch (error) {
    console.error(`[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #${withdrawId}:`, error);
    return false;
  }
}

/**
 * –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
 * @param withdrawId - ID –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function rejectWithdrawRequest(withdrawId: number): Promise<boolean> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API, –∞ –Ω–µ –ø—Ä—è–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ë–î
    await db
      .update(transactions)
      .set({
        status: 'rejected',
        updated_at: new Date()
      })
      .where(
        and(
          eq(transactions.id, withdrawId),
          eq(transactions.type, 'withdraw'),
          eq(transactions.status, 'pending')
        )
      );
    
    return true;
  } catch (error) {
    console.error(`[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #${withdrawId}:`, error);
    return false;
  }
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–¥–∞—á–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
 * @param chatId - ID —á–∞—Ç–∞
 */
async function startDepositProcess(chatId: number): Promise<void> {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  conversationState[chatId] = {
    stage: 'deposit_enter_user_id',
    data: {},
    expiresAt: Date.now() + 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  };

  await sendMessage(chatId, `
<b>‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—É</b>

–î–ª—è –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏:
1. ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
2. –¢–∏–ø —Ç–æ–∫–µ–Ω—É (TON / UNI)
3. –°—É–º—É

<i>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</i>
  `, {
    reply_markup: JSON.stringify({
      keyboard: [
        [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    })
  });
}

/**
 * –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–¥–∞—á–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
 * @param chatId - ID —á–∞—Ç–∞
 * @param messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function continueDepositProcess(chatId: number, messageText: string): Promise<void> {
  const state = conversationState[chatId];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å
  if (messageText === "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏") {
    delete conversationState[chatId];
    await sendMessage(chatId, "‚ùå –ü—Ä–æ—Ü–µ—Å –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", {
      reply_markup: JSON.stringify(getMainMenuKeyboard())
    });
    return;
  }

  switch (state.stage) {
    case 'deposit_enter_user_id':
      const userId = parseInt(messageText.trim());
      if (isNaN(userId) || userId <= 0) {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const [user] = await db.select().from(users).where(eq(users.id, userId));
      if (!user) {
        await sendMessage(chatId, `‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${userId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`);
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      state.data.userId = userId;
      state.data.username = user.username || `ID: ${userId}`;
      state.stage = 'deposit_select_token';

      await sendMessage(chatId, `
<b>‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—É</b>
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${state.data.username}

–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–∫–µ–Ω—É:
      `, {
        reply_markup: JSON.stringify({
          keyboard: [
            [{ text: "TON" }, { text: "UNI" }],
            [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        })
      });
      break;

    case 'deposit_select_token':
      const token = messageText.trim().toUpperCase();
      if (token !== 'TON' && token !== 'UNI') {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø —Ç–æ–∫–µ–Ω—É. –í–∏–±–µ—Ä—ñ—Ç—å TON –∞–±–æ UNI.");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      state.data.token = token;
      state.stage = 'deposit_enter_amount';

      await sendMessage(chatId, `
<b>‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—É</b>
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${state.data.username}
–¢–æ–∫–µ–Ω: ${token}

–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–¥–∞—á—ñ:
      `);
      break;

    case 'deposit_enter_amount':
      const amount = parseFloat(messageText.trim().replace(',', '.'));
      if (isNaN(amount) || amount <= 0) {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ.");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      state.data.amount = amount;
      state.stage = 'deposit_confirm';

      await sendMessage(chatId, `
<b>‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—É</b>
–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–µ—Ç–∞–ª—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${state.data.username}
–¢–æ–∫–µ–Ω: ${state.data.token}
–°—É–º–∞: ${state.data.amount}

–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:
      `, {
        reply_markup: JSON.stringify({
          keyboard: [
            [{ text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏" }],
            [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        })
      });
      break;

    case 'deposit_confirm':
      if (messageText.trim() !== "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏") {
        delete conversationState[chatId];
        await sendMessage(chatId, "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
        return;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã–¥–∞—á–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
      const result = await processManualDeposit(
        state.data.userId,
        state.data.token,
        state.data.amount
      );

      if (result.success) {
        await sendMessage(chatId, `
‚úÖ <b>–î–µ–ø–æ–∑–∏—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ</b>

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${state.data.username}
–¢–æ–∫–µ–Ω: ${state.data.token}
–°—É–º–∞: ${state.data.amount}
ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${result.transactionId}
        `, {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
      } else {
        await sendMessage(chatId, `
‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É</b>

${result.error}

–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é –ø—ñ–∑–Ω—ñ—à–µ.
        `, {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      delete conversationState[chatId];
      break;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–¥–∞—á—É –¥–µ–ø–æ–∑–∏—Ç–∞
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param token - –¢–∏–ø —Ç–æ–∫–µ–Ω–∞ (TON/UNI)
 * @param amount - –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function processManualDeposit(userId: number, token: string, amount: number): Promise<any> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API, –∞ –Ω–µ –ø—Ä—è–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ë–î
    const [user] = await db.select().from(users).where(eq(users.id, userId));
    
    if (!user) {
      return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –±–∞–ª–∞–Ω—Å–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å
    const balanceField = token === 'TON' ? 'balance_ton' : 'balance_uni';
    const currentBalance = parseFloat(user[balanceField] || '0');
    const newBalance = currentBalance + amount;

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db
      .update(users)
      .set({
        [balanceField]: newBalance.toString()
      })
      .where(eq(users.id, userId));

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const [transaction] = await db
      .insert(transactions)
      .values({
        user_id: userId,
        type: 'admin_deposit',
        currency: token,
        amount: amount.toString(),
        status: 'confirmed',
        source: 'Admin Bot',
        category: 'manual_deposit',
        description: `–†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`
      })
      .returning();

    return { 
      success: true, 
      transactionId: transaction.id,
      newBalance: newBalance
    };
  } catch (error) {
    console.error(`[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏' };
  }
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
 * @param chatId - ID —á–∞—Ç–∞
 */
async function startCreateMissionProcess(chatId: number): Promise<void> {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  conversationState[chatId] = {
    stage: 'mission_enter_name',
    data: {},
    expiresAt: Date.now() + 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  };

  await sendMessage(chatId, `
<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è</b>

–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏:
1. –ù–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è
2. –û–ø–∏—Å
3. –í–∏–Ω–∞–≥–æ—Ä–æ–¥—É (–≤ UNI)
4. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

<i>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è:</i>
  `, {
    reply_markup: JSON.stringify({
      keyboard: [
        [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    })
  });
}

/**
 * –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
 * @param chatId - ID —á–∞—Ç–∞
 * @param messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function continueMissionProcess(chatId: number, messageText: string): Promise<void> {
  const state = conversationState[chatId];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å
  if (messageText === "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏") {
    delete conversationState[chatId];
    await sendMessage(chatId, "‚ùå –ü—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", {
      reply_markup: JSON.stringify(getMainMenuKeyboard())
    });
    return;
  }

  switch (state.stage) {
    case 'mission_enter_name':
      if (!messageText.trim()) {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      state.data.name = messageText.trim();
      state.stage = 'mission_enter_description';

      await sendMessage(chatId, `
<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è</b>
–ù–∞–∑–≤–∞: ${state.data.name}

–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è:
      `);
      break;

    case 'mission_enter_description':
      if (!messageText.trim()) {
        await sendMessage(chatId, "‚ö†Ô∏è –û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      state.data.description = messageText.trim();
      state.stage = 'mission_enter_reward';

      await sendMessage(chatId, `
<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è</b>
–ù–∞–∑–≤–∞: ${state.data.name}
–û–ø–∏—Å: ${state.data.description}

–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –≤ UNI:
      `);
      break;

    case 'mission_enter_reward':
      const reward = parseFloat(messageText.trim().replace(',', '.'));
      if (isNaN(reward) || reward <= 0) {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ.");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      state.data.reward = reward;
      state.stage = 'mission_enter_link';

      await sendMessage(chatId, `
<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è</b>
–ù–∞–∑–≤–∞: ${state.data.name}
–û–ø–∏—Å: ${state.data.description}
–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${state.data.reward} UNI

–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:
      `);
      break;

    case 'mission_enter_link':
      const link = messageText.trim();
      if (!link || (!link.startsWith('http://') && !link.startsWith('https://'))) {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ http:// –∞–±–æ https://.");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
      state.data.link = link;
      state.stage = 'mission_confirm';

      await sendMessage(chatId, `
<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è</b>
–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–µ—Ç–∞–ª—ñ:

–ù–∞–∑–≤–∞: ${state.data.name}
–û–ø–∏—Å: ${state.data.description}
–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${state.data.reward} UNI
–ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${state.data.link}

–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:
      `, {
        reply_markup: JSON.stringify({
          keyboard: [
            [{ text: "‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è" }],
            [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        })
      });
      break;

    case 'mission_confirm':
      if (messageText.trim() !== "‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è") {
        delete conversationState[chatId];
        await sendMessage(chatId, "‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
      const result = await createMission(
        state.data.name,
        state.data.description,
        state.data.reward,
        state.data.link
      );

      if (result.success) {
        await sendMessage(chatId, `
‚úÖ <b>–ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ</b>

–ù–∞–∑–≤–∞: ${state.data.name}
–û–ø–∏—Å: ${state.data.description}
–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${state.data.reward} UNI
–ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${state.data.link}
ID –∑–∞–≤–¥–∞–Ω–Ω—è: ${result.missionId}
        `, {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
      } else {
        await sendMessage(chatId, `
‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è</b>

${result.error}

–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é –ø—ñ–∑–Ω—ñ—à–µ.
        `, {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      delete conversationState[chatId];
      break;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
 * @param name - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
 * @param description - –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
 * @param reward - –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
 * @param link - –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function createMission(name: string, description: string, reward: number, link: string): Promise<any> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API, –∞ –Ω–µ –ø—Ä—è–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ë–î
    const [mission] = await db
      .insert(missions)
      .values({
        title: name,
        description: description,
        reward: reward.toString(),
        link: link,
        is_active: true,
        created_at: new Date()
      })
      .returning();

    return { 
      success: true, 
      missionId: mission.id
    };
  } catch (error) {
    console.error(`[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è "${name}":`, error);
    return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è' };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
 * @returns –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
async function getPlatformStats(): Promise<any> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API, –∞ –Ω–µ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [userCount] = await db
      .select({ count: db.fn.count().as('count') })
      .from(users);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ñ–∞—Ä–º–∏–Ω–≥–∞
    const [farmingTotal] = await db
      .select({
        total: db.sql`SUM(CAST(uni_farming_deposit AS DECIMAL))`.as('total')
      })
      .from(users);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const lastWeek = new Date();
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    const [recentTransactions] = await db
      .select({ count: db.fn.count().as('count') })
      .from(transactions)
      .where(gte(transactions.created_at, lastWeek));
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤
    const [bonusTotal] = await db
      .select({
        total: db.sql`SUM(CAST(amount AS DECIMAL))`.as('total')
      })
      .from(transactions)
      .where(eq(transactions.type, 'bonus'));
    
    return {
      userCount: parseInt(userCount.count) || 0,
      farmingTotal: parseFloat(farmingTotal.total) || 0,
      recentTransactions: parseInt(recentTransactions.count) || 0,
      bonusTotal: parseFloat(bonusTotal.total) || 0
    };
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    return null;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
 * @param chatId - ID —á–∞—Ç–∞
 */
async function showPlatformStats(chatId: number): Promise<void> {
  try {
    const stats = await getPlatformStats();
    
    if (!stats) {
      await sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
      return;
    }
    
    await sendMessage(chatId, `
<b>üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏</b>

üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b> ${stats.userCount}
üí∞ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Ñ–∞—Ä–º—ñ–Ω–≥:</b> ${stats.farmingTotal.toFixed(2)} UNI
üîÑ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (7 –¥–Ω—ñ–≤):</b> ${stats.recentTransactions}
üéÅ <b>–í–∏–¥–∞–Ω–æ –±–æ–Ω—É—Å—ñ–≤:</b> ${stats.bonusTotal.toFixed(2)} UNI

<i>–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString()}</i>
    `, {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data: "refresh_stats" }]
        ]
      })
    });
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param chatId - ID —á–∞—Ç–∞
 */
async function showRecentUsers(chatId: number): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const recentUsers = await db
      .select()
      .from(users)
      .orderBy(desc(users.created_at))
      .limit(10);
    
    if (recentUsers.length === 0) {
      await sendMessage(chatId, "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }
    
    let message = `<b>üë• –û—Å—Ç–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n\n`;
    
    for (const user of recentUsers) {
      const createdDate = new Date(user.created_at).toLocaleDateString();
      message += `ID: <code>${user.id}</code> - ${user.username || '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}\n`;
      message += `Telegram: ${user.telegram_id || '–ù–µ –ø—Ä–∏–≤\'—è–∑–∞–Ω–∏–π'}\n`;
      message += `–î–∞—Ç–∞: ${createdDate}\n\n`;
    }
    
    await sendMessage(chatId, message, {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "üîç –ü–æ—à—É–∫ –∑–∞ ID", callback_data: "search_user" }],
          [{ text: "üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data: "refresh_users" }]
        ]
      })
    });
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param chatId - ID —á–∞—Ç–∞
 */
async function startUserSearch(chatId: number): Promise<void> {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  conversationState[chatId] = {
    stage: 'search_user_enter_id',
    data: {},
    expiresAt: Date.now() + 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  };

  await sendMessage(chatId, `
<b>üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>

–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
  `, {
    reply_markup: JSON.stringify({
      keyboard: [
        [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    })
  });
}

/**
 * –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param chatId - ID —á–∞—Ç–∞
 * @param messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function continueUserSearch(chatId: number, messageText: string): Promise<void> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å
  if (messageText === "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏") {
    delete conversationState[chatId];
    await sendMessage(chatId, "‚ùå –ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", {
      reply_markup: JSON.stringify(getMainMenuKeyboard())
    });
    return;
  }

  const userId = parseInt(messageText.trim());
  if (isNaN(userId) || userId <= 0) {
    await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const [user] = await db.select().from(users).where(eq(users.id, userId));
    
    if (!user) {
      await sendMessage(chatId, `‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${userId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ.`, {
        reply_markup: JSON.stringify(getMainMenuKeyboard())
      });
      delete conversationState[chatId];
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const recentTransactions = await db
      .select()
      .from(transactions)
      .where(eq(transactions.user_id, userId))
      .orderBy(desc(transactions.created_at))
      .limit(5);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    let message = `
<b>üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>

ID: <code>${user.id}</code>
–Ü–º'—è: ${user.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
Telegram ID: ${user.telegram_id || '–ù–µ –ø—Ä–∏–≤\'—è–∑–∞–Ω–∏–π'}
–†–µ—Ñ. –∫–æ–¥: ${user.ref_code || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
–ó–∞–ø—Ä–æ—à–µ–Ω–∏–π: ${user.parent_ref_code || '–ù–µ–º–∞—î'}
–ë–∞–ª–∞–Ω—Å UNI: ${parseFloat(user.balance_uni || '0').toFixed(2)} UNI
–ë–∞–ª–∞–Ω—Å TON: ${parseFloat(user.balance_ton || '0').toFixed(6)} TON
–î–µ–ø–æ–∑–∏—Ç UNI: ${parseFloat(user.uni_farming_deposit || '0').toFixed(2)} UNI
–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${new Date(user.created_at).toLocaleString()}
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    if (recentTransactions.length > 0) {
      message += `\n<b>–û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:</b>\n`;
      
      for (const tx of recentTransactions) {
        const date = new Date(tx.created_at).toLocaleString();
        const amount = parseFloat(tx.amount).toFixed(tx.currency === 'TON' ? 6 : 2);
        message += `${date} - ${tx.type}: ${amount} ${tx.currency} (${tx.status})\n`;
      }
    }
    
    await sendMessage(chatId, message, {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            { text: "‚ûï –í–∏–¥–∞—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç", callback_data: `manual_deposit:${userId}` },
            { text: "üìä –í—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data: `user_transactions:${userId}` }
          ]
        ]
      })
    });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    delete conversationState[chatId];
  } catch (error) {
    console.error(`[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", {
      reply_markup: JSON.stringify(getMainMenuKeyboard())
    });
    delete conversationState[chatId];
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
 * @param chatId - ID —á–∞—Ç–∞
 */
async function showSystemActions(chatId: number): Promise<void> {
  await sendMessage(chatId, `
<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ñ –¥—ñ—ó</b>

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:
  `, {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ–∞—Ä–º—ñ–Ω–≥—É", callback_data: "restart_farming" }],
        [{ text: "üîÉ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—ñ–≤", callback_data: "sync_balances" }],
        [{ text: "üì¢ –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞", callback_data: "start_broadcast" }]
      ]
    })
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function handleAdminBotMessage(message: TelegramMessage): Promise<void> {
  if (!message.text) return;

  const chatId = message.chat.id;
  const username = message.from.username;
  const text = message.text;

  console.log(`[AdminBot] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username || message.from.id}: ${text}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –∫—Ä–æ–º–µ /start
  if (text !== '/start' && !isAuthorizedAdmin(username)) {
    await sendAccessDeniedMessage(chatId);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
  if (conversationState[chatId] && conversationState[chatId].expiresAt > Date.now()) {
    if (conversationState[chatId].stage.startsWith('deposit_')) {
      await continueDepositProcess(chatId, text);
      return;
    } else if (conversationState[chatId].stage.startsWith('mission_')) {
      await continueMissionProcess(chatId, text);
      return;
    } else if (conversationState[chatId].stage.startsWith('search_user_')) {
      await continueUserSearch(chatId, text);
      return;
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  switch (text) {
    case '/start':
      await handleStartCommand(message);
      break;

    case "üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥":
      await handleWithdrawRequests(chatId);
      break;

    case "‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤":
      await startDepositProcess(chatId);
      break;

    case "üìù –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è":
      await startCreateMissionProcess(chatId);
      break;

    case "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞":
      await showPlatformStats(chatId);
      break;

    case "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
      await showRecentUsers(chatId);
      break;

    case "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ñ –¥—ñ—ó":
      await showSystemActions(chatId);
      break;

    default:
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π.", {
        reply_markup: JSON.stringify(getMainMenuKeyboard())
      });
      break;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback_query –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
 * @param callbackQuery - –û–±—ä–µ–∫—Ç callback_query –æ—Ç Telegram
 */
export async function handleAdminBotCallbackQuery(callbackQuery: TelegramCallbackQuery): Promise<void> {
  if (!callbackQuery.data || !callbackQuery.message) {
    console.error('[AdminBot] –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π callback_query –±–µ–∑ data –∏–ª–∏ message');
    return;
  }

  const data = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const username = callbackQuery.from.username;

  console.log(`[AdminBot] –ü–æ–ª—É—á–µ–Ω callback_query: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username || callbackQuery.from.id}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (!isAuthorizedAdmin(username)) {
    await answerCallbackQuery(callbackQuery.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.", true);
    return;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã callback_data
  if (data.startsWith('confirm_withdraw:')) {
    const withdrawId = parseInt(data.split(':')[1]);
    await answerCallbackQuery(callbackQuery.id, "–û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏...");
    
    const success = await confirmWithdrawRequest(withdrawId);
    
    if (success) {
      await editMessageText(chatId, messageId, `
‚úÖ <b>–ó–∞—è–≤–∫–∞ #${withdrawId} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞</b>

–í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.
      `);
    } else {
      await answerCallbackQuery(callbackQuery.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", true);
    }
  } else if (data.startsWith('reject_withdraw:')) {
    const withdrawId = parseInt(data.split(':')[1]);
    await answerCallbackQuery(callbackQuery.id, "–û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏...");
    
    const success = await rejectWithdrawRequest(withdrawId);
    
    if (success) {
      await editMessageText(chatId, messageId, `
‚ùå <b>–ó–∞—è–≤–∫–∞ #${withdrawId} –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞</b>

–í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.
      `);
    } else {
      await answerCallbackQuery(callbackQuery.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", true);
    }
  } else if (data === 'refresh_stats') {
    await answerCallbackQuery(callbackQuery.id, "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏...");
    await showPlatformStats(chatId);
  } else if (data === 'refresh_users') {
    await answerCallbackQuery(callbackQuery.id, "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...");
    await showRecentUsers(chatId);
  } else if (data === 'search_user') {
    await answerCallbackQuery(callbackQuery.id, "–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—à—É–∫—É...");
    await startUserSearch(chatId);
  } else if (data.startsWith('user_details:')) {
    const userId = parseInt(data.split(':')[1]);
    await answerCallbackQuery(callbackQuery.id, "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó...");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conversationState[chatId] = {
      stage: 'search_user_enter_id',
      data: {},
      expiresAt: Date.now() + 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    };
    
    // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞, –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª ID
    await continueUserSearch(chatId, userId.toString());
  } else if (data.startsWith('manual_deposit:')) {
    const userId = parseInt(data.split(':')[1]);
    await answerCallbackQuery(callbackQuery.id, "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É...");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤–∏–¥–∞—á–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conversationState[chatId] = {
      stage: 'deposit_enter_user_id',
      data: {},
      expiresAt: Date.now() + 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    };
    
    // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª ID
    await continueDepositProcess(chatId, userId.toString());
  } else if (data === 'restart_farming') {
    await answerCallbackQuery(callbackQuery.id, "–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞...", true);
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞
      await sendMessage(chatId, `
üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ–∞—Ä–º—ñ–Ω–≥—É</b>

–ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ñ–∞—Ä–º—ñ–Ω–≥—É.
–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.
      `);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
      setTimeout(async () => {
        await sendMessage(chatId, `
‚úÖ <b>–§–∞—Ä–º—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ</b>

–ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.
–í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –¥–µ–ø–æ–∑–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.
      `);
      }, 3000);
    } catch (error) {
      console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞:', error);
      await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ñ–∞—Ä–º—ñ–Ω–≥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  } else if (data === 'sync_balances') {
    await answerCallbackQuery(callbackQuery.id, "–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤...", true);
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤
      await sendMessage(chatId, `
üîÉ <b>–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—ñ–≤</b>

–ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—ñ–≤.
–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.
      `);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
      setTimeout(async () => {
        await sendMessage(chatId, `
‚úÖ <b>–ë–∞–ª–∞–Ω—Å–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ</b>

–ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.
–í—Å—ñ –±–∞–ª–∞–Ω—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ.
      `);
      }, 3000);
    } catch (error) {
      console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  } else if (data === 'start_broadcast') {
    await answerCallbackQuery(callbackQuery.id, "–í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–æ—Ä–º–∏ —Ä–æ–∑—Å–∏–ª–∫–∏...");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    conversationState[chatId] = {
      stage: 'broadcast_enter_message',
      data: {},
      expiresAt: Date.now() + 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    };
    
    await sendMessage(chatId, `
üì¢ <b>–ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞</b>

–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:
(–ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è)
    `, {
      reply_markup: JSON.stringify({
        keyboard: [
          [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      })
    });
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhooks –æ—Ç Telegram
 * @param update - –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
 */
export async function processAdminBotUpdate(update: TelegramUpdate): Promise<void> {
  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message) {
      await handleAdminBotMessage(update.message);
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_query –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    else if (update.callback_query) {
      await handleAdminBotCallbackQuery(update.callback_query);
    }
  } catch (error) {
    console.error('[AdminBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Telegram API –∑–∞–ø—Ä–æ—Å–∞:', error);
  }
}

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
setInterval(() => {
  const now = Date.now();
  for (const chatId in conversationState) {
    if (conversationState[chatId].expiresAt < now) {
      delete conversationState[chatId];
    }
  }
}, 5 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç