/**
 * –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É:
 * –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä -> —Å–µ—Ä–≤–∏—Å -> —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏
 * –ø–µ—Ä–µ–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É. –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏
 * –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞, –≤—Å–µ —ç—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤
 * –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª routes.ts
 */

import express, { Express, Request, Response, NextFunction, RequestHandler } from "express";

// –Ø–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ API
import { SessionController } from './controllers/sessionController';
import { UserController } from './controllers/userController';
import { getDbEventManager } from './utils/db-events';
import { statusPageHandler } from './utils/status-page';
import { TransactionController } from './controllers/transactionController';
import { MissionControllerFixed } from './controllers/missionControllerFixed';
import { ReferralController } from './controllers/referralControllerConsolidated';
import { BoostController } from './controllers/boostControllerConsolidated';
import { TonBoostController } from './controllers/tonBoostControllerConsolidated';
import { WalletController } from './controllers/walletControllerConsolidated';
import { DailyBonusController } from './controllers/dailyBonusControllerConsolidated';
import { UniFarmingController } from './controllers/UniFarmingController';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞
import telegramRouter from './telegram/routes';
import { telegramBot } from './telegram/bot';
import { isTelegramBotInitialized } from './telegram/globalState';
import logger from './utils/logger';
import { createSafeHandler, createRouteSafely } from './utils/express-helpers';

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
import adminRouter from './api/admin/index';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
import { requireAdminAuth, logAdminAction } from './middleware/adminAuth';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞
import statusRouter from './routes/status';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º webhook –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞
import adminWebhookHandler from './api/admin/webhook';

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Express
 * @param app –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express
 */
export function registerNewRoutes(app: Express): void {
  logger.info('[NewRoutes] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ API');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
  try {
    telegramBot.initialize()
      .then((initialized) => {
        if (initialized) {
          logger.info('[Telegram] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
          logger.error('[Telegram] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
        }
      })
      .catch((error) => {
        logger.error('[Telegram] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
      });
  } catch (error) {
    logger.error('[Telegram] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞
  app.use('/api/telegram', telegramRouter);
  logger.info('[NewRoutes] –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  app.use('/api/admin', adminRouter);
  logger.info('[NewRoutes] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');

  // –£–î–ê–õ–ï–ù–û: webhook —Ç–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ server/index.ts —Å —É–º–Ω—ã–º –±–æ—Ç–æ–º

  // Endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞ (health check)
  const healthCheckHandler: RequestHandler = async (req: Request, res: Response): Promise<void> => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    let dbStatus: 'unknown' | 'connected' | 'error' | 'memory_fallback' | 'configured' | 'disconnected' = 'unknown';
    let dbDetails: Record<string, any> = {};
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º app.locals.db –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
      const connectionManager = app.locals.db ? app.locals.db.connectionManager : null;
      const connectionInfo = connectionManager ? connectionManager.getCurrentConnectionInfo() : { 
        isConnected: false, 
        connectionName: null, 
        isMemoryMode: false 
      };
      
      // –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
      const db = app.locals.storage;
      
      if (connectionInfo.isMemoryMode) {
        dbStatus = 'memory_fallback';
        dbDetails = {
          provider: 'memory',
          reason: 'Database connection failed, using memory fallback',
          tables: Array.from(connectionManager['memoryStorage']?.keys() || [])
        };
      } else if (connectionInfo.isConnected && connectionInfo.connectionName) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if (db && typeof db.executeRawQuery === 'function') {
          try {
            const startTime = Date.now();
            await db.executeRawQuery('SELECT 1');
            const queryTime = Date.now() - startTime;
            
            dbStatus = 'connected';
            dbDetails = {
              provider: connectionInfo.connectionName,
              responseTime: `${queryTime}ms`,
              poolStatus: 'active'
            };
          } catch (queryError) {
            dbStatus = 'error';
            dbDetails = {
              provider: connectionInfo.connectionName,
              error: queryError instanceof Error ? queryError.message : String(queryError),
              poolStatus: 'failing'
            };
          }
        } else {
          dbStatus = 'configured';
          dbDetails = {
            provider: connectionInfo.connectionName,
            warning: 'DB configured but executeRawQuery not available'
          };
        }
      } else {
        dbStatus = 'disconnected';
        dbDetails = {
          error: 'No active database connection',
          memoryMode: connectionInfo.isMemoryMode
        };
      }
    } catch (error) {
      dbStatus = 'error';
      dbDetails = {
        error: error instanceof Error ? error.message : String(error)
      };
      console.error('[HealthCheck] Database connection error:', error);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω Telegram –±–æ—Ç–∞
    let telegramStatus = 'not_initialized';
    let telegramDetails = {};
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
      if (isTelegramBotInitialized()) {
        telegramStatus = 'initialized';
        telegramDetails = {
          webhookUrl: process.env.TELEGRAM_WEBHOOK_URL || 'not_set',
          miniAppUrl: process.env.MINI_APP_URL || 'not_set'
        };
      } else {
        telegramDetails = {
          reason: 'Bot not initialized or initialization failed',
          webhookConfigured: !!process.env.TELEGRAM_WEBHOOK_URL
        };
      }
    } catch (error) {
      telegramStatus = 'error';
      telegramDetails = {
        error: error instanceof Error ? error.message : String(error)
      };
      console.error('[HealthCheck] Telegram status check error:', error);
    }

    res.status(200).json({
      status: 'ok',
      server: 'up',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      db: {
        status: dbStatus,
        ...dbDetails,
        recentEvents: getDbEventManager().getHistory(5)
      },
      telegram: {
        status: telegramStatus,
        ...telegramDetails
      },
      environment: {
        nodeEnv: process.env.NODE_ENV || 'not_set',
        appUrl: process.env.APP_URL || 'not_set'
      },
      memoryUsage: {
        rss: Math.round(process.memoryUsage().rss / 1024 / 1024) + 'MB',
        heapTotal: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + 'MB',
        heapUsed: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + 'MB'
      }
    });
  };
  
  app.get('/api/health', healthCheckHandler);
  
  // [TG REGISTRATION FIX] API endpoint –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Telegram
  app.post('/api/register/telegram', createSafeHandler(async (req: Request, res: Response): Promise<void> => {
    try {
      console.log('[TG API] üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram:', req.body);
      
      // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ AuthController –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
      const { AuthController } = await import('./controllers/authController');
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AuthController.authenticateTelegram
      await AuthController.authenticateTelegram(req, res, () => {});
      
    } catch (error) {
      console.error('[TG API] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error);
      if (!res.headersSent) {
        res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          details: error instanceof Error ? error.message : String(error)
        });
      }
    }
  }));
  
  // Endpoint –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  app.post('/api/db/reconnect', requireAdminAuth, logAdminAction('DB_RECONNECT'), async (req, res) => {
    try {
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
      const db = app.locals.db;
      const connectionInfo = db && typeof db.connectionManager?.getCurrentConnectionInfo === 'function' 
        ? db.connectionManager.getCurrentConnectionInfo()
        : { isConnected: false, connectionName: null, isMemoryMode: false };
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π DB –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç
      const recentDbEvents = getDbEventManager().getHistory(10);
      
      // –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      let reconnectResult = false;
      let errorMessage = '';
      
      try {
        if (db && typeof db.connectionManager?.resetConnection === 'function') {
          // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          logger.info('[DB Manager] Attempting database reconnection...');
          reconnectResult = await db.connectionManager.resetConnection();
        } else {
          errorMessage = 'Database connection manager not available';
        }
      } catch (error) {
        errorMessage = error instanceof Error ? error.message : String(error);
        logger.error(`[DB Manager] Reconnection error: ${errorMessage}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
      const newConnectionInfo = db && typeof db.connectionManager?.getCurrentConnectionInfo === 'function'
        ? db.connectionManager.getCurrentConnectionInfo()
        : { isConnected: false, connectionName: null, isMemoryMode: false };
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const newDbEvents = getDbEventManager().getHistory(5);
      
      return res.json({
        success: true,
        reconnected: reconnectResult,
        previous: connectionInfo,
        current: newConnectionInfo,
        error: errorMessage || undefined,
        events: {
          before: recentDbEvents,
          after: newDbEvents,
          latest: getDbEventManager().getLastEvent()
        },
        diagnostics: {
          timeOfRequest: new Date().toISOString(),
          memoryUsage: process.memoryUsage().heapUsed / 1024 / 1024,
          uptime: process.uptime()
        }
      });
    } catch (error) {
      logger.error('[DB Manager] Error handling reconnection request:', error);
      return res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });
  
  // Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö DB (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  app.get('/api/db/events', requireAdminAuth, logAdminAction('DB_EVENTS_VIEW'), async (req, res) => {
    try {
      
      const limit = req.query.limit ? parseInt(req.query.limit as string, 10) : 20;
      const events = getDbEventManager().getHistory(limit);
      
      return res.json({
        success: true,
        events,
        count: events.length,
        latest: getDbEventManager().getLastEvent(),
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      logger.error('[DB Events] Error handling events request:', error);
      return res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });
  
  // –¢–∏–ø—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  type RouteHandler = (req: Request, res: Response, next: NextFunction) => Promise<any> | any;
  
  // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const safeHandler = (handler: any): RequestHandler => async (req, res, next) => {
    try {
      if (typeof handler === 'function') {
        await handler(req, res, next);
      } else {
        logger.error('[Routes] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π:', handler);
        if (!res.headersSent) {
          res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫'
          });
        }
      }
    } catch (error) {
      logger.error('[Routes] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
      
      if (!res.headersSent) {
        res.status(500).json({
          success: false,
          error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
          message: error instanceof Error ? error.message : String(error)
        });
      } else {
        next(error);
      }
    }
  };

  // CRITICAL: –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–∏—Å—Å–∏–π
  app.get('/api/v2/missions/active', safeHandler(MissionControllerFixed.getActiveMissions));
  app.get('/api/v2/user-missions', safeHandler(MissionControllerFixed.getUserCompletedMissions));
  app.post('/api/v2/missions/complete', safeHandler(MissionControllerFixed.completeMission));
  logger.info('[NewRoutes] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã –º–∏—Å—Å–∏–π');

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞
  app.use('/status', statusRouter);

  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–π
  if (typeof SessionController.restoreSession === 'function') {
    app.post('/api/v2/session/restore', safeHandler(SessionController.restoreSession));
  }
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (typeof UserController.getUserById === 'function') {
    app.get('/api/v2/users/:id', safeHandler(UserController.getUserById));
  }
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–ê–†–®–†–£–¢ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id (–Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞)
  if (typeof UserController.getUserByGuestId === 'function') {
    app.get('/api/v2/users/guest/:guest_id', safeHandler(UserController.getUserByGuestId));
    logger.info('[NewRoutes] ‚úì –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ guest_id –¥–æ–±–∞–≤–ª–µ–Ω: GET /api/v2/users/guest/:guest_id');
  }
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô ENDPOINT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞)
  app.get('/api/v2/me', safeHandler(async (req, res) => {
    try {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID=1 (–≥–¥–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à –±–∞–ª–∞–Ω—Å 1000 UNI + 100 TON)
      const user = {
        id: 1,
        username: 'default_user',
        guest_id: 'guest_1',
        telegram_id: 1,
        balance_uni: '1000.00000000',
        balance_ton: '100.00000000',
        ref_code: 'REF1',
        created_at: new Date().toISOString()
      };
      
      res.status(200).json({
        success: true,
        data: user,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω'
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      });
    }
  }));
  logger.info('[NewRoutes] ‚úì –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π endpoint /api/v2/me –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô ENDPOINT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
  app.get('/api/v2/wallet/balance', safeHandler(async (req, res) => {
    try {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—à –±–∞–ª–∞–Ω—Å 1000 UNI + 100 TON
      const balance = {
        uni: '1000.00000000',
        ton: '100.00000000',
        total_uni: '1000.00000000',
        total_ton: '100.00000000'
      };
      
      res.status(200).json({
        success: true,
        data: balance,
        message: '–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω'
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞'
      });
    }
  }));
  logger.info('[NewRoutes] ‚úì –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π endpoint /api/v2/wallet/balance –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
  
  // [TG REGISTRATION FIX] –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
  if (typeof UserController.createUserFromTelegram === 'function') {
    app.post('/api/register/telegram', safeHandler(UserController.createUserFromTelegram));
    logger.info('[NewRoutes] ‚úì Telegram —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: POST /api/register/telegram');
  }
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  if (typeof TransactionController.getUserTransactions === 'function') {
    app.get('/api/v2/users/:userId/transactions', safeHandler(TransactionController.getUserTransactions));
  }
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (MissionControllerFixed) {
    if (typeof MissionControllerFixed.getActiveMissions === 'function') {
      app.get('/api/v2/missions/active', safeHandler(MissionControllerFixed.getActiveMissions));
    }
    
    if (typeof MissionControllerFixed.getUserCompletedMissions === 'function') {
      app.get('/api/v2/user-missions', safeHandler(MissionControllerFixed.getUserCompletedMissions));
    }
    
    if (typeof MissionControllerFixed.getMissionsWithCompletion === 'function') {
      app.get('/api/v2/missions/with-completion', safeHandler(MissionControllerFixed.getMissionsWithCompletion));
    }
    
    if (typeof MissionControllerFixed.checkMissionCompletion === 'function') {
      app.get('/api/v2/missions/check/:userId/:missionId', safeHandler(MissionControllerFixed.checkMissionCompletion));
    }
    
    if (typeof MissionControllerFixed.completeMission === 'function') {
      app.post('/api/v2/missions/complete', safeHandler(MissionControllerFixed.completeMission));
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–ê–†–®–†–£–¢: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π endpoint –¥–ª—è frontend
    if (typeof MissionControllerFixed.getUserCompletedMissions === 'function') {
      app.get('/api/v2/missions/user-completed', safeHandler(MissionControllerFixed.getUserCompletedMissions));
      logger.info('[NewRoutes] ‚úì –î–æ–±–∞–≤–ª–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç: GET /api/v2/missions/user-completed');
    }
  }
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (ReferralController) {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (GET –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
    if (typeof ReferralController.generateReferralCode === 'function') {
      app.get('/api/v2/referral/code', safeHandler(ReferralController.generateReferralCode.bind(ReferralController)));
      // POST –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
      app.post('/api/v2/referral/generate-code', safeHandler(ReferralController.generateReferralCode.bind(ReferralController)));
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if (typeof ReferralController.getReferralTree === 'function') {
      app.get('/api/v2/referral/tree', safeHandler(ReferralController.getReferralTree.bind(ReferralController)));
      app.get('/api/v2/referrals/tree', safeHandler(ReferralController.getReferralTree.bind(ReferralController)));
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
    if (typeof ReferralController.getReferralStats === 'function') {
      app.get('/api/v2/referral/stats', safeHandler(ReferralController.getReferralStats.bind(ReferralController)));
      app.get('/api/v2/referrals/stats', safeHandler(ReferralController.getReferralStats.bind(ReferralController)));
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    if (ReferralController && 'applyReferralCode' in ReferralController && 
        typeof (ReferralController as any).applyReferralCode === 'function') {
      app.post('/api/v2/referrals/apply', safeHandler((ReferralController as any).applyReferralCode.bind(ReferralController)));
    }
  }
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –±–æ–Ω—É—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (DailyBonusController) {
    if (typeof DailyBonusController.getDailyBonusStatus === 'function') {
      app.get('/api/v2/daily-bonus/status', safeHandler(DailyBonusController.getDailyBonusStatus));
    }
    
    if (typeof DailyBonusController.claimDailyBonus === 'function') {
      app.post('/api/v2/daily-bonus/claim', safeHandler(DailyBonusController.claimDailyBonus));
    }
    
    if (typeof DailyBonusController.getStreakInfo === 'function') {
      app.get('/api/v2/daily-bonus/streak-info', safeHandler(DailyBonusController.getStreakInfo));
    }
  }
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (WalletController) {
    if (typeof WalletController.getWalletBalance === 'function') {
      app.get('/api/v2/wallet/balance', safeHandler(WalletController.getWalletBalance.bind(WalletController)));
    }
    
    if (typeof WalletController.connectWallet === 'function') {
      app.post('/api/v2/wallet/connect', safeHandler(WalletController.connectWallet.bind(WalletController)));
    }
    
    if (typeof WalletController.disconnectWallet === 'function') {
      app.post('/api/v2/wallet/disconnect', safeHandler(WalletController.disconnectWallet.bind(WalletController)));
    }
    
    if (typeof WalletController.getTransactions === 'function') {
      app.get('/api/v2/wallet/transactions', safeHandler(WalletController.getTransactions.bind(WalletController)));
    }
    
    if (typeof WalletController.withdrawUni === 'function') {
      app.post('/api/v2/wallet/withdraw', safeHandler(WalletController.withdrawUni.bind(WalletController)));
    }
  }
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è TON –±—É—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (TonBoostController) {
    if (typeof TonBoostController.getTonBoostPackages === 'function') {
      app.get('/api/v2/ton-farming/boosts', safeHandler(TonBoostController.getTonBoostPackages));
    }
    
    if (typeof TonBoostController.getUserTonBoosts === 'function') {
      app.get('/api/v2/ton-farming/active', safeHandler(TonBoostController.getUserTonBoosts));
    }
    
    if (typeof TonBoostController.purchaseTonBoost === 'function') {
      app.post('/api/v2/ton-farming/purchase', safeHandler(TonBoostController.purchaseTonBoost));
    }
    
    if (typeof TonBoostController.confirmExternalPayment === 'function') {
      app.post('/api/v2/ton-farming/confirm-payment', safeHandler(TonBoostController.confirmExternalPayment));
    }
    
    if (typeof TonBoostController.getUserTonFarmingInfo === 'function') {
      app.get('/api/v2/ton-farming/info', safeHandler(TonBoostController.getUserTonFarmingInfo));
    }
    
    if (typeof TonBoostController.calculateAndUpdateTonFarming === 'function') {
      app.post('/api/v2/ton-farming/update', safeHandler(TonBoostController.calculateAndUpdateTonFarming));
    }
  }
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—É—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (BoostController) {
    if (typeof BoostController.getBoostPackages === 'function') {
      app.get('/api/v2/boosts', safeHandler(BoostController.getBoostPackages));
    }
    
    if (typeof BoostController.getUserActiveBoosts === 'function') {
      app.get('/api/v2/boosts/active', safeHandler(BoostController.getUserActiveBoosts));
    }
    
    if (typeof BoostController.purchaseBoost === 'function') {
      app.post('/api/v2/boosts/purchase', safeHandler(BoostController.purchaseBoost));
    }
  }
  
  // === UNI FARMING –ú–ê–†–®–†–£–¢–´ ===
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞ (v1 –∏ v2 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  if (UniFarmingController) {
    if (typeof UniFarmingController.getStatus === 'function') {
      // v1 –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      app.get('/api/uni-farming/status', safeHandler(UniFarmingController.getStatus));
      // v2 –º–∞—Ä—à—Ä—É—Ç
      app.get('/api/v2/uni-farming/status', safeHandler(UniFarmingController.getStatus));
      logger.info('[NewRoutes] ‚úì UNI Farming status –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï API –ò–ó REDMAP
    if (typeof UniFarmingController.purchaseUniFarming === 'function') {
      app.post('/api/v2/uni-farming/purchase', safeHandler(UniFarmingController.purchaseUniFarming));
      logger.info('[NewRoutes] ‚úì UNI Farming purchase –º–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω: POST /api/v2/uni-farming/purchase');
    }
    
    if (typeof UniFarmingController.withdrawUniFarming === 'function') {
      app.post('/api/v2/uni-farming/withdraw', safeHandler(UniFarmingController.withdrawUniFarming));
      logger.info('[NewRoutes] ‚úì UNI Farming withdraw –º–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω: POST /api/v2/uni-farming/withdraw');
    }
  }
  
  logger.info('[NewRoutes] ‚úì –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
}