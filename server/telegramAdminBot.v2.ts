/**
 * –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –±–æ—Ç Telegram –¥–ª—è UniFarm
 * 
 * –†–µ–∞–ª—ñ–∑—É—î –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ @unifarm_admin_bot
 * –ó–∞–±–µ–∑–ø–µ—á—É—î –¥–æ—Å—Ç—É–ø –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —Å–∏—Å—Ç–µ–º–∏
 */

import fetch from 'node-fetch';
import { db } from './db';
import { users, transactions, missions, InsertMission } from '../shared/schema';
import { eq, desc, and, gte, lte } from 'drizzle-orm';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
const ADMIN_BOT_TOKEN = process.env.TELEGRAM_ADMIN_BOT_TOKEN;
const AUTHORIZED_ADMINS = ['DimaOsadchuk', 'a888bnd']; // –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤

// API URL
const API_BASE_URL = process.env.NODE_ENV === 'production' 
  ? 'https://api.unifarm.app' 
  : 'https://uni-farm-connect-x-lukyanenkolawfa.replit.app';

// –¢–∏–ø–∏ –¥–ª—è Telegram API
interface TelegramUser {
  id: number;
  first_name?: string;
  username?: string;
}

interface TelegramChat {
  id: number;
  type: string;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: TelegramChat;
  date: number;
  text?: string;
}

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message?: TelegramMessage;
  chat_instance: string;
  data?: string;
}

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

// –°—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –±–∞–≥–∞—Ç–æ–µ—Ç–∞–ø–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤
interface ConversationState {
  [chatId: number]: {
    stage: string;
    data: any;
    expiresAt: number;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
const conversationState: ConversationState = {};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 * @param username - –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
 * @returns –ß–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
function isAuthorizedAdmin(username?: string): boolean {
  if (!username) return false;
  return AUTHORIZED_ADMINS.includes(username);
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
 * @param chatId - ID —á–∞—Ç—É
 * @param text - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
async function sendMessage(chatId: number, text: string, options: Record<string, any> = {}): Promise<any> {
  if (!ADMIN_BOT_TOKEN) {
    console.error('[AdminBot] –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      })
    });

    const data = await response.json();
    if (!data || !data.ok) {
      console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data?.description || 'Unknown error');
    }
    return data;
  } catch (error) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram:', error);
  }
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback_query
 * @param callbackQueryId - ID callback query
 * @param text - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param showAlert - –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —è–∫ alert
 */
async function answerCallbackQuery(callbackQueryId: string, text?: string, showAlert: boolean = false): Promise<any> {
  if (!ADMIN_BOT_TOKEN) {
    console.error('[AdminBot] –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback_query: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text,
        show_alert: showAlert
      })
    });

    const data = await response.json();
    if (!data || !data.ok) {
      console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback_query:', data?.description || 'Unknown error');
    }
    return data;
  } catch (error) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback_query:', error);
  }
}

/**
 * –†–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param chatId - ID —á–∞—Ç—É
 * @param messageId - ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param text - –ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç
 * @param options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
 */
async function editMessageText(chatId: number, messageId: number, text: string, options: Record<string, any> = {}): Promise<any> {
  if (!ADMIN_BOT_TOKEN) {
    console.error('[AdminBot] –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/editMessageText`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
        text,
        parse_mode: 'HTML',
        ...options
      })
    });

    const data = await response.json();
    if (!data || !data.ok) {
      console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data?.description || 'Unknown error');
    }
    return data;
  } catch (error) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
  }
}

/**
 * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î webhook –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram
 * @param url - URL –¥–ª—è webhook
 */
export async function setAdminBotWebhook(url: string): Promise<boolean> {
  if (!ADMIN_BOT_TOKEN) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞: ADMIN_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π');
    return false;
  }

  try {
    const webhookUrl = `${url}/api/admin/bot-webhook`;
    console.log(`[AdminBot] –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook: ${webhookUrl}`);

    const response = await fetch(`https://api.telegram.org/bot${ADMIN_BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url: webhookUrl })
    });

    const data = await response.json();
    if (data && data.ok) {
      console.log(`[AdminBot] Webhook —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: ${webhookUrl}`);
      return true;
    } else {
      console.error(`[AdminBot] –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: ${data?.description || 'Unknown error'}`);
      return false;
    }
  } catch (error) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ webhook:', error);
    return false;
  }
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —É —Ñ–æ—Ä–º–∞—Ç—ñ ReplyMarkup –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω-–±–æ—Ç–∞
 */
function getMainMenuKeyboard(): any {
  return {
    keyboard: [
      [{ text: "üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥" }, { text: "‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤" }],
      [{ text: "üìù –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è" }, { text: "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞" }],
      [{ text: "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ" }, { text: "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ñ –¥—ñ—ó" }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–∏–º –º–µ–Ω—é
 * @param chatId - ID —á–∞—Ç—É
 * @param username - –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
async function sendWelcomeMessage(chatId: number, username: string): Promise<void> {
  const welcomeMessage = `
<b>üëã –í—ñ—Ç–∞—é, ${username}!</b>

–í–∏ —É–≤—ñ–π—à–ª–∏ –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ <b>UniFarm</b>.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ—é.

<i>* –í—Å—ñ –¥—ñ—ó –ª–æ–≥—É—é—Ç—å—Å—è –¥–ª—è –±–µ–∑–ø–µ–∫–∏ —Å–∏—Å—Ç–µ–º–∏</i>
  `;

  await sendMessage(chatId, welcomeMessage, {
    reply_markup: JSON.stringify(getMainMenuKeyboard())
  });
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–±–æ—Ä–æ–Ω—É –¥–æ—Å—Ç—É–ø—É
 * @param chatId - ID —á–∞—Ç—É
 */
async function sendAccessDeniedMessage(chatId: number): Promise<void> {
  const message = `
‚õîÔ∏è <b>–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</b>

–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä UniFarm.
  `;

  await sendMessage(chatId, message);
}

/**
 * –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
async function handleStartCommand(message: TelegramMessage): Promise<void> {
  const chatId = message.chat.id;
  const username = message.from.username;

  console.log(`[AdminBot] –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${username || message.from.id}`);

  if (isAuthorizedAdmin(username)) {
    await sendWelcomeMessage(chatId, username || '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä');
  } else {
    await sendAccessDeniedMessage(chatId);
  }
}

/**
 * –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤
 * @returns –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
 */
async function getWithdrawRequests(): Promise<any[]> {
  try {
    // –¢—É—Ç –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç –¥–æ –ë–î, –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ API
    const pendingWithdraws = await db
      .select()
      .from(transactions)
      .where(
        and(
          eq(transactions.type, 'withdraw'),
          eq(transactions.status, 'pending')
        )
      )
      .orderBy(desc(transactions.created_at))
      .limit(20);

    return pendingWithdraws;
  } catch (error) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:', error);
    return [];
  }
}

/**
 * –û–±—Ä–æ–±–ª—è—î —Ä–æ–∑–¥—ñ–ª "–ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥"
 * @param chatId - ID —á–∞—Ç—É
 */
async function handleWithdrawRequests(chatId: number): Promise<void> {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
    const withdrawRequests = await getWithdrawRequests();

    if (withdrawRequests.length === 0) {
      await sendMessage(chatId, `
<b>üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥</b>

–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
      `);
      return;
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞—è–≤–∫–∏
    await sendMessage(chatId, `
<b>üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥</b>

–ó–Ω–∞–π–¥–µ–Ω–æ ${withdrawRequests.length} –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É:
    `);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–Ω—É –∑–∞—è–≤–∫—É –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
    for (const request of withdrawRequests) {
      const userId = request.user_id;
      const amount = Math.abs(parseFloat(request.amount)).toFixed(6);
      const currency = request.currency;
      const createdAt = new Date(request.created_at || new Date()).toLocaleString();
      
      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const [user] = await db.select().from(users).where(eq(users.id, userId));
      const username = user ? (user.username || `ID: ${user.id}`) : `ID: ${userId}`;

      await sendMessage(chatId, `
<b>–ó–∞—è–≤–∫–∞ #${request.id}</b>
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${username}
–°—É–º–∞: ${amount} ${currency}
–î–∞—Ç–∞: ${createdAt}
–°—Ç–∞—Ç—É—Å: <b>–æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</b>
      `, {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [
              { text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data: `confirm_withdraw:${request.id}` },
              { text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data: `reject_withdraw:${request.id}` }
            ],
            [
              { text: "üë§ –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data: `user_details:${userId}` }
            ]
          ]
        })
      });
    }
  } catch (error) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:', error);
    await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤—ñ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

/**
 * –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∑–∞—è–≤–∫—É –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤
 * @param withdrawId - ID –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
 */
async function confirmWithdrawRequest(withdrawId: number): Promise<boolean> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫ API, –∞ –Ω–µ –ø—Ä—è–º–∞ –∑–º—ñ–Ω–∞ –ë–î
    await db
      .update(transactions)
      .set({
        status: 'confirmed'
      })
      .where(
        and(
          eq(transactions.id, withdrawId),
          eq(transactions.type, 'withdraw'),
          eq(transactions.status, 'pending')
        )
      );
    
    return true;
  } catch (error) {
    console.error(`[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ #${withdrawId}:`, error);
    return false;
  }
}

/**
 * –í—ñ–¥—Ö–∏–ª—è—î –∑–∞—è–≤–∫—É –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤
 * @param withdrawId - ID –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
 */
async function rejectWithdrawRequest(withdrawId: number): Promise<boolean> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫ API, –∞ –Ω–µ –ø—Ä—è–º–∞ –∑–º—ñ–Ω–∞ –ë–î
    await db
      .update(transactions)
      .set({
        status: 'rejected'
      })
      .where(
        and(
          eq(transactions.id, withdrawId),
          eq(transactions.type, 'withdraw'),
          eq(transactions.status, 'pending')
        )
      );
    
    return true;
  } catch (error) {
    console.error(`[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ #${withdrawId}:`, error);
    return false;
  }
}

/**
 * –ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É
 * @param chatId - ID —á–∞—Ç—É
 */
async function startDepositProcess(chatId: number): Promise<void> {
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
  conversationState[chatId] = {
    stage: 'deposit_enter_user_id',
    data: {},
    expiresAt: Date.now() + 15 * 60 * 1000 // 15 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  };

  await sendMessage(chatId, `
<b>‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—É</b>

–î–ª—è –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏:
1. ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
2. –¢–∏–ø —Ç–æ–∫–µ–Ω—É (TON / UNI)
3. –°—É–º—É

<i>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</i>
  `, {
    reply_markup: JSON.stringify({
      keyboard: [
        [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    })
  });
}

/**
 * –ü—Ä–æ–¥–æ–≤–∂—É—î –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É
 * @param chatId - ID —á–∞—Ç—É
 * @param messageText - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
async function continueDepositProcess(chatId: number, messageText: string): Promise<void> {
  const state = conversationState[chatId];
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —Å–∫–∞—Å—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Ü–µ—Å
  if (messageText === "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏") {
    delete conversationState[chatId];
    await sendMessage(chatId, "‚ùå –ü—Ä–æ—Ü–µ—Å –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", {
      reply_markup: JSON.stringify(getMainMenuKeyboard())
    });
    return;
  }

  switch (state.stage) {
    case 'deposit_enter_user_id':
      const userId = parseInt(messageText.trim());
      if (isNaN(userId) || userId <= 0) {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
        return;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const [user] = await db.select().from(users).where(eq(users.id, userId));
      if (!user) {
        await sendMessage(chatId, `‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${userId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`);
        return;
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
      state.data.userId = userId;
      state.data.username = user.username || `ID: ${userId}`;
      state.stage = 'deposit_select_token';

      await sendMessage(chatId, `
<b>‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—É</b>
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${state.data.username}

–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–∫–µ–Ω—É:
      `, {
        reply_markup: JSON.stringify({
          keyboard: [
            [{ text: "TON" }, { text: "UNI" }],
            [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        })
      });
      break;

    case 'deposit_select_token':
      const token = messageText.trim().toUpperCase();
      if (token !== 'TON' && token !== 'UNI') {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø —Ç–æ–∫–µ–Ω—É. –í–∏–±–µ—Ä—ñ—Ç—å TON –∞–±–æ UNI.");
        return;
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
      state.data.token = token;
      state.stage = 'deposit_enter_amount';

      await sendMessage(chatId, `
<b>‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—É</b>
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${state.data.username}
–¢–æ–∫–µ–Ω: ${token}

–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–¥–∞—á—ñ:
      `);
      break;

    case 'deposit_enter_amount':
      const amount = parseFloat(messageText.trim().replace(',', '.'));
      if (isNaN(amount) || amount <= 0) {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ.");
        return;
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—É–º—É —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      state.data.amount = amount;
      state.stage = 'deposit_confirm';

      await sendMessage(chatId, `
<b>‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—É</b>
–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–µ—Ç–∞–ª—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${state.data.username}
–¢–æ–∫–µ–Ω: ${state.data.token}
–°—É–º–∞: ${state.data.amount}

–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:
      `, {
        reply_markup: JSON.stringify({
          keyboard: [
            [{ text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏" }],
            [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        })
      });
      break;

    case 'deposit_confirm':
      if (messageText.trim() !== "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏") {
        delete conversationState[chatId];
        await sendMessage(chatId, "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
        return;
      }

      // –í–∏–∫–æ–Ω—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É
      const result = await processManualDeposit(
        state.data.userId,
        state.data.token,
        state.data.amount
      );

      if (result.success) {
        await sendMessage(chatId, `
‚úÖ <b>–î–µ–ø–æ–∑–∏—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ</b>

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${state.data.username}
–¢–æ–∫–µ–Ω: ${state.data.token}
–°—É–º–∞: ${state.data.amount}
ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${result.transactionId}
        `, {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
      } else {
        await sendMessage(chatId, `
‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É</b>

${result.error}

–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é –ø—ñ–∑–Ω—ñ—à–µ.
        `, {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
      }

      // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
      delete conversationState[chatId];
      break;
  }
}

/**
 * –û–±—Ä–æ–±–ª—è—î –≤–∏–¥–∞—á—É –¥–µ–ø–æ–∑–∏—Ç—É
 * @param userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param token - –¢–∏–ø —Ç–æ–∫–µ–Ω–∞ (TON/UNI)
 * @param amount - –°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—É
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
 */
async function processManualDeposit(userId: number, token: string, amount: number): Promise<any> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫ API, –∞ –Ω–µ –ø—Ä—è–º–∞ –∑–º—ñ–Ω–∞ –ë–î
    const [user] = await db.select().from(users).where(eq(users.id, userId));
    
    if (!user) {
      return { success: false, error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' };
    }

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–µ –ø–æ–ª–µ –±–∞–ª–∞–Ω—Å—É –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏
    const balanceField = token === 'TON' ? 'balance_ton' : 'balance_uni';
    const currentBalance = parseFloat(user[balanceField] || '0');
    const newBalance = currentBalance + amount;

    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await db
      .update(users)
      .set({
        [balanceField]: newBalance.toString()
      })
      .where(eq(users.id, userId));

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
    const [transaction] = await db
      .insert(transactions)
      .values({
        user_id: userId,
        type: 'admin_deposit',
        currency: token,
        amount: amount.toString(),
        status: 'confirmed',
        source: 'Admin Bot',
        category: 'manual_deposit',
        description: `–†—É—á–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞`
      })
      .returning();

    return { 
      success: true, 
      transactionId: transaction.id,
      newBalance: newBalance
    };
  } catch (error) {
    console.error(`[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${userId}:`, error);
    return { success: false, error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó' };
  }
}

/**
 * –ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
 * @param chatId - ID —á–∞—Ç—É
 */
async function startCreateMissionProcess(chatId: number): Promise<void> {
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
  conversationState[chatId] = {
    stage: 'mission_enter_name',
    data: {},
    expiresAt: Date.now() + 15 * 60 * 1000 // 15 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  };

  await sendMessage(chatId, `
<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è</b>

–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏:
1. –ù–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è
2. –û–ø–∏—Å
3. –í–∏–Ω–∞–≥–æ—Ä–æ–¥—É (–≤ UNI)
4. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

<i>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è:</i>
  `, {
    reply_markup: JSON.stringify({
      keyboard: [
        [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    })
  });
}

/**
 * –ü—Ä–æ–¥–æ–≤–∂—É—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
 * @param chatId - ID —á–∞—Ç—É
 * @param messageText - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
async function continueMissionProcess(chatId: number, messageText: string): Promise<void> {
  const state = conversationState[chatId];
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —Å–∫–∞—Å—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Ü–µ—Å
  if (messageText === "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏") {
    delete conversationState[chatId];
    await sendMessage(chatId, "‚ùå –ü—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", {
      reply_markup: JSON.stringify(getMainMenuKeyboard())
    });
    return;
  }

  switch (state.stage) {
    case 'mission_enter_name':
      if (!messageText.trim()) {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        return;
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
      state.data.name = messageText.trim();
      state.stage = 'mission_enter_description';

      await sendMessage(chatId, `
<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è</b>
–ù–∞–∑–≤–∞: ${state.data.name}

–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è:
      `);
      break;

    case 'mission_enter_description':
      if (!messageText.trim()) {
        await sendMessage(chatId, "‚ö†Ô∏è –û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        return;
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø–∏—Å —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
      state.data.description = messageText.trim();
      state.stage = 'mission_enter_reward';

      await sendMessage(chatId, `
<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è</b>
–ù–∞–∑–≤–∞: ${state.data.name}
–û–ø–∏—Å: ${state.data.description}

–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –≤ UNI:
      `);
      break;

    case 'mission_enter_reward':
      const reward = parseFloat(messageText.trim().replace(',', '.'));
      if (isNaN(reward) || reward <= 0) {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ.");
        return;
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
      state.data.reward = reward;
      state.stage = 'mission_enter_link';

      await sendMessage(chatId, `
<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è</b>
–ù–∞–∑–≤–∞: ${state.data.name}
–û–ø–∏—Å: ${state.data.description}
–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${state.data.reward} UNI

–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:
      `);
      break;

    case 'mission_enter_link':
      const link = messageText.trim();
      if (!link || (!link.startsWith('http://') && !link.startsWith('https://'))) {
        await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ http:// –∞–±–æ https://.");
        return;
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      state.data.link = link;
      state.stage = 'mission_confirm';

      await sendMessage(chatId, `
<b>üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è</b>
–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–µ—Ç–∞–ª—ñ:

–ù–∞–∑–≤–∞: ${state.data.name}
–û–ø–∏—Å: ${state.data.description}
–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${state.data.reward} UNI
–ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${state.data.link}

–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:
      `, {
        reply_markup: JSON.stringify({
          keyboard: [
            [{ text: "‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è" }],
            [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        })
      });
      break;

    case 'mission_confirm':
      if (messageText.trim() !== "‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è") {
        delete conversationState[chatId];
        await sendMessage(chatId, "‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
        return;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
      const result = await createMission(
        state.data.name,
        state.data.description,
        state.data.reward,
        state.data.link
      );

      if (result.success) {
        await sendMessage(chatId, `
‚úÖ <b>–ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ</b>

–ù–∞–∑–≤–∞: ${state.data.name}
–û–ø–∏—Å: ${state.data.description}
–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${state.data.reward} UNI
–ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${state.data.link}
ID –∑–∞–≤–¥–∞–Ω–Ω—è: ${result.missionId}
        `, {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
      } else {
        await sendMessage(chatId, `
‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è</b>

${result.error}

–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é –ø—ñ–∑–Ω—ñ—à–µ.
        `, {
          reply_markup: JSON.stringify(getMainMenuKeyboard())
        });
      }

      // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
      delete conversationState[chatId];
      break;
  }
}

/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
 * @param name - –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
 * @param description - –û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è
 * @param reward - –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
 * @param link - –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
 */
async function createMission(name: string, description: string, reward: number, link: string): Promise<any> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫ API, –∞ –Ω–µ –ø—Ä—è–º–∞ –∑–º—ñ–Ω–∞ –ë–î
    // –°–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ—Å—è –≥–æ—Ç–æ–≤–æ—é —Å—Ö–µ–º–æ—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö
    const missionData: InsertMission = {
      type: 'custom',
      title: name,
      description: description,
      reward_uni: reward.toString(),
      is_active: true
    };
    
    const [mission] = await db
      .insert(missions)
      .values(missionData)
      .returning();

    return { 
      success: true, 
      missionId: mission.id
    };
  } catch (error) {
    console.error(`[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è "${name}":`, error);
    return { success: false, error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è' };
  }
}

/**
 * –û—Ç—Ä–∏–º—É—î –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ
 * @returns –î–∞–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
 */
async function getPlatformStats(): Promise<any> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫ API, –∞ –Ω–µ –ø—Ä—è–º—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ –ë–î
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const userCount = await db
      .select()
      .from(users)
      .then(users => users.length);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É —Ñ–∞—Ä–º—ñ–Ω–≥—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ uni_farming_deposit)
    const farmingTotal = await db
      .select()
      .from(users)
      .then(users => {
        let total = 0;
        for (const user of users) {
          total += parseFloat(user.uni_farming_deposit?.toString() || '0');
        }
        return total;
      });
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
    const lastWeek = new Date();
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    const recentTransactions = await db
      .select()
      .from(transactions)
      .where(gte(transactions.created_at, lastWeek))
      .then(transactions => transactions.length);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –±–æ–Ω—É—Å—ñ–≤
    const bonusTotal = await db
      .select()
      .from(transactions)
      .where(eq(transactions.type, 'bonus'))
      .then(transactions => {
        let total = 0;
        for (const tx of transactions) {
          if (tx.amount) {
            total += parseFloat(tx.amount.toString());
          }
        }
        return total;
      });
    
    return {
      userCount: userCount,
      farmingTotal: farmingTotal,
      recentTransactions: recentTransactions,
      bonusTotal: bonusTotal
    };
  } catch (error) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:', error);
    return null;
  }
}

/**
 * –ü–æ–∫–∞–∑—É—î –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ
 * @param chatId - ID —á–∞—Ç—É
 */
async function showPlatformStats(chatId: number): Promise<void> {
  try {
    const stats = await getPlatformStats();
    
    if (!stats) {
      await sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
      return;
    }
    
    await sendMessage(chatId, `
<b>üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏</b>

üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b> ${stats.userCount}
üí∞ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Ñ–∞—Ä–º—ñ–Ω–≥:</b> ${stats.farmingTotal.toFixed(2)} UNI
üîÑ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (7 –¥–Ω—ñ–≤):</b> ${stats.recentTransactions}
üéÅ <b>–í–∏–¥–∞–Ω–æ –±–æ–Ω—É—Å—ñ–≤:</b> ${stats.bonusTotal.toFixed(2)} UNI

<i>–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString()}</i>
    `, {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data: "refresh_stats" }]
        ]
      })
    });
  } catch (error) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:', error);
    await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * @param chatId - ID —á–∞—Ç—É
 */
async function showRecentUsers(chatId: number): Promise<void> {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const recentUsers = await db
      .select()
      .from(users)
      .orderBy(desc(users.created_at))
      .limit(10);
    
    if (recentUsers.length === 0) {
      await sendMessage(chatId, "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }
    
    let message = `<b>üë• –û—Å—Ç–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n\n`;
    
    for (const user of recentUsers) {
      const createdDate = user.created_at 
        ? new Date(user.created_at).toLocaleDateString() 
        : '–ù–µ–≤—ñ–¥–æ–º–æ';
      message += `ID: <code>${user.id}</code> - ${user.username || '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}\n`;
      message += `Telegram: ${user.telegram_id || '–ù–µ –ø—Ä–∏–≤\'—è–∑–∞–Ω–∏–π'}\n`;
      message += `–î–∞—Ç–∞: ${createdDate}\n\n`;
    }
    
    await sendMessage(chatId, message, {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "üîç –ü–æ—à—É–∫ –∑–∞ ID", callback_data: "search_user" }],
          [{ text: "üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data: "refresh_users" }]
        ]
      })
    });
  } catch (error) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

/**
 * –ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param chatId - ID —á–∞—Ç—É
 */
async function startUserSearch(chatId: number): Promise<void> {
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
  conversationState[chatId] = {
    stage: 'search_user_enter_id',
    data: {},
    expiresAt: Date.now() + 5 * 60 * 1000 // 5 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  };

  await sendMessage(chatId, `
<b>üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>

–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
  `, {
    reply_markup: JSON.stringify({
      keyboard: [
        [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    })
  });
}

/**
 * –ü—Ä–æ–¥–æ–≤–∂—É—î –ø—Ä–æ—Ü–µ—Å –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param chatId - ID —á–∞—Ç—É
 * @param messageText - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
async function continueUserSearch(chatId: number, messageText: string): Promise<void> {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —Å–∫–∞—Å—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Ü–µ—Å
  if (messageText === "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏") {
    delete conversationState[chatId];
    await sendMessage(chatId, "‚ùå –ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", {
      reply_markup: JSON.stringify(getMainMenuKeyboard())
    });
    return;
  }

  const userId = parseInt(messageText.trim());
  if (isNaN(userId) || userId <= 0) {
    await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
    return;
  }

  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const [user] = await db.select().from(users).where(eq(users.id, userId));
    
    if (!user) {
      await sendMessage(chatId, `‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${userId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ.`, {
        reply_markup: JSON.stringify(getMainMenuKeyboard())
      });
      delete conversationState[chatId];
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const recentTransactions = await db
      .select()
      .from(transactions)
      .where(eq(transactions.user_id, userId))
      .orderBy(desc(transactions.created_at))
      .limit(5);
    
    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let message = `
<b>üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>

ID: <code>${user.id}</code>
–Ü–º'—è: ${user.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
Telegram ID: ${user.telegram_id || '–ù–µ –ø—Ä–∏–≤\'—è–∑–∞–Ω–∏–π'}
–†–µ—Ñ. –∫–æ–¥: ${user.ref_code || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
–ó–∞–ø—Ä–æ—à–µ–Ω–∏–π: ${user.parent_ref_code || '–ù–µ–º–∞—î'}
–ë–∞–ª–∞–Ω—Å UNI: ${parseFloat(user.balance_uni?.toString() || '0').toFixed(2)} UNI
–ë–∞–ª–∞–Ω—Å TON: ${parseFloat(user.balance_ton?.toString() || '0').toFixed(6)} TON
–î–µ–ø–æ–∑–∏—Ç UNI: ${parseFloat(user.uni_farming_deposit?.toString() || '0').toFixed(2)} UNI
–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${user.created_at ? new Date(user.created_at).toLocaleString() : '–ù–µ–≤—ñ–¥–æ–º–æ'}
    `;
    
    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    if (recentTransactions.length > 0) {
      message += `\n<b>–û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:</b>\n`;
      
      for (const tx of recentTransactions) {
        const date = tx.created_at ? new Date(tx.created_at).toLocaleString() : '–ù–µ–≤—ñ–¥–æ–º–æ';
        const amount = tx.amount ? parseFloat(tx.amount).toFixed(tx.currency === 'TON' ? 6 : 2) : '0';
        message += `${date} - ${tx.type}: ${amount} ${tx.currency} (${tx.status})\n`;
      }
    }
    
    await sendMessage(chatId, message, {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            { text: "‚ûï –í–∏–¥–∞—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç", callback_data: `manual_deposit:${userId}` },
            { text: "üìä –í—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data: `user_transactions:${userId}` }
          ]
        ]
      })
    });
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
    delete conversationState[chatId];
  } catch (error) {
    console.error(`[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}:`, error);
    await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", {
      reply_markup: JSON.stringify(getMainMenuKeyboard())
    });
    delete conversationState[chatId];
  }
}

/**
 * –ü–æ–∫–∞–∑—É—î —Å–∏—Å—Ç–µ–º–Ω—ñ –¥—ñ—ó
 * @param chatId - ID —á–∞—Ç—É
 */
async function showSystemActions(chatId: number): Promise<void> {
  await sendMessage(chatId, `
<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ñ –¥—ñ—ó</b>

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:
  `, {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ–∞—Ä–º—ñ–Ω–≥—É", callback_data: "restart_farming" }],
        [{ text: "üîÉ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—ñ–≤", callback_data: "sync_balances" }],
        [{ text: "üì¢ –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞", callback_data: "start_broadcast" }]
      ]
    })
  });
}

/**
 * –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export async function handleAdminBotMessage(message: TelegramMessage): Promise<void> {
  if (!message.text) return;

  const chatId = message.chat.id;
  const username = message.from.username;
  const text = message.text;

  console.log(`[AdminBot] –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${username || message.from.id}: ${text}`);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥, –∫—Ä—ñ–º /start
  if (text !== '/start' && !isAuthorizedAdmin(username)) {
    await sendAccessDeniedMessage(chatId);
    return;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –ø—Ä–æ—Ü–µ—Å—ñ –±–∞–≥–∞—Ç–æ–µ—Ç–∞–ø–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É
  if (conversationState[chatId] && conversationState[chatId].expiresAt > Date.now()) {
    if (conversationState[chatId].stage.startsWith('deposit_')) {
      await continueDepositProcess(chatId, text);
      return;
    } else if (conversationState[chatId].stage.startsWith('mission_')) {
      await continueMissionProcess(chatId, text);
      return;
    } else if (conversationState[chatId].stage.startsWith('search_user_')) {
      await continueUserSearch(chatId, text);
      return;
    }
  }

  // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏ —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  switch (text) {
    case '/start':
      await handleStartCommand(message);
      break;

    case "üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥":
      await handleWithdrawRequests(chatId);
      break;

    case "‚ûï –í–∏–¥–∞—á–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤":
      await startDepositProcess(chatId);
      break;

    case "üìù –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è":
      await startCreateMissionProcess(chatId);
      break;

    case "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞":
      await showPlatformStats(chatId);
      break;

    case "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
      await showRecentUsers(chatId);
      break;

    case "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ñ –¥—ñ—ó":
      await showSystemActions(chatId);
      break;

    default:
      // –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
      await sendMessage(chatId, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–π.", {
        reply_markup: JSON.stringify(getMainMenuKeyboard())
      });
      break;
  }
}

/**
 * –û–±—Ä–æ–±–ª—è—î callback_query –≤—ñ–¥ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
 * @param callbackQuery - –û–±'—î–∫—Ç callback_query –≤—ñ–¥ Telegram
 */
export async function handleAdminBotCallbackQuery(callbackQuery: TelegramCallbackQuery): Promise<void> {
  if (!callbackQuery.data || !callbackQuery.message) {
    console.error('[AdminBot] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–ø–æ–≤–Ω–∏–π callback_query –±–µ–∑ data –∞–±–æ message');
    return;
  }

  const data = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const username = callbackQuery.from.username;

  console.log(`[AdminBot] –û—Ç—Ä–∏–º–∞–Ω–æ callback_query: ${data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${username || callbackQuery.from.id}`);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
  if (!isAuthorizedAdmin(username)) {
    await answerCallbackQuery(callbackQuery.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.", true);
    return;
  }

  // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ callback_data
  if (data.startsWith('confirm_withdraw:')) {
    const withdrawId = parseInt(data.split(':')[1]);
    await answerCallbackQuery(callbackQuery.id, "–û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏...");
    
    const success = await confirmWithdrawRequest(withdrawId);
    
    if (success) {
      await editMessageText(chatId, messageId, `
‚úÖ <b>–ó–∞—è–≤–∫–∞ #${withdrawId} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞</b>

–í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.
      `);
    } else {
      await answerCallbackQuery(callbackQuery.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", true);
    }
  } else if (data.startsWith('reject_withdraw:')) {
    const withdrawId = parseInt(data.split(':')[1]);
    await answerCallbackQuery(callbackQuery.id, "–û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏...");
    
    const success = await rejectWithdrawRequest(withdrawId);
    
    if (success) {
      await editMessageText(chatId, messageId, `
‚ùå <b>–ó–∞—è–≤–∫–∞ #${withdrawId} –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞</b>

–í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.
      `);
    } else {
      await answerCallbackQuery(callbackQuery.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", true);
    }
  } else if (data === 'refresh_stats') {
    await answerCallbackQuery(callbackQuery.id, "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏...");
    await showPlatformStats(chatId);
  } else if (data === 'refresh_users') {
    await answerCallbackQuery(callbackQuery.id, "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...");
    await showRecentUsers(chatId);
  } else if (data === 'search_user') {
    await answerCallbackQuery(callbackQuery.id, "–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—à—É–∫—É...");
    await startUserSearch(chatId);
  } else if (data.startsWith('user_details:')) {
    const userId = parseInt(data.split(':')[1]);
    await answerCallbackQuery(callbackQuery.id, "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó...");
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    conversationState[chatId] = {
      stage: 'search_user_enter_id',
      data: {},
      expiresAt: Date.now() + 5 * 60 * 1000 // 5 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    };
    
    // –®—Ç—É—á–Ω–æ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø–æ—à—É–∫—É, –Ω—ñ–±–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ ID
    await continueUserSearch(chatId, userId.toString());
  } else if (data.startsWith('manual_deposit:')) {
    const userId = parseInt(data.split(':')[1]);
    await answerCallbackQuery(callbackQuery.id, "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É...");
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É –≤–∏–¥–∞—á—ñ –¥–µ–ø–æ–∑–∏—Ç—É —ñ –∑–∞–ø–æ–≤–Ω—é—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    conversationState[chatId] = {
      stage: 'deposit_enter_user_id',
      data: {},
      expiresAt: Date.now() + 15 * 60 * 1000 // 15 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    };
    
    // –®—Ç—É—á–Ω–æ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–æ—Ü–µ—Å, –Ω—ñ–±–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ ID
    await continueDepositProcess(chatId, userId.toString());
  } else if (data === 'restart_farming') {
    await answerCallbackQuery(callbackQuery.id, "–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ñ–∞—Ä–º—ñ–Ω–≥—É...", true);
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫ API –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ñ–∞—Ä–º—ñ–Ω–≥—É
      await sendMessage(chatId, `
üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ–∞—Ä–º—ñ–Ω–≥—É</b>

–ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ñ–∞—Ä–º—ñ–Ω–≥—É.
–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.
      `);
      
      // –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ—Ü–µ—Å—É
      setTimeout(async () => {
        await sendMessage(chatId, `
‚úÖ <b>–§–∞—Ä–º—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ</b>

–ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.
–í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –¥–µ–ø–æ–∑–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.
      `);
      }, 3000);
    } catch (error) {
      console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ñ–∞—Ä–º—ñ–Ω–≥—É:', error);
      await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ñ–∞—Ä–º—ñ–Ω–≥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  } else if (data === 'sync_balances') {
    await answerCallbackQuery(callbackQuery.id, "–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—ñ–≤...", true);
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫ API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—ñ–≤
      await sendMessage(chatId, `
üîÉ <b>–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—ñ–≤</b>

–ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—ñ–≤.
–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.
      `);
      
      // –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ—Ü–µ—Å—É
      setTimeout(async () => {
        await sendMessage(chatId, `
‚úÖ <b>–ë–∞–ª–∞–Ω—Å–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ</b>

–ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.
–í—Å—ñ –±–∞–ª–∞–Ω—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ.
      `);
      }, 3000);
    } catch (error) {
      console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—ñ–≤:', error);
      await sendMessage(chatId, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  } else if (data === 'start_broadcast') {
    await answerCallbackQuery(callbackQuery.id, "–í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–æ—Ä–º–∏ —Ä–æ–∑—Å–∏–ª–∫–∏...");
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
    conversationState[chatId] = {
      stage: 'broadcast_enter_message',
      data: {},
      expiresAt: Date.now() + 30 * 60 * 1000 // 30 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    };
    
    await sendMessage(chatId, `
üì¢ <b>–ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞</b>

–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:
(–ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è)
    `, {
      reply_markup: JSON.stringify({
        keyboard: [
          [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏" }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      })
    });
  }
}

/**
 * –û–±—Ä–æ–±–ª—è—î webhook-–∏ –≤—ñ–¥ Telegram
 * @param update - –û–±'—î–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram
 */
export async function processAdminBotUpdate(update: TelegramUpdate): Promise<void> {
  try {
    // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (update.message) {
      await handleAdminBotMessage(update.message);
    }
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ callback_query –≤—ñ–¥ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    else if (update.callback_query) {
      await handleAdminBotCallbackQuery(update.callback_query);
    }
  } catch (error) {
    console.error('[AdminBot] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ Telegram API –∑–∞–ø–∏—Ç—É:', error);
  }
}

// –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å—Ç–∞–Ω—ñ–≤ —Ä–æ–∑–º–æ–≤
setInterval(() => {
  const now = Date.now();
  for (const chatId in conversationState) {
    if (conversationState[chatId].expiresAt < now) {
      delete conversationState[chatId];
    }
  }
}, 5 * 60 * 1000); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω