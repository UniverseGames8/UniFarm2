/**
 * –°–ü–†–û–©–ï–ù–ï –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û PRODUCTION NEON DB
 * –¢—ñ–ª—å–∫–∏ –ø—Ä—è–º–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ ep-lucky-boat-a463bggt
 */

import { Pool, PoolClient } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from '../shared/schema.js';

// PRODUCTION DATABASE CONNECTION STRING
const PRODUCTION_DB_URL = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';

class SimpleProductionDB {
  private static instance: SimpleProductionDB;
  private pool: Pool | null = null;
  private drizzleDb: any = null;

  private constructor() {
    console.log('üéØ [DB] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PRODUCTION –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ep-lucky-boat-a463bggt');
  }

  public static getInstance(): SimpleProductionDB {
    if (!SimpleProductionDB.instance) {
      SimpleProductionDB.instance = new SimpleProductionDB();
    }
    return SimpleProductionDB.instance;
  }

  public async getPool(): Promise<Pool> {
    if (!this.pool) {
      console.log('üöÄ [DB] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PRODUCTION –±–∞–∑–∏...');
      
      this.pool = new Pool({
        connectionString: PRODUCTION_DB_URL,
        ssl: { rejectUnauthorized: false },
        max: 10,
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 10000,
      });

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      try {
        const client = await this.pool.connect();
        const result = await client.query('SELECT current_database(), COUNT(*) as user_count FROM public.users');
        client.release();
        
        const dbName = result.rows[0].current_database;
        const userCount = result.rows[0].user_count;
        
        console.log(`‚úÖ [DB CONNECTED] to ep-lucky-boat-a463bggt`);
        console.log(`‚úÖ [DB] –ë–∞–∑–∞: ${dbName}, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${userCount}`);
      } catch (error: unknown) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        console.error('‚ùå [DB] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', errorMessage);
        throw error;
      }
    }
    
    return this.pool;
  }

  public async getClient(): Promise<PoolClient> {
    const pool = await this.getPool();
    return pool.connect();
  }

  public async getDrizzle() {
    if (!this.drizzleDb) {
      const pool = await this.getPool();
      this.drizzleDb = drizzle(pool, { schema });
    }
    return this.drizzleDb;
  }

  public async execute(query: string, params: any[] = []) {
    const pool = await this.getPool();
    const client = await pool.connect();
    try {
      return await client.query(query, params);
    } finally {
      client.release();
    }
  }

  public async select(query: string, params: any[] = []) {
    const pool = await this.getPool();
    const client = await pool.connect();
    try {
      return await client.query(query, params);
    } finally {
      client.release();
    }
  }

  public async end() {
    if (this.pool) {
      await this.pool.end();
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç —î–¥–∏–Ω–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞
const dbManager = SimpleProductionDB.getInstance();

// –û—Å–Ω–æ–≤–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–∏ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export const getConnectionManager = () => dbManager;

// –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å
let poolInstance: Pool | null = null;
export const getPool = async () => {
  if (!poolInstance) {
    poolInstance = await dbManager.getPool();
  }
  return poolInstance;
};

// –°—Ç–≤–æ—Ä—é—î–º–æ drizzle –µ–∫–∑–µ–º–ø–ª—è—Ä
let dbInstance: any = null;
export const getDb = async () => {
  if (!dbInstance) {
    const pool = await getPool();
    dbInstance = drizzle(pool, { schema });
  }
  return dbInstance;
};

export async function queryWithRetry(text: string, params: any[] = []): Promise<any> {
  const pool = await getPool();
  const client = await pool.connect();
  try {
    return await client.query(text, params);
  } finally {
    client.release();
  }
}

export async function getDbConnection() {
  return getPool();
}

export async function testConnection(): Promise<boolean> {
  try {
    const pool = await getPool();
    const client = await pool.connect();
    await client.query('SELECT 1');
    client.release();
    return true;
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('‚ùå [DB] –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ–≤–¥–∞–ª–∏–π:', errorMessage);
    return false;
  }
}

// –°—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
export function getConnectionStatus() {
  return {
    isConnected: true,
    connectionName: 'production-neon-ep-lucky-boat-a463bggt',
    isMemoryMode: false
  };
}

export const dbType = 'postgres';
export const dbState = {
  isReady: true
};

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ –µ–∫—Å–ø–æ—Ä—Ç–∏ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export const getSingleDbConnection = {
  select: async (query: string, params: any[] = []) => {
    const pool = await getPool();
    const client = await pool.connect();
    try {
      const result = await client.query(query, params);
      return result.rows;
    } finally {
      client.release();
    }
  },
  execute: async (query: string, params: any[] = []) => {
    const pool = await getPool();
    const client = await pool.connect();
    try {
      const result = await client.query(query, params);
      return result.rows;
    } finally {
      client.release();
    }
  }
};

export const getSinglePool = {
  query: async (text: string, params: any[] = []) => {
    const pool = await getPool();
    const client = await pool.connect();
    try {
      const result = await client.query(text, params);
      return result.rows;
    } finally {
      client.release();
    }
  },
  end: async () => {
    const pool = await getPool();
    await pool.end();
  }
};

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ db —Ç–∞ pool –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export const db = {
  execute: async (query: string, params: any[] = []) => {
    const pool = await getPool();
    const client = await pool.connect();
    try {
      const result = await client.query(query, params);
      return result.rows;
    } finally {
      client.release();
    }
  }
};

export const pool = {
  query: async (text: string, params: any[] = []) => {
    const pool = await getPool();
    const client = await pool.connect();
    try {
      const result = await client.query(text, params);
      return result.rows;
    } finally {
      client.release();
    }
  }
};