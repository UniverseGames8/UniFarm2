/**
 * ü§ñ –£–º–Ω—ã–π Telegram –±–æ—Ç UniFarm —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–∞
 * 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è:
 * - –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Ç–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ + –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
 */

import fetch from 'node-fetch';
import logger from '../utils/logger';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const AUTHORIZED_ADMINS = ['a888bnd', 'DimaOsadchuk'];
const MINI_APP_URL = process.env.MINI_APP_URL || process.env.APP_URL || 'https://uni-farm-connect-x-lukyanenkolawfa.replit.app';
const API_BASE_URL = process.env.NODE_ENV === 'production' 
  ? 'https://uni-farm-connect-x-lukyanenkolawfa.replit.app'
  : 'https://uni-farm-connect-x-lukyanenkolawfa.replit.app';
const ADMIN_SECRET = 'unifarm_admin_secret_2025';

// –¢–∏–ø—ã Telegram
interface TelegramUser {
  id: number;
  first_name?: string;
  username?: string;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: { id: number };
  text?: string;
}

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message?: TelegramMessage;
  data?: string;
}

interface TelegramUpdate {
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

/**
 * üîê –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
function isAdmin(username?: string): boolean {
  return username ? AUTHORIZED_ADMINS.includes(username) : false;
}

/**
 * üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function sendMessage(chatId: number, text: string, options: any = {}): Promise<void> {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML',
      ...options
    };

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      logger.error(`[SmartBot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.statusText}`);
    }
  } catch (error) {
    logger.error('[SmartBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

/**
 * ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function editMessage(chatId: number, messageId: number, text: string, options: any = {}): Promise<void> {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/editMessageText`;
    
    const payload = {
      chat_id: chatId,
      message_id: messageId,
      text: text,
      parse_mode: 'HTML',
      ...options
    };

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      logger.error(`[SmartBot] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.statusText}`);
    }
  } catch (error) {
    logger.error('[SmartBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

/**
 * üë• –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function getUserKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: "üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm",
          web_app: { url: MINI_APP_URL }
        }
      ],
      [
        { text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data: "help" },
        { text: "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥", callback_data: "ref_code" }
      ]
    ]
  };
}

/**
 * üõ†Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
function getAdminKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: "üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm",
          web_app: { url: MINI_APP_URL }
        },
        { text: "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }
      ],
      [
        { text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data: "help" },
        { text: "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥", callback_data: "ref_code" }
      ]
    ]
  };
}

/**
 * üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 */
function getAdminPanelKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data: "admin_database" },
        { text: "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data: "admin_users" }
      ],
      [
        { text: "üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data: "admin_finance" },
        { text: "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data: "admin_analytics" }
      ],
      [
        { text: "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data: "admin_referral" },
        { text: "‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data: "admin_system" }
      ],
      [
        { text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data: "admin_refresh" },
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }
      ]
    ]
  };
}

/**
 * üóÑÔ∏è –ú–µ–Ω—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
function getDatabaseKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üîå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –ë–î", callback_data: "db_reconnect" },
        { text: "üìã –°–æ–±—ã—Ç–∏—è –ë–î", callback_data: "db_events" }
      ],
      [
        { text: "üìä –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", callback_data: "db_status" },
        { text: "üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data: "db_test" }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data: "admin_panel" }
      ]
    ]
  };
}

/**
 * üè† –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
 */
async function sendMainMenu(chatId: number, username?: string, messageId?: number): Promise<void> {
  const isUserAdmin = isAdmin(username);
  
  const welcomeText = isUserAdmin 
    ? `üéõÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniFarm, ${username}!</b>

–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>.
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üì± <i>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</i> - –æ—Å–Ω–æ–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
üõ†Ô∏è <i>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</i> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π`
    : `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniFarm!</b>

üå± –ù–∞—á–Ω–∏—Ç–µ —Ñ–∞—Ä–º–∏—Ç—å UNI —Ç–æ–∫–µ–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
üí∞ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã
üéØ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥`;

  const keyboard = isUserAdmin ? getAdminKeyboard() : getUserKeyboard();

  if (messageId) {
    await editMessage(chatId, messageId, welcomeText, {
      reply_markup: JSON.stringify(keyboard)
    });
  } else {
    await sendMessage(chatId, welcomeText, {
      reply_markup: JSON.stringify(keyboard)
    });
  }
}

/**
 * üõ†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 */
async function sendAdminPanel(chatId: number, messageId?: number): Promise<void> {
  const adminText = `
üéõÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å UniFarm</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π!
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:

<i>üí° –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</i>
  `;

  if (messageId) {
    await editMessage(chatId, messageId, adminText, {
      reply_markup: JSON.stringify(getAdminPanelKeyboard())
    });
  } else {
    await sendMessage(chatId, adminText, {
      reply_markup: JSON.stringify(getAdminPanelKeyboard())
    });
  }
}

/**
 * üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */
async function handleAdminAction(chatId: number, action: string, username: string, messageId?: number): Promise<void> {
  if (action.startsWith('admin_database') || action.startsWith('db_')) {
    await handleDatabaseAction(chatId, action, username, messageId);
    return;
  }

  switch (action) {
    case 'admin_users':
      const usersMenuText = `
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:
      `;
      
      if (messageId) {
        await editMessage(chatId, messageId, usersMenuText, {
          reply_markup: JSON.stringify(getUserKeyboard())
        });
      }
      break;

    case 'users_stats':
      await sendMessage(chatId, "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
      
      try {
        const response = await fetch(`${API_BASE_URL}/api/admin/users/stats`);
        const result = await response.json();
        
        if (result.success) {
          const stats = result.data;
          const statsText = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}
üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.newToday}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${stats.lastRegistered ? new Date(stats.lastRegistered).toLocaleString('ru-RU') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
          `;
          await sendMessage(chatId, statsText);
        } else {
          await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`);
      }
      break;

    case 'admin_finance':
      const financeMenuText = `
üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:
      `;
      
      if (messageId) {
        await editMessage(chatId, messageId, financeMenuText, {
          reply_markup: JSON.stringify(getAdminPanelKeyboard())
        });
      }
      break;

    case 'finance_withdrawals':
      await sendMessage(chatId, "üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥...");
      
      try {
        const response = await fetch(`${API_BASE_URL}/api/admin/finance/withdrawals`);
        const result = await response.json();
        
        if (result.success) {
          const withdrawals = result.data.slice(0, 5);
          let withdrawText = "üí∞ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:</b>\n\n";
          
          if (withdrawals.length === 0) {
            withdrawText += "‚úÖ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç";
          } else {
            withdrawals.forEach((w: any, index: number) => {
              withdrawText += `${index + 1}. üë§ ID: ${w.userId}\n`;
              withdrawText += `   üí∞ –°—É–º–º–∞: ${w.amount} ${w.currency}\n`;
              withdrawText += `   üìÖ –î–∞—Ç–∞: ${new Date(w.created_at).toLocaleString('ru-RU')}\n\n`;
            });
          }
          
          await sendMessage(chatId, withdrawText);
        } else {
          await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: ${error}`);
      }
      break;

    case 'admin_analytics':
      await sendMessage(chatId, "üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...");
      
      try {
        const response = await fetch(`${API_BASE_URL}/api/admin/analytics/overview`);
        const result = await response.json();
        
        if (result.success) {
          const data = result.data;
          const analyticsText = `
üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.totalUsers}
üí∞ UNI –≤ —Å–∏—Å—Ç–µ–º–µ: ${data.totalUniInSystem}
üìà –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${data.totalDeposits}
üìâ –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${data.totalWithdraws}
‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–≤–æ–¥: ${data.pendingWithdrawals}
          `;
          await sendMessage(chatId, analyticsText);
        } else {
          await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${error}`);
      }
      break;

    case 'admin_referral':
      await sendMessage(chatId, "üîó –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...");
      
      try {
        const response = await fetch(`${API_BASE_URL}/api/admin/referral/stats`);
        const result = await response.json();
        
        if (result.success) {
          const stats = result.data;
          let referralText = `
üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

üìä –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.totalReferrals}
üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: ${stats.totalReferralCodes}

üèÜ <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä—ã:</b>
`;
          
          if (stats.topReferrers?.length > 0) {
            stats.topReferrers.forEach((ref: any, index: number) => {
              referralText += `${index + 1}. @${ref.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} - ${ref.referrals} —Ä–µ—Ñ.\n`;
            });
          } else {
            referralText += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤";
          }
          
          await sendMessage(chatId, referralText);
        } else {
          await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`);
      }
      break;

    case 'admin_system':
      await sendMessage(chatId, "‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤...");
      
      try {
        const response = await fetch(`${API_BASE_URL}/api/admin/system/logs`);
        const result = await response.json();
        
        if (result.success) {
          const logs = result.data.lastEvents || [];
          let logsText = "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n";
          
          if (logs.length === 0) {
            logsText += "‚ÑπÔ∏è –°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
          } else {
            logs.forEach((log: any, index: number) => {
              logsText += `${index + 1}. ${log.event}\n`;
              logsText += `   ‚è∞ ${new Date(log.time).toLocaleString('ru-RU')}\n\n`;
            });
          }
          
          await sendMessage(chatId, logsText);
        } else {
          await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${error}`);
      }
      break;

    default:
      await sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è");
  }
}

/**
 * üóÑÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function handleDatabaseAction(chatId: number, action: string, username: string, messageId?: number): Promise<void> {
  switch (action) {
    case 'admin_database':
      const dbMenuText = `
üóÑÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</b>

–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:
      `;
      
      if (messageId) {
        await editMessage(chatId, messageId, dbMenuText, {
          reply_markup: JSON.stringify(getDatabaseKeyboard())
        });
      }
      break;

    case 'db_reconnect':
      await sendMessage(chatId, "üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
      
      try {
        const response = await fetch(`${API_BASE_URL}/api/admin/db/reconnect`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });

        const result = await response.json();
        
        if (result.success) {
          await sendMessage(chatId, `‚úÖ ${result.message}`);
        } else {
          await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error}`);
      }
      break;

    case 'db_status':
      await sendMessage(chatId, "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
      
      try {
        const response = await fetch(`${API_BASE_URL}/api/admin/db-status`);
        const result = await response.json();
        
        if (result.success) {
          const status = result.data;
          const statusText = `
üóÑÔ∏è <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>

üìä –°—Ç–∞—Ç—É—Å: ${status.connected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}
üèÉ –¢–∏–ø: ${status.type || 'PostgreSQL'}
üì° –•–æ—Å—Ç: ${status.host || '–°–∫—Ä—ã—Ç'}
‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${status.responseTime || 'N/A'}ms
          `;
          await sendMessage(chatId, statusText);
        } else {
          await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${result.error}`);
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error}`);
      }
      break;

    case 'db_events':
      await sendMessage(chatId, "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
      
      try {
        const response = await fetch(`${API_BASE_URL}/api/admin/system/logs`);
        const result = await response.json();
        
        if (result.success) {
          const events = result.data.lastEvents || [];
          let eventsText = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n";
          
          if (events.length === 0) {
            eventsText += "‚ÑπÔ∏è –°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
          } else {
            events.forEach((event: any, index: number) => {
              eventsText += `${index + 1}. ${event.event}\n`;
              eventsText += `   ‚è∞ ${new Date(event.time).toLocaleString('ru-RU')}\n\n`;
            });
          }
          
          await sendMessage(chatId, eventsText);
        } else {
          await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: ${result.error}`);
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${error}`);
      }
      break;

    case 'db_events_detailed':
      try {
        const response = await fetch(`${API_BASE_URL}/api/db/events?admin_username=${username}&admin_key=${ADMIN_SECRET}`);
        const result = await response.json() as any;
        
        if (result.success && result.data.events) {
          const events = result.data.events.slice(0, 5);
          let eventsText = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ë–î:</b>\n\n";
          
          events.forEach((event: any, index: number) => {
            eventsText += `${index + 1}. <code>${event.timestamp}</code>\n`;
            eventsText += `   ${event.type}: ${event.message}\n\n`;
          });
          
          await sendMessage(chatId, eventsText);
        } else {
          await sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –ë–î");
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: ${error}`);
      }
      break;

    case 'db_status_detailed':
      try {
        const response = await fetch(`${API_BASE_URL}/api/admin/db-status`);
        const result = await response.json() as any;
        
        if (result.success) {
          const status = result.data;
          const statusText = `
üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î</b>

üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b> ${status.connected ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}
üè¢ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> <code>${status.database}</code>
üåê <b>–•–æ—Å—Ç:</b> <code>${status.host}</code>
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>${status.user}</code>

‚è∞ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> ${new Date().toLocaleString('ru-RU')}
          `;
          
          await sendMessage(chatId, statusText);
        } else {
          await sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ë–î");
        }
      } catch (error) {
        await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error}`);
      }
      break;

    default:
      await sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ë–î");
  }
}

/**
 * üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
export async function handleSmartBotUpdate(update: TelegramUpdate): Promise<void> {
  try {
    if (update.message) {
      const message = update.message;
      const chatId = message.chat.id;
      const username = message.from.username;
      const text = message.text;

      logger.info(`[SmartBot] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username || message.from.id}: ${text}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (text === '/start') {
        await sendMainMenu(chatId, username);
      } else if (text === '/adminka') {
        if (isAdmin(username)) {
          await sendAdminPanel(chatId);
        } else {
          await sendMessage(chatId, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.");
        }
      } else if (text === '/help') {
        const helpText = `
‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ UniFarm</b>

üå± <b>–ß—Ç–æ —Ç–∞–∫–æ–µ UniFarm?</b>
UniFarm - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞ UNI —Ç–æ–∫–µ–Ω–æ–≤

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –§–∞—Ä–º–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞  
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å UniFarm" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        `;
        await sendMessage(chatId, helpText);
      } else {
        await sendMessage(chatId, "üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é");
      }
    }

    if (update.callback_query) {
      const query = update.callback_query;
      const chatId = query.message?.chat.id;
      const messageId = query.message?.message_id;
      const username = query.from.username;
      const data = query.data;

      if (!chatId || !messageId || !data) return;

      logger.info(`[SmartBot] Callback –æ—Ç ${username || query.from.id}: ${data}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback'–∏
      if (data === 'back_main') {
        await sendMainMenu(chatId, username, messageId);
      } else if (data === 'admin_panel') {
        if (isAdmin(username)) {
          await sendAdminPanel(chatId, messageId);
        } else {
          await sendMessage(chatId, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.");
        }
      } else if (data.startsWith('admin_database') || data.startsWith('db_')) {
        if (isAdmin(username) && username) {
          await handleDatabaseAction(chatId, data, username, messageId);
        } else {
          await sendMessage(chatId, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
        }
      } else if (data === 'help') {
        const helpText = `
‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ UniFarm</b>

üå± UniFarm - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞ UNI —Ç–æ–∫–µ–Ω–æ–≤
üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å UniFarm" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
üîó –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        `;
        await sendMessage(chatId, helpText);
      } else if (data === 'ref_code') {
        await sendMessage(chatId, "üîó –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞...\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!");
      } else if (data.startsWith('admin_') && isAdmin(username)) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
        await handleAdminAction(chatId, data, username || '', messageId);
      } else {
        await sendMessage(chatId, "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ callback_query_id: query.id })
      });
    }
  } catch (error) {
    logger.error('[SmartBot] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
  }
}