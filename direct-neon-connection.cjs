/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB —Å –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CommonJS –≤–º–µ—Å—Ç–æ ES –º–æ–¥—É–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */

require('dotenv').config({ path: '.env.neon' });
const { Pool } = require('pg');
const fs = require('fs');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function checkNeonConnection() {
  log('\nüåü –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB...', colors.cyan + colors.bold);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Neon DB
  process.env.FORCE_NEON_DB = 'true';
  process.env.DISABLE_REPLIT_DB = 'true';
  process.env.OVERRIDE_DB_PROVIDER = 'neon';
  process.env.DATABASE_PROVIDER = 'neon';
  process.env.USE_LOCAL_DB_ONLY = 'false';
  process.env.NODE_ENV = 'production';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.DATABASE_URL) {
    log('‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', colors.red);
    log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.neon...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env.neon
    if (fs.existsSync('.env.neon')) {
      const envContent = fs.readFileSync('.env.neon', 'utf-8');
      const envLines = envContent.split('\n');
      
      envLines.forEach(line => {
        if (line && !line.startsWith('#')) {
          const [key, ...valueParts] = line.split('=');
          if (key && valueParts.length) {
            process.env[key.trim()] = valueParts.join('=').trim();
          }
        }
      });
      
      log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.neon –∑–∞–≥—Ä—É–∂–µ–Ω—ã', colors.green);
    } else {
      log('‚ùå –§–∞–π–ª .env.neon –Ω–µ –Ω–∞–π–¥–µ–Ω', colors.red);
      process.exit(1);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –µ—Å—Ç—å neon.tech
  if (!process.env.DATABASE_URL || !process.env.DATABASE_URL.includes('neon.tech')) {
    log('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ Neon DB', colors.red);
    log(`–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${process.env.DATABASE_URL?.replace(/:[^:]*@/, ':***@')}`, colors.yellow);
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –µ—Å—Ç—å sslmode=require
  if (!process.env.DATABASE_URL.includes('sslmode=require')) {
    log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sslmode=require', colors.yellow);
    log('–î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä sslmode=require –≤ URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', colors.yellow);
    
    const url = process.env.DATABASE_URL;
    process.env.DATABASE_URL = url.includes('?') 
      ? `${url}&sslmode=require` 
      : `${url}?sslmode=require`;
  }
  
  log(`üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB —Å URL: ${process.env.DATABASE_URL.replace(/:[^:]*@/, ':***@')}`, colors.blue);
  
  let pool;
  try {
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: {
        rejectUnauthorized: true
      },
      max: 10, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—É–ª–µ
      idleTimeoutMillis: 30000, // –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      connectionTimeoutMillis: 8000, // –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    });
    
    pool.on('error', (err) => {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${err.message}`, colors.red);
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    const client = await pool.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    const result = await client.query('SELECT NOW() as time');
    const time = result.rows[0].time;
    
    log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!`, colors.green);
    log(`üìÖ –í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${time}`, colors.cyan);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
    try {
      const tablesResult = await client.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        ORDER BY table_name
      `);
      
      if (tablesResult.rows.length > 0) {
        log(`\nüìã –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (${tablesResult.rows.length}):`, colors.cyan);
        tablesResult.rows.forEach((row, index) => {
          if (index < 15) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–≤—ã–º–∏ 15 —Ç–∞–±–ª–∏—Ü–∞–º–∏
            log(`   - ${row.table_name}`, colors.cyan);
          } else if (index === 15) {
            log(`   - ... –∏ –µ—â—ë ${tablesResult.rows.length - 15} —Ç–∞–±–ª–∏—Ü`, colors.cyan);
          }
        });
      } else {
        log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ public', colors.yellow);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users
      const usersResult = await client.query('SELECT COUNT(*) FROM users');
      log(`\nüë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${usersResult.rows[0].count}`, colors.green);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ transactions
      const transactionsResult = await client.query('SELECT COUNT(*) FROM transactions');
      log(`üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${transactionsResult.rows[0].count}`, colors.green);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ referrals
      const referralsResult = await client.query('SELECT COUNT(*) FROM referrals');
      log(`üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${referralsResult.rows[0].count}`, colors.green);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–π
      try {
        const partitionsResult = await client.query(`
          SELECT child.relname AS partition_name
          FROM pg_inherits
          JOIN pg_class parent ON pg_inherits.inhparent = parent.oid
          JOIN pg_class child ON pg_inherits.inhrelid = child.oid
          JOIN pg_namespace nmsp_parent ON nmsp_parent.oid = parent.relnamespace
          JOIN pg_namespace nmsp_child ON nmsp_child.oid = child.relnamespace
          WHERE parent.relname = 'transactions'
          ORDER BY child.relname
        `);
        
        if (partitionsResult.rows.length > 0) {
          log(`\nüìä –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions (${partitionsResult.rows.length}):`, colors.magenta);
          partitionsResult.rows.forEach((row, index) => {
            if (index < 10) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–≤—ã–º–∏ 10 –ø–∞—Ä—Ç–∏—Ü–∏—è–º–∏
              log(`   - ${row.partition_name}`, colors.magenta);
            } else if (index === 10) {
              log(`   - ... –∏ –µ—â—ë ${partitionsResult.rows.length - 10} –ø–∞—Ä—Ç–∏—Ü–∏–π`, colors.magenta);
            }
          });
        } else {
          log('‚ö†Ô∏è –î–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ä—Ç–∏—Ü–∏–π', colors.yellow);
        }
      } catch (err) {
        log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—Ç–∏—Ü–∏–π: ${err.message}`, colors.yellow);
      }
      
    } catch (err) {
      log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${err.message}`, colors.yellow);
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ partition_logs
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã partition_logs
      const partitionLogsStructure = await client.query(`
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'partition_logs'
      `);
      
      log('\nüìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã partition_logs:', colors.cyan);
      partitionLogsStructure.rows.forEach(row => {
        log(`   - ${row.column_name}: ${row.data_type}`, colors.cyan);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
      const hasOperationTypeField = partitionLogsStructure.rows.some(row => 
        row.column_name === 'operation_type'
      );
      
      const hasOperationField = partitionLogsStructure.rows.some(row => 
        row.column_name === 'operation'
      );
      
      if (hasOperationTypeField) {
        log('‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ partition_logs –µ—Å—Ç—å –ø–æ–ª–µ operation_type', colors.green);
      } else if (hasOperationField) {
        log('‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ partition_logs –µ—Å—Ç—å –ø–æ–ª–µ operation', colors.green);
        log('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—è operation –≤–º–µ—Å—Ç–æ operation_type', colors.yellow);
      } else {
        log('‚ùå –í —Ç–∞–±–ª–∏—Ü–µ partition_logs –Ω–µ—Ç –Ω–∏ operation_type, –Ω–∏ operation', colors.red);
      }
    } catch (err) {
      log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã partition_logs: ${err.message}`, colors.yellow);
    }
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client.release();
    
    return true;
  } catch (err) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB: ${err.message}`, colors.red);
    
    if (err.message.includes('self signed certificate')) {
      log('\nüîí –ü—Ä–æ–±–ª–µ–º–∞ —Å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ DATABASE_URL —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä sslmode=require', colors.yellow);
    } else if (err.message.includes('connection refused')) {
      log('\nüåê –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', colors.yellow);
    } else if (err.message.includes('password authentication failed')) {
      log('\nüîë –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è', colors.yellow);
    } else if (err.message.includes('database') && err.message.includes('does not exist')) {
      log('\nüìÅ –£–∫–∞–∑–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', colors.yellow);
    }
    
    return false;
  } finally {
    if (pool) {
      await pool.end();
      log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ', colors.blue);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  checkNeonConnection().then(success => {
    if (!success) {
      process.exit(1);
    }
  });
}

module.exports = { checkNeonConnection };