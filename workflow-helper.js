/**
 * –°–∫—Ä–∏–ø—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UniFarm —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π workflow –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
 * –¥–æ–±–∞–≤–ª—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
const { spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
const config = {
  maxRestartsPerHour: 10,
  cooldownPeriodSec: 10,
  logFile: 'restart-log.txt',
  statusCheckIntervalSec: 30
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
const restartStats = {
  restarts: [],
  lastRestartTime: null,
  isInCooldown: false
};

// –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
const statusHistory = [];

console.log('========================================================================');
console.log('  –ó–ê–ü–£–°–ö UNIFARM –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –ü–ï–†–ï–ó–ê–ü–£–°–ö–û–ú');
console.log('========================================================================');
console.log('–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());
console.log('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –≤ —á–∞—Å:', config.maxRestartsPerHour);
console.log('–ü–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏:', config.cooldownPeriodSec, '—Å–µ–∫');
console.log('–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', config.statusCheckIntervalSec, '—Å–µ–∫');
console.log('========================================================================');

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
async function logEvent(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  
  console.log(message);
  
  try {
    await fs.appendFile(config.logFile, logMessage);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', err);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
function checkRestartLimit() {
  const now = Date.now();
  const oneHourAgo = now - (60 * 60 * 1000);
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  restartStats.restarts = restartStats.restarts.filter(time => time > oneHourAgo);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
  return restartStats.restarts.length < config.maxRestartsPerHour;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∂—É—Ä–Ω–∞–ª —Å–æ—Å—Ç–æ—è–Ω–∏–π
function recordStatus(status) {
  statusHistory.push({
    timestamp: Date.now(),
    status
  });
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
  if (statusHistory.length > 100) {
    statusHistory.shift();
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function startApp() {
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const env = {
    ...process.env,
    NODE_ENV: 'production',
    PORT: '3000', 
    DATABASE_PROVIDER: 'neon',
    FORCE_NEON_DB: 'true',
    DISABLE_REPLIT_DB: 'true',
    OVERRIDE_DB_PROVIDER: 'neon',
    SKIP_PARTITION_CREATION: 'true',
    IGNORE_PARTITION_ERRORS: 'true',
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    AUTO_RESTART_ENABLED: 'true'
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const appProcess = spawn('node', ['start-unified.js'], { 
    env,
    stdio: 'pipe' // –ò—Å–ø–æ–ª—å–∑—É–µ–º pipe –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–≤–æ–¥–∞
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
  appProcess.stdout.on('data', (data) => {
    const output = data.toString();
    console.log(output);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if (output.includes('[Server] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω') || 
        output.includes('serving on port')) {
      recordStatus('running');
      logEvent('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    }
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    if (output.includes('–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö') || 
        output.includes('database error')) {
      recordStatus('db_error');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  appProcess.stderr.on('data', (data) => {
    const errorOutput = data.toString();
    console.error(errorOutput);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if (errorOutput.includes('Error:') || 
        errorOutput.includes('Uncaught Exception')) {
      recordStatus('error');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  appProcess.on('close', async (code) => {
    recordStatus('closed');
    
    const exitTime = new Date().toISOString();
    
    if (code === 0) {
      await logEvent(`[${exitTime}] –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —à—Ç–∞—Ç–Ω–æ —Å –∫–æ–¥–æ–º 0`);
    } else {
      await logEvent(`[${exitTime}] ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º ${code}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
      if (checkRestartLimit()) {
        if (!restartStats.isInCooldown) {
          restartStats.isInCooldown = true;
          restartStats.lastRestartTime = Date.now();
          restartStats.restarts.push(Date.now());
          
          await logEvent(`–û–∂–∏–¥–∞–Ω–∏–µ ${config.cooldownPeriodSec} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...`);
          
          // –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
          setTimeout(() => {
            restartStats.isInCooldown = false;
            logEvent('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
            startApp();
          }, config.cooldownPeriodSec * 1000);
        }
      } else {
        await logEvent(`‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ (${config.maxRestartsPerHour} –≤ —á–∞—Å). –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω.`);
        await logEvent(`–î–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: node workflow-helper.js`);
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
  appProcess.on('error', async (err) => {
    recordStatus('process_error');
    await logEvent(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${err.message}`);
  });
  
  return appProcess;
}

// –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
(async function main() {
  await logEvent('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ UniFarm —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º');
  startApp();

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  setInterval(() => {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    const recentStatuses = statusHistory.slice(-5);
    
    // –ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    if (recentStatuses.length > 0) {
      const lastStatus = recentStatuses[recentStatuses.length - 1];
      
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –±—ã–ª –æ—à–∏–±–∫–æ–π –∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
      if (lastStatus.status === 'error' && 
          (Date.now() - lastStatus.timestamp) > 5 * 60 * 1000) {
        logEvent('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–≤–∏—Å–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');
      }
    }
  }, config.statusCheckIntervalSec * 1000);
})();