/**
 * –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Neon DB
 * –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ db-selector-new.ts –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
 */

const fs = require('fs');
const path = require('path');
const child_process = require('child_process');

// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB\n');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';
process.env.USE_LOCAL_DB_ONLY = 'false';
process.env.NODE_ENV = 'production';

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–∞ db-selector-new.ts, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const dbSelectorPath = path.join(process.cwd(), 'server', 'db-selector-new.ts');
let originalContent = '';
let isModified = false;

function modifyDbSelector() {
  try {
    if (fs.existsSync(dbSelectorPath)) {
      // –ß—Ç–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      originalContent = fs.readFileSync(dbSelectorPath, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è
      if (originalContent.includes('// –§–û–†–°–ò–†–û–í–ê–ù–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï NEON DB [OVERRIDE]')) {
        console.log('‚ö†Ô∏è –§–∞–π–ª —É–∂–µ –±—ã–ª –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
        return;
      }
      
      // –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é determineProvider
      const replacementCode = `
// –§–û–†–°–ò–†–û–í–ê–ù–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï NEON DB [OVERRIDE]
const determineProvider = (): DatabaseProvider => {
  console.log('[DB-Selector] üöÄ –§–û–†–°–ò–†–û–í–ê–ù–ò–ï NEON DB (override-db-provider.cjs)');
  return 'neon';
};`;
      
      // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é determineProvider
      const functionPattern = /const determineProvider = \(\): DatabaseProvider => \{[\s\S]*?\};/;
      
      // –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
      const modifiedContent = originalContent.replace(functionPattern, replacementCode);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.writeFileSync(dbSelectorPath, modifiedContent);
      isModified = true;
      
      console.log('‚úÖ –§–∞–π–ª db-selector-new.ts —É—Å–ø–µ—à–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
      
      // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º
      try {
        console.log('üîß –ü–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
        child_process.execSync('npm run build', { stdio: 'inherit' });
        console.log('‚úÖ –ü–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } catch (err) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë:', err.message);
      }
    } else {
      console.error('‚ö†Ô∏è –§–∞–π–ª db-selector-new.ts –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
  }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function restoreOriginal() {
  if (isModified && originalContent) {
    try {
      fs.writeFileSync(dbSelectorPath, originalContent);
      console.log('\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª db-selector-new.ts');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function runApp() {
  console.log('üì¶ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º spawn –¥–ª—è –∑–∞–ø—É—Å–∫–∞ node dist/index.js
  const appProcess = child_process.spawn('node', ['dist/index.js'], {
    stdio: 'inherit',
    env: process.env
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  appProcess.on('close', (code) => {
    console.log(`\n‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    restoreOriginal();
    process.exit(code);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  appProcess.on('error', (error) => {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`);
    restoreOriginal();
    process.exit(1);
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  restoreOriginal();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  restoreOriginal();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π
modifyDbSelector();
runApp();