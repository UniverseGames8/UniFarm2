/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UniFarm —á–µ—Ä–µ–∑ workflow
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
 */

const { spawn } = require('child_process');
const fs = require('fs');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const KEEP_ALIVE_SCRIPT = 'keep-alive.cjs';
const LOG_FILE = 'workflow.log';

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function log(message) {
  const timestamp = new Date().toISOString();
  console.log(`[Workflow ${timestamp}] ${message}`);
  
  try {
    fs.appendFileSync(LOG_FILE, `[${timestamp}] ${message}\n`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', err);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ keep-alive —Å–∫—Ä–∏–ø—Ç–∞
function startKeepAlive() {
  log('–ó–∞–ø—É—Å–∫ UniFarm —á–µ—Ä–µ–∑ keep-alive —Å–∫—Ä–∏–ø—Ç...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive —Å–∫—Ä–∏–ø—Ç
  const child = spawn('node', [KEEP_ALIVE_SCRIPT], {
    stdio: 'inherit' // –ù–∞—Å–ª–µ–¥—É–µ–º stdio –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å workflow
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  child.on('close', (code) => {
    log(`Keep-alive —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      startKeepAlive();
    }, 5000);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  child.on('error', (err) => {
    log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ keep-alive —Å–∫—Ä–∏–ø—Ç–∞: ${err.message}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      startKeepAlive();
    }, 5000);
  });
}

// –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
console.log('========================================================================');
console.log('  –ó–ê–ü–£–°–ö UNIFARM –ß–ï–†–ï–ó WORKFLOW');
console.log('========================================================================');
console.log('–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());
console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–≤–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
console.log('========================================================================');

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
log('üöÄ –ó–∞–ø—É—Å–∫ workflow –¥–ª—è UniFarm');
startKeepAlive();