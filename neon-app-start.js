/**
 * –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è UniFarm —Å Neon DB
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Replit
 * 
 * –ó–∞–ø—É—Å–∫: node neon-app-start.js
 */

import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true'; 
process.env.OVERRIDE_DB_PROVIDER = 'neon';
process.env.NODE_ENV = 'production';
process.env.PORT = '3000';
process.env.SKIP_PARTITION_CREATION = 'true';
process.env.IGNORE_PARTITION_ERRORS = 'true';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ health.html
function ensureHealthFile() {
  const distHealthPath = path.join(__dirname, 'dist', 'public', 'health.html');
  
  if (!fs.existsSync(distHealthPath)) {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ health.html...');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é dist/public, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(path.join(__dirname, 'dist', 'public'))) {
      fs.mkdirSync(path.join(__dirname, 'dist', 'public'), { recursive: true });
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º health.html –∏–∑ server/public, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const serverHealthPath = path.join(__dirname, 'server', 'public', 'health.html');
    
    if (fs.existsSync(serverHealthPath)) {
      fs.copyFileSync(serverHealthPath, distHealthPath);
      console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª health.html –∏–∑ ${serverHealthPath} –≤ ${distHealthPath}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π health.html —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π
      const healthContent = `
<!DOCTYPE html>
<html>
<head>
  <title>UniFarm Health Check</title>
  <meta charset="utf-8">
</head>
<body>
  <h1>UniFarm API Server</h1>
  <p>Status: OK</p>
</body>
</html>`;
      
      fs.writeFileSync(distHealthPath, healthContent);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª health.html –≤ ${distHealthPath}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
function startServer() {
  console.log('===============================================');
  console.log('üöÄ –ó–∞–ø—É—Å–∫ UniFarm —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Neon DB');
  console.log('===============================================');
  console.log('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  console.log('  DATABASE_PROVIDER:', process.env.DATABASE_PROVIDER);
  console.log('  FORCE_NEON_DB:', process.env.FORCE_NEON_DB);
  console.log('  DISABLE_REPLIT_DB:', process.env.DISABLE_REPLIT_DB);
  console.log('  NODE_ENV:', process.env.NODE_ENV);
  console.log('  PORT:', process.env.PORT);
  console.log('  SKIP_PARTITION_CREATION:', process.env.SKIP_PARTITION_CREATION);
  console.log('===============================================');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  const serverProcess = spawn('node', ['dist/index.js'], {
    stdio: 'inherit',
    env: {
      ...process.env,
      DATABASE_PROVIDER: 'neon',
      FORCE_NEON_DB: 'true',
      DISABLE_REPLIT_DB: 'true', 
      OVERRIDE_DB_PROVIDER: 'neon',
      NODE_ENV: 'production',
      PORT: '3000',
      SKIP_PARTITION_CREATION: 'true',
      IGNORE_PARTITION_ERRORS: 'true'
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  serverProcess.on('error', (err) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
    process.exit(1);
  });
  
  serverProcess.on('exit', (code) => {
    if (code !== 0) {
      console.error(`‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: ${code}`);
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
      setTimeout(() => {
        startServer();
      }, 5000);
    }
  });
  
  // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    serverProcess.kill('SIGINT');
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    serverProcess.kill('SIGTERM');
    process.exit(0);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º health.html
  ensureHealthFile();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  startServer();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
main();