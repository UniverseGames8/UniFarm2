/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB
 * –∏ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π
 */

const { Pool } = require('pg');
const fs = require('fs');
const dotenv = require('dotenv');
const { table } = require('console');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m', 
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

/**
 * –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º
 */
function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Neon DB
 */
function loadNeonEnvironment() {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.neon
  const neonEnvPath = '.env.neon';
  if (fs.existsSync(neonEnvPath)) {
    log(`üìù –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env.neon...`, colors.blue);
    const neonConfig = dotenv.parse(fs.readFileSync(neonEnvPath));
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
    for (const key in neonConfig) {
      process.env[key] = neonConfig[key];
    }
    
    log(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`, colors.green);
  } else {
    log(`‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª .env.neon –Ω–µ –Ω–∞–π–¥–µ–Ω!`, colors.red);
    return false;
  }
  
  return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB
 */
async function checkNeonDB() {
  try {
    log(`\n${colors.blue}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB ===${colors.reset}`);
    
    if (!process.env.DATABASE_URL) {
      log(`‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!`, colors.red);
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Neon DB
    if (!process.env.DATABASE_URL.includes('neon.tech')) {
      log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: DATABASE_URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç neon.tech!`, colors.yellow);
      log(`‚ö†Ô∏è URL: ${process.env.DATABASE_URL.replace(/:[^:]*@/, ':***@')}`, colors.yellow);
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`, colors.blue);
    const pool = new Pool({ 
      connectionString: process.env.DATABASE_URL,
      ssl: {
        rejectUnauthorized: false // –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB —á–µ—Ä–µ–∑ SSL
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const client = await pool.connect();
    log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!`, colors.green);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name;
    `);
    
    log(`\nüìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (${tablesResult.rows.length}):`, colors.blue);
    const tableNames = tablesResult.rows.map(row => row.table_name);
    tableNames.forEach((name, index) => {
      log(`   ${index + 1}. ${name}`, colors.cyan);
    });
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    log(`\n${colors.blue}=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü ===${colors.reset}`);
    
    const tables = ['users', 'wallets', 'transactions', 'referrals', 'farming_deposits'];
    const counts = {};
    
    for (const tableName of tables) {
      if (tableNames.includes(tableName)) {
        const countResult = await client.query(`SELECT COUNT(*) FROM ${tableName}`);
        counts[tableName] = parseInt(countResult.rows[0].count);
        log(`üìä ${tableName}: ${counts[tableName]} –∑–∞–ø–∏—Å–µ–π`, colors.cyan);
      } else {
        log(`‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!`, colors.yellow);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    log(`\n${colors.blue}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ===${colors.reset}`);
    
    if (tableNames.includes('transactions')) {
      try {
        const partitionResult = await client.query(`
          SELECT
            parent.relname AS parent_table,
            child.relname AS partition_name
          FROM pg_inherits
          JOIN pg_class parent ON pg_inherits.inhparent = parent.oid
          JOIN pg_class child ON pg_inherits.inhrelid = child.oid
          JOIN pg_namespace nmsp_parent ON nmsp_parent.oid = parent.relnamespace
          JOIN pg_namespace nmsp_child ON nmsp_child.oid = child.relnamespace
          WHERE parent.relname = 'transactions'
          ORDER BY child.relname;
        `);
        
        if (partitionResult.rows.length > 0) {
          log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ ${partitionResult.rows.length} –ø–∞—Ä—Ç–∏—Ü–∏–π:`, colors.green);
          partitionResult.rows.forEach((row, index) => {
            log(`   ${index + 1}. ${row.partition_name}`, colors.cyan);
          });
        } else {
          log(`‚ö†Ô∏è –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!`, colors.yellow);
        }
      } catch (error) {
        log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${error.message}`, colors.yellow);
      }
    }
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    client.release();
    await pool.end();
    
    return true;
  } catch (error) {
    log(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Neon DB: ${error.message}`, colors.red);
    console.error(error);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  log(`\n${colors.magenta}=========================================${colors.reset}`);
  log(`${colors.magenta}= –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê NEON DB –î–õ–Ø UNIFARM =${colors.reset}`);
  log(`${colors.magenta}=========================================${colors.reset}`);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!loadNeonEnvironment()) {
    log(`\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Neon DB`, colors.red);
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB
  const success = await checkNeonDB();
  
  if (success) {
    log(`\n${colors.green}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${colors.reset}`);
    log(`${colors.blue}üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Neon DB –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:${colors.reset}`);
    log(`   node start-neon.cjs`, colors.cyan);
  } else {
    log(`\n${colors.red}‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!${colors.reset}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();