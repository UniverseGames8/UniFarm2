/**
 * –ù–∞–¥–µ–∂–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ UniFarm —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
 * 
 * –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Replit workflow
 * —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å–±–æ—è—Ö
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –≤ —á–∞—Å
  maxRestartsPerHour: 10,
  
  // –ü–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  cooldownPeriodSec: 10,
  
  // –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
  logFile: './restart-log.txt',
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  startCommand: 'node',
  startArgs: ['dist/index.js'],
  
  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  env: {
    NODE_ENV: 'production',
    PORT: '3000',
    DATABASE_PROVIDER: 'neon',
    FORCE_NEON_DB: 'true',
    DISABLE_REPLIT_DB: 'true',
    OVERRIDE_DB_PROVIDER: 'neon',
    SKIP_PARTITION_CREATION: 'true',
    IGNORE_PARTITION_ERRORS: 'true'
  }
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
const restartStats = {
  restarts: [],
  lastRestartTime: null,
  isInCooldown: false
};

// –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
function logMessage(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  
  console.log(message);
  
  try {
    fs.appendFileSync(config.logFile, logMessage);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', err);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
function checkRestartLimit() {
  const now = Date.now();
  const oneHourAgo = now - (60 * 60 * 1000);
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  restartStats.restarts = restartStats.restarts.filter(time => time > oneHourAgo);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
  return restartStats.restarts.length < config.maxRestartsPerHour;
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
function startServer() {
  logMessage('–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const env = { ...process.env, ...config.env };
  
  // –í—ã–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  logMessage('–ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  Object.entries(config.env).forEach(([key, value]) => {
    logMessage(`${key} = ${value}`);
  });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  const serverProcess = spawn(config.startCommand, config.startArgs, {
    env,
    stdio: 'pipe' // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  });
  
  // –õ–æ–≥–∏—Ä—É–µ–º PID
  logMessage(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å PID: ${serverProcess.pid}`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
  serverProcess.stdout.on('data', (data) => {
    process.stdout.write(data);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  serverProcess.stderr.on('data', (data) => {
    process.stderr.write(data);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  serverProcess.on('close', (code) => {
    const exitTime = new Date().toISOString();
    
    if (code === 0) {
      logMessage(`[${exitTime}] –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —à—Ç–∞—Ç–Ω–æ —Å –∫–æ–¥–æ–º 0`);
      logMessage('–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∑–∞–Ω–æ–≤–æ...');
      startServer(); // –î–∞–∂–µ –ø—Ä–∏ —à—Ç–∞—Ç–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    } else {
      logMessage(`[${exitTime}] –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º ${code}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
      if (checkRestartLimit()) {
        if (!restartStats.isInCooldown) {
          restartStats.isInCooldown = true;
          restartStats.lastRestartTime = Date.now();
          restartStats.restarts.push(Date.now());
          
          logMessage(`–û–∂–∏–¥–∞–Ω–∏–µ ${config.cooldownPeriodSec} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...`);
          
          // –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
          setTimeout(() => {
            restartStats.isInCooldown = false;
            logMessage('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
            startServer();
          }, config.cooldownPeriodSec * 1000);
        }
      } else {
        logMessage(`‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ (${config.maxRestartsPerHour} –≤ —á–∞—Å). –ñ–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.`);
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —á–∞—Å
        setTimeout(() => {
          logMessage('–ü—Ä–æ—à–µ–ª —á–∞—Å –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤. –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.');
          restartStats.restarts = []; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          startServer();
        }, 60 * 60 * 1000 + 1000); // –ß—É—Ç—å –±–æ–ª—å—à–µ —á–∞—Å–∞
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
  serverProcess.on('error', (err) => {
    logMessage(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${err.message}`);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    if (checkRestartLimit()) {
      setTimeout(() => {
        logMessage('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
        startServer();
      }, config.cooldownPeriodSec * 1000);
    }
  });
  
  return serverProcess;
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => {
  logMessage('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  logMessage('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
process.on('uncaughtException', (err) => {
  logMessage(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`);
  logMessage('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...');
});

// –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫
console.log('========================================================================');
console.log('  –ó–ê–ü–£–°–ö UNIFARM –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –ü–ï–†–ï–ó–ê–ü–£–°–ö–û–ú');
console.log('========================================================================');
console.log('–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());
console.log('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –≤ —á–∞—Å:', config.maxRestartsPerHour);
console.log('–ü–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏:', config.cooldownPeriodSec, '—Å–µ–∫');
console.log('========================================================================');

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ –≤ –ª–æ–≥
logMessage('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ UniFarm —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º');

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();