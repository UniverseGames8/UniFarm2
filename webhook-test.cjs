/**
 * –ü—Ä–æ—Å—Ç–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è webhook Telegram –±–æ—Ç–∞
 */

const fs = require('fs');
const path = require('path');
const https = require('https');

// –õ–æ–≥—É–≤–∞–Ω–Ω—è
const LOG_DIR = path.join(__dirname, 'logs');
if (!fs.existsSync(LOG_DIR)) {
  fs.mkdirSync(LOG_DIR, { recursive: true });
}

// –ó—á–∏—Ç—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ .env —Ñ–∞–π–ª—É
let BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
try {
  const envPath = path.join(__dirname, '.env');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    const match = envContent.match(/TELEGRAM_BOT_TOKEN\s*=\s*([^\r\n]+)/);
    if (match && match[1]) {
      BOT_TOKEN = match[1].trim().replace(/^['"]|['"]$/g, '');
      console.log('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ');
    }
  }
} catch (error) {
  console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ .env —Ñ–∞–π–ª—É:', error.message);
}

if (!BOT_TOKEN) {
  console.error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ .env —Ñ–∞–π–ª—ñ.');
  process.exit(1);
}

// –õ–æ–≥—É–≤–∞–Ω–Ω—è
function log(message, isError = false) {
  const timestamp = new Date().toISOString();
  const logFile = path.join(LOG_DIR, 'webhook-test.log');
  const formattedMessage = `[${timestamp}] ${isError ? 'ERROR: ' : ''}${message}\n`;
  
  console[isError ? 'error' : 'log'](message);
  
  try {
    fs.appendFileSync(logFile, formattedMessage);
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ª–æ–≥: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è HTTPS –∑–∞–ø–∏—Ç—ñ–≤
function httpsRequest(url, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const parsedUrl = new URL(url);
    
    const options = {
      hostname: parsedUrl.hostname,
      path: parsedUrl.pathname + parsedUrl.search,
      method,
      headers: {
        'Content-Type': 'application/json'
      }
    };
    
    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsedData = JSON.parse(responseData);
          resolve({ statusCode: res.statusCode, data: parsedData });
        } catch (error) {
          reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${error.message}, –¥–∞–Ω—ñ: ${responseData}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram API
async function getMe() {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/getMe`;
    const response = await httpsRequest(url);
    
    if (response.statusCode !== 200) {
      throw new Error(`HTTP –∫–æ–¥ ${response.statusCode}`);
    }
    
    if (!response.data.ok) {
      throw new Error(response.data.description || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API');
    }
    
    return response.data.result;
  } catch (error) {
    log(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞: ${error.message}`, true);
    return null;
  }
}

async function getWebhookInfo() {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`;
    const response = await httpsRequest(url);
    
    if (response.statusCode !== 200) {
      throw new Error(`HTTP –∫–æ–¥ ${response.statusCode}`);
    }
    
    if (!response.data.ok) {
      throw new Error(response.data.description || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API');
    }
    
    return response.data.result;
  } catch (error) {
    log(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ webhook: ${error.message}`, true);
    return null;
  }
}

async function setWebhook(url) {
  try {
    const apiUrl = `https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`;
    const data = {
      url: url,
      drop_pending_updates: true,
      allowed_updates: ["message", "callback_query"]
    };
    
    const response = await httpsRequest(apiUrl, 'POST', data);
    
    if (response.statusCode !== 200) {
      throw new Error(`HTTP –∫–æ–¥ ${response.statusCode}`);
    }
    
    if (!response.data.ok) {
      throw new Error(response.data.description || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API');
    }
    
    return true;
  } catch (error) {
    log(`–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: ${error.message}`, true);
    return false;
  }
}

async function deleteWebhook() {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook?drop_pending_updates=true`;
    const response = await httpsRequest(url);
    
    if (response.statusCode !== 200) {
      throw new Error(`HTTP –∫–æ–¥ ${response.statusCode}`);
    }
    
    if (!response.data.ok) {
      throw new Error(response.data.description || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API');
    }
    
    return true;
  } catch (error) {
    log(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook: ${error.message}`, true);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ URL
async function checkUrlAvailability(url) {
  try {
    // –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –¥–æ–º–µ–Ω
    const parsedUrl = new URL(url);
    const options = {
      method: 'HEAD',
      hostname: parsedUrl.hostname,
      path: parsedUrl.pathname,
      timeout: 5000
    };
    
    return new Promise((resolve) => {
      const req = https.request(options, (res) => {
        resolve(res.statusCode >= 200 && res.statusCode < 500);
      });
      
      req.on('error', () => {
        resolve(false);
      });
      
      req.on('timeout', () => {
        req.destroy();
        resolve(false);
      });
      
      req.end();
    });
  } catch (error) {
    log(`URL ${url} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${error.message}`, true);
    return false;
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
async function testWebhook() {
  try {
    log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è webhook –¥–ª—è Telegram –±–æ—Ç–∞...');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞
    const botInfo = await getMe();
    if (!botInfo) {
      log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ TELEGRAM_BOT_TOKEN.', true);
      return;
    }
    
    log(`‚úÖ –ë–æ—Ç: @${botInfo.username} (${botInfo.first_name})`);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL –¥–ª—è webhook
    // –°–ø–µ—Ä—à—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    let appUrl = process.env.APP_URL || process.env.MINI_APP_URL;
    
    // –Ø–∫—â–æ –∑–º—ñ–Ω–Ω–∏—Ö –Ω–µ–º–∞—î, –ø—Ä–æ–±—É—î–º–æ –≤–≥–∞–¥–∞—Ç–∏ URL –¥–ª—è Replit
    if (!appUrl) {
      const replSlug = process.env.REPL_SLUG;
      const replOwner = process.env.REPL_OWNER;
      
      if (replSlug && replOwner) {
        appUrl = `https://${replSlug}.${replOwner}.repl.co`;
      } else {
        // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        appUrl = 'https://uni-farm-connect-2.osadchukdmitro2.repl.co';
      }
    }
    
    // –°—Ñ–æ—Ä–º—É—î–º–æ URL –¥–ª—è webhook
    const webhookPath = '/api/telegram/webhook';
    const webhookUrl = `${appUrl}${webhookPath}`;
    
    log(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ URL –¥–ª—è webhook: ${webhookUrl}`);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ webhook
    const webhookInfo = await getWebhookInfo();
    if (!webhookInfo) {
      log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π webhook.', true);
      return;
    }
    
    log(`–ü–æ—Ç–æ—á–Ω–∏–π webhook URL: ${webhookInfo.url || '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
    
    // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω webhook
    if (webhookInfo.url === webhookUrl) {
      log(`‚úÖ Webhook –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –Ω–∞ ${webhookUrl}`);
      
      if (webhookInfo.last_error_date) {
        const errorDate = new Date(webhookInfo.last_error_date * 1000);
        log(`‚ö†Ô∏è –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞ webhook: ${webhookInfo.last_error_message} (${errorDate.toISOString()})`, true);
        
        // –ê–Ω–∞–ª—ñ–∑ —Ç–∏–ø–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
        if (webhookInfo.last_error_message.includes('Bad Gateway') || 
            webhookInfo.last_error_message.includes('Gateway Timeout')) {
          log('‚û°Ô∏è –ü—Ä–∏—á–∏–Ω–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞—Ü—é—î –≤–∞—à —Å–µ—Ä–≤–µ—Ä.', true);
        } else if (webhookInfo.last_error_message.includes('Bad Request') || 
                 webhookInfo.last_error_message.includes('Not Found')) {
          log('‚û°Ô∏è –ü—Ä–∏—á–∏–Ω–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π URI –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π –º–µ—Ç–æ–¥. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ API.', true);
        }
      } else {
        log('‚úÖ Webhook –ø—Ä–∞—Ü—é—î –±–µ–∑ –ø–æ–º–∏–ª–æ–∫');
      }
    } else {
      log(`–ü–æ—Ç–æ—á–Ω–∏–π webhook (${webhookInfo.url || '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}) –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –±–∞–∂–∞–Ω–æ–≥–æ (${webhookUrl})`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å URL
      log(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ ${webhookUrl}...`);
      const isAvailable = await checkUrlAvailability(webhookUrl);
      
      if (!isAvailable) {
        log(`‚ö†Ô∏è URL ${webhookUrl} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∑–æ–≤–Ω—ñ. Webhook –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.`, true);
        log('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤–∞—à —Å–µ—Ä–≤–µ—Ä —Ç–∞ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤—ñ–Ω –∑–∑–æ–≤–Ω—ñ.', true);
      }
      
      // –ü–∏—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏ —Ö–æ—á–µ –≤—ñ–Ω –æ–Ω–æ–≤–∏—Ç–∏ webhook
      log('–ë–∞–∂–∞—î—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ webhook –Ω–∞ –Ω–æ–≤–∏–π URL? (y/n)');
      process.stdout.write('> ');
      
      // –ù–∞—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –º–æ–∂–ª–∏–≤–æ –≤ NodeJS, —ñ–º—ñ—Ç—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è "y"
      process.stdout.write('y\n');
      
      // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π webhook
      log('–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ webhook...');
      const deleteResult = await deleteWebhook();
      
      if (!deleteResult) {
        log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π webhook.', true);
        return;
      }
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π webhook
      log(`–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook –Ω–∞ ${webhookUrl}...`);
      const setResult = await setWebhook(webhookUrl);
      
      if (!setResult) {
        log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π webhook.', true);
        
        // –°–ø—Ä–æ–±–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ URL
        const altWebhookUrl = `${appUrl}/webhook`;
        log(`–°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π webhook –Ω–∞ ${altWebhookUrl}...`);
        
        const altResult = await setWebhook(altWebhookUrl);
        
        if (!altResult) {
          log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π webhook.', true);
          return;
        } else {
          log(`‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${altWebhookUrl}`);
        }
      } else {
        log(`‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${webhookUrl}`);
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π webhook
      const updatedInfo = await getWebhookInfo();
      
      if (updatedInfo) {
        log(`–û–Ω–æ–≤–ª–µ–Ω–∏–π webhook URL: ${updatedInfo.url}`);
        
        if (updatedInfo.pending_update_count > 0) {
          log(`‚ö†Ô∏è –Ñ ${updatedInfo.pending_update_count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`, true);
        }
      }
    }
    
    // –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    log('\nüìã –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è webhook:');
    log(`1. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É: https://t.me/${botInfo.username}`);
    log('2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É');
    log('3. –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç—Ä–∏–º—É—î –∑–∞–ø–∏—Ç–∏:');
    log('   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä');
    log('   - –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –º–∞—Ä—à—Ä—É—Ç /api/telegram/webhook –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
    log('   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∑–æ–≤–Ω—ñ');
    
  } catch (error) {
    log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ webhook: ${error.message}`, true);
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
testWebhook();