/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ UNIFARM
 * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */

import pkg from 'pg';
const { Pool } = pkg;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || process.env.NEON_DATABASE_URL,
});

class SystemAuditor {
  constructor() {
    this.results = {
      database: { tables: [], issues: [] },
      api: { working: [], broken: [] },
      data: { consistent: [], inconsistent: [] },
      functionality: { working: [], broken: [] }
    };
  }

  log(message, type = 'info') {
    const colors = { info: '\x1b[36m', pass: '\x1b[32m', fail: '\x1b[31m', warn: '\x1b[33m', reset: '\x1b[0m' };
    console.log(`${colors[type]}${message}${colors.reset}`);
  }

  async checkDatabaseStructure() {
    this.log('\nüóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
      const tablesQuery = `
        SELECT table_name, 
               (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = t.table_name) as column_count
        FROM information_schema.tables t 
        WHERE table_schema = 'public' 
        ORDER BY table_name
      `;
      const { rows: tables } = await pool.query(tablesQuery);
      
      this.log(`‚úì –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`, 'pass');
      
      for (const table of tables) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        const countQuery = `SELECT COUNT(*) as count FROM ${table.table_name}`;
        const { rows: countResult } = await pool.query(countQuery);
        const recordCount = countResult[0].count;
        
        this.results.database.tables.push({
          name: table.table_name,
          columns: table.column_count,
          records: recordCount
        });
        
        this.log(`  üìã ${table.table_name}: ${table.column_count} –∫–æ–ª–æ–Ω–æ–∫, ${recordCount} –∑–∞–ø–∏—Å–µ–π`, 
                 recordCount > 0 ? 'pass' : 'warn');
      }
      
    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${error.message}`, 'fail');
      this.results.database.issues.push(error.message);
    }
  }

  async checkMissionsData() {
    this.log('\nüéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ú–ò–°–°–ò–ô', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏—Å—Å–∏–∏
      const missionsQuery = `
        SELECT m.*, 
               COUNT(um.id) as completion_count,
               STRING_AGG(DISTINCT u.telegram_username, ', ') as completed_by_users
        FROM missions m
        LEFT JOIN user_missions um ON m.id = um.mission_id
        LEFT JOIN users u ON um.user_id = u.id
        WHERE m.is_active = true
        GROUP BY m.id
        ORDER BY m.id
      `;
      const { rows: missions } = await pool.query(missionsQuery);
      
      this.log(`‚úì –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π: ${missions.length}`, missions.length === 4 ? 'pass' : 'warn');
      
      missions.forEach((mission, index) => {
        this.log(`  ${index + 1}. ${mission.title}`, 'info');
        this.log(`     –¢–∏–ø: ${mission.type}`, 'info');
        this.log(`     –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: ${mission.reward_uni} UNI`, 'info');
        this.log(`     –°—Å—ã–ª–∫–∞: ${mission.link}`, 'info');
        this.log(`     –ó–∞–≤–µ—Ä—à–µ–Ω–∏–π: ${mission.completion_count}`, 'info');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ RIOTMAP
        const expectedReward = '500.00';
        if (parseFloat(mission.reward_uni) === 500.00) {
          this.results.data.consistent.push(`–ú–∏—Å—Å–∏—è ${mission.title}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ`);
          this.log(`     ‚úì –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç RIOTMAP`, 'pass');
        } else {
          this.results.data.inconsistent.push(`–ú–∏—Å—Å–∏—è ${mission.title}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ`);
          this.log(`     ‚úó –û–∂–∏–¥–∞–ª–æ—Å—å 500 UNI, –ø–æ–ª—É—á–µ–Ω–æ ${mission.reward_uni}`, 'fail');
        }
      });
      
    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏—Å—Å–∏–π: ${error.message}`, 'fail');
      this.results.data.inconsistent.push(`–ú–∏—Å—Å–∏–∏: ${error.message}`);
    }
  }

  async checkBoostPackages() {
    this.log('\nüíé –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê TON BOOST –ü–ê–ö–ï–¢–û–í', 'info');
    this.log('='.repeat(50), 'info');

    try {
      const boostQuery = `
        SELECT bp.*, 
               COUNT(ub.id) as purchase_count,
               SUM(ub.amount_paid) as total_revenue
        FROM boost_packages bp
        LEFT JOIN user_boosts ub ON bp.id = ub.boost_package_id
        WHERE bp.is_active = true
        GROUP BY bp.id
        ORDER BY bp.price_ton
      `;
      const { rows: boosts } = await pool.query(boostQuery);
      
      this.log(`‚úì –ê–∫—Ç–∏–≤–Ω—ã—Ö boost –ø–∞–∫–µ—Ç–æ–≤: ${boosts.length}`, boosts.length === 4 ? 'pass' : 'warn');
      
      const expectedBoosts = [
        { name: 'Starter Boost', price_ton: '1.00', bonus_uni: '10000.00', daily_rate: '0.0050' },
        { name: 'Standard Boost', price_ton: '5.00', bonus_uni: '75000.00', daily_rate: '0.0100' },
        { name: 'Advanced Boost', price_ton: '15.00', bonus_uni: '250000.00', daily_rate: '0.0200' },
        { name: 'Premium Boost', price_ton: '25.00', bonus_uni: '500000.00', daily_rate: '0.0250' }
      ];
      
      boosts.forEach((boost, index) => {
        const expected = expectedBoosts.find(e => e.price_ton === boost.price_ton);
        
        this.log(`  ${index + 1}. ${boost.name}`, 'info');
        this.log(`     –¶–µ–Ω–∞: ${boost.price_ton} TON`, 'info');
        this.log(`     –ë–æ–Ω—É—Å: ${boost.uni_bonus_amount} UNI`, 'info');
        this.log(`     –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${boost.fixed_ton_daily_rate}`, 'info');
        this.log(`     –ü–æ–∫—É–ø–æ–∫: ${boost.purchase_count}`, 'info');
        
        if (expected) {
          let allCorrect = true;
          
          if (boost.uni_bonus_amount !== expected.bonus_uni) {
            this.log(`     ‚úó –ù–µ–≤–µ—Ä–Ω—ã–π –±–æ–Ω—É—Å UNI: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expected.bonus_uni}`, 'fail');
            allCorrect = false;
          }
          
          if (boost.fixed_ton_daily_rate !== expected.daily_rate) {
            this.log(`     ‚úó –ù–µ–≤–µ—Ä–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expected.daily_rate}`, 'fail');
            allCorrect = false;
          }
          
          if (allCorrect) {
            this.log(`     ‚úì –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç RIOTMAP`, 'pass');
            this.results.data.consistent.push(`Boost –ø–∞–∫–µ—Ç ${boost.name}: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç`);
          } else {
            this.results.data.inconsistent.push(`Boost –ø–∞–∫–µ—Ç ${boost.name}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ`);
          }
        }
      });
      
    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ boost –ø–∞–∫–µ—Ç–æ–≤: ${error.message}`, 'fail');
      this.results.data.inconsistent.push(`Boost –ø–∞–∫–µ—Ç—ã: ${error.message}`);
    }
  }

  async checkUserData() {
    this.log('\nüë• –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –î–ê–ù–ù–´–•', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userStatsQuery = `
        SELECT 
          COUNT(*) as total_users,
          COUNT(CASE WHEN telegram_id IS NOT NULL THEN 1 END) as telegram_users,
          COUNT(CASE WHEN ref_code IS NOT NULL THEN 1 END) as users_with_refcode,
          AVG(balance_uni::numeric) as avg_balance_uni,
          AVG(balance_ton::numeric) as avg_balance_ton
        FROM users
      `;
      const { rows: userStats } = await pool.query(userStatsQuery);
      const stats = userStats[0];
      
      this.log(`‚úì –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}`, 'pass');
      this.log(`  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Telegram: ${stats.telegram_users}`, 'info');
      this.log(`  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å ref_code: ${stats.users_with_refcode}`, 'info');
      this.log(`  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å UNI: ${parseFloat(stats.avg_balance_uni || 0).toFixed(2)}`, 'info');
      this.log(`  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å TON: ${parseFloat(stats.avg_balance_ton || 0).toFixed(2)}`, 'info');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
      const duplicateRefCodesQuery = `
        SELECT ref_code, COUNT(*) as count 
        FROM users 
        WHERE ref_code IS NOT NULL 
        GROUP BY ref_code 
        HAVING COUNT(*) > 1
      `;
      const { rows: duplicates } = await pool.query(duplicateRefCodesQuery);
      
      if (duplicates.length === 0) {
        this.log(`  ‚úì –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã`, 'pass');
        this.results.data.consistent.push('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã');
      } else {
        this.log(`  ‚úó –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–µ—Ñ. –∫–æ–¥—ã: ${duplicates.length}`, 'fail');
        this.results.data.inconsistent.push(`–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ref_code: ${duplicates.length}`);
      }
      
    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`, 'fail');
      this.results.data.inconsistent.push(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${error.message}`);
    }
  }

  async checkTransactionSystem() {
    this.log('\nüí∞ –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactionStatsQuery = `
        SELECT 
          type,
          COUNT(*) as count,
          SUM(amount::numeric) as total_amount,
          AVG(amount::numeric) as avg_amount
        FROM transactions 
        GROUP BY type
        ORDER BY count DESC
      `;
      const { rows: transactionStats } = await pool.query(transactionStatsQuery);
      
      this.log(`‚úì –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`, 'pass');
      transactionStats.forEach(stat => {
        this.log(`  ${stat.type}: ${stat.count} —à—Ç., —Å—É–º–º–∞: ${parseFloat(stat.total_amount).toFixed(2)}`, 'info');
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–æ–≤
      const balanceCheckQuery = `
        SELECT 
          u.id,
          u.balance_uni,
          u.balance_ton,
          COALESCE(SUM(CASE WHEN t.type = 'deposit' THEN t.amount::numeric ELSE 0 END), 0) as total_deposits,
          COALESCE(SUM(CASE WHEN t.type = 'withdrawal' THEN t.amount::numeric ELSE 0 END), 0) as total_withdrawals
        FROM users u
        LEFT JOIN transactions t ON u.id = t.user_id
        WHERE u.id <= 5  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        GROUP BY u.id, u.balance_uni, u.balance_ton
      `;
      const { rows: balanceCheck } = await pool.query(balanceCheckQuery);
      
      let balanceIssues = 0;
      balanceCheck.forEach(user => {
        const expectedBalance = parseFloat(user.total_deposits) - parseFloat(user.total_withdrawals);
        const actualBalance = parseFloat(user.balance_uni || 0);
        if (Math.abs(expectedBalance - actualBalance) > 0.01) {
          balanceIssues++;
        }
      });
      
      if (balanceIssues === 0) {
        this.log(`  ‚úì –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`, 'pass');
        this.results.data.consistent.push('–ë–∞–ª–∞–Ω—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º');
      } else {
        this.log(`  ‚úó –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${balanceIssues}`, 'fail');
        this.results.data.inconsistent.push(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${balanceIssues}`);
      }
      
    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`, 'fail');
      this.results.data.inconsistent.push(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
    }
  }

  async checkAPIEndpoints() {
    this.log('\nüîó –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò API', 'info');
    this.log('='.repeat(50), 'info');

    const criticalEndpoints = [
      { method: 'GET', path: '/api/v2/missions/active', description: '–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏' },
      { method: 'POST', path: '/api/v2/missions/complete', description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏—Å—Å–∏–π' },
      { method: 'GET', path: '/api/v2/wallet/balance', description: '–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞' },
      { method: 'GET', path: '/api/v2/daily-bonus/status', description: '–°—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞' },
      { method: 'GET', path: '/api/v2/referral/tree', description: '–î–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' },
      { method: 'GET', path: '/api/v2/ton-farming/boosts', description: 'TON boost –ø–∞–∫–µ—Ç—ã' }
    ];

    try {
      const fetch = (await import('node-fetch')).default;
      const baseUrl = 'http://localhost:3000';

      for (const endpoint of criticalEndpoints) {
        try {
          const response = await fetch(`${baseUrl}${endpoint.path}`, {
            method: endpoint.method,
            timeout: 5000,
            headers: { 'Content-Type': 'application/json' }
          });

          if (response.ok) {
            this.log(`  ‚úì ${endpoint.description}: —Ä–∞–±–æ—Ç–∞–µ—Ç (${response.status})`, 'pass');
            this.results.api.working.push(`${endpoint.method} ${endpoint.path}`);
          } else {
            this.log(`  ‚úó ${endpoint.description}: –æ—à–∏–±–∫–∞ ${response.status}`, 'fail');
            this.results.api.broken.push(`${endpoint.method} ${endpoint.path} (${response.status})`);
          }
        } catch (error) {
          this.log(`  ‚úó ${endpoint.description}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`, 'fail');
          this.results.api.broken.push(`${endpoint.method} ${endpoint.path} (timeout)`);
        }
      }
    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: ${error.message}`, 'fail');
    }
  }

  generateDetailedReport() {
    this.log('\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´', 'info');
    this.log('='.repeat(60), 'info');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    this.log('\nüóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•:', 'info');
    this.results.database.tables.forEach(table => {
      const status = table.records > 0 ? '‚úì' : '‚ö†';
      this.log(`  ${status} ${table.name}: ${table.records} –∑–∞–ø–∏—Å–µ–π`, table.records > 0 ? 'pass' : 'warn');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ API
    this.log('\nüîó API –≠–ù–î–ü–û–ò–ù–¢–´:', 'info');
    this.log(`  ‚úì –†–∞–±–æ—Ç–∞—é—â–∏—Ö: ${this.results.api.working.length}`, 'pass');
    this.log(`  ‚úó –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: ${this.results.api.broken.length}`, this.results.api.broken.length === 0 ? 'pass' : 'fail');

    // –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    this.log('\nüìä –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–¨ –î–ê–ù–ù–´–•:', 'info');
    this.log(`  ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${this.results.data.consistent.length}`, 'pass');
    this.log(`  ‚úó –ù–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: ${this.results.data.inconsistent.length}`, this.results.data.inconsistent.length === 0 ? 'pass' : 'fail');

    // –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º
    if (this.results.data.inconsistent.length > 0) {
      this.log('\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:', 'warn');
      this.results.data.inconsistent.forEach(issue => {
        this.log(`  - ${issue}`, 'warn');
      });
    }

    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    const totalIssues = this.results.api.broken.length + this.results.data.inconsistent.length + this.results.database.issues.length;
    this.log('\n' + '='.repeat(60), 'info');
    
    if (totalIssues === 0) {
      this.log('üéâ –°–ò–°–¢–ï–ú–ê –í –û–¢–õ–ò–ß–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò', 'pass');
      this.log('‚úÖ –ì–æ—Ç–æ–≤–∞ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å RIOTMAP.md', 'pass');
    } else if (totalIssues <= 3) {
      this.log('‚úÖ –°–ò–°–¢–ï–ú–ê –í –•–û–†–û–®–ï–ú –°–û–°–¢–û–Ø–ù–ò–ò', 'pass');
      this.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${totalIssues} –º–∏–Ω–æ—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º`, 'warn');
    } else {
      this.log('‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø', 'warn');
      this.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${totalIssues} –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`, 'fail');
    }
  }

  async runCompleteAudit() {
    this.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–£–î–ò–¢–ê –°–ò–°–¢–ï–ú–´ UNIFARM', 'info');
    this.log('üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Å RIOTMAP.md', 'info');
    this.log('='.repeat(60), 'info');

    await this.checkDatabaseStructure();
    await this.checkMissionsData();
    await this.checkBoostPackages();
    await this.checkUserData();
    await this.checkTransactionSystem();
    await this.checkAPIEndpoints();
    
    this.generateDetailedReport();

    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞
const auditor = new SystemAuditor();
auditor.runCompleteAudit().catch(console.error);