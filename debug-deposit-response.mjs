/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ API –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–µ–ø–æ–∑–∏—Ç–∞
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –¥–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
 */
import fetch from 'node-fetch';

async function testDeposit() {
  // URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ production
  const urls = [
    'https://uni-farm-connect-x-lukyanenkolawfa.replit.appsisko.replit.dev',  // –ª–æ–∫–∞–ª—å–Ω—ã–π
    'https://uni-farm-connect-2-misterxuniverse.replit.app'  // production
  ];

  for (const baseUrl of urls) {
    console.log(`\n----- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${baseUrl} -----`);
    const endpoint = '/api/uni-farming/deposit';
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º amount –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
    const testData = {
      user_id: 1,
      amount: "5" // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: amount —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ —á–∏—Å–ª–æ
    };
    
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ${baseUrl}${endpoint}`);
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', testData);
    
    try {
      const response = await fetch(`${baseUrl}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(testData)
      });
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
      console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
      console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:');
      for (const [key, value] of response.headers.entries()) {
        console.log(`  ${key}: ${value}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç
      const textResponse = await response.text();
      console.log('\n–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç):', textResponse);
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      try {
        const jsonResponse = JSON.parse(textResponse);
        console.log('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (JSON):', JSON.stringify(jsonResponse, null, 2));
        console.log('‚úÖ JSON –≤–∞–ª–∏–¥–Ω—ã–π!');
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
        
        // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:');
        console.log('–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', textResponse.length, '—Å–∏–º–≤–æ–ª–æ–≤');
        
        if (textResponse.length === 0) {
          console.error('  - –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        } else {
          console.log('  - –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', JSON.stringify(textResponse.substring(0, 100)));
          console.log('  - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', JSON.stringify(textResponse.substring(textResponse.length - 100)));
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ HTML –≤ –æ—Ç–≤–µ—Ç–µ
          if (textResponse.includes('<html') || textResponse.includes('<!DOCTYPE')) {
            console.error('  - –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML –≤–º–µ—Å—Ç–æ JSON');
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ BOM
          const hasInvisibleChars = /[\u0000-\u001F\u007F-\u009F\uFEFF]/.test(textResponse);
          if (hasInvisibleChars) {
            console.error('  - –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ BOM');
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
          if (textResponse.includes('}{')) {
            console.error('  - –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ JSON –≤ –æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ');
          }
        }
      }
    } catch (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', fetchError.message);
    }
  }
}

testDeposit();