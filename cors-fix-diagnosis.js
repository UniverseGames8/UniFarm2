/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å CORS –≤ Express
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ cookies
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node cors-fix-diagnosis.js
 */

import { createRequire } from 'module';
const require = createRequire(import.meta.url);
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const filesToCheck = [
  './server/index.ts',
  './server/routes.ts',
  './server/app.ts',
  './server/middleware/cors.ts',
  './server/middleware/session.ts',
  './server/vite.ts'
];

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
console.log(`${colors.cyan}[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞]${colors.reset} üîç –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CORS`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
function checkFileForPatterns(filePath, patterns) {
  try {
    if (!fs.existsSync(filePath)) {
      return {
        exists: false,
        message: `–§–∞–π–ª ${filePath} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`
      };
    }
    
    const content = fs.readFileSync(filePath, 'utf-8');
    const results = {};
    
    for (const [key, pattern] of Object.entries(patterns)) {
      results[key] = pattern.test(content);
    }
    
    return {
      exists: true,
      matches: results,
      content: content
    };
  } catch (error) {
    return {
      exists: false,
      error: error.message
    };
  }
}

// –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫
const corsPatterns = {
  cors: /cors\(/i,
  usesCors: /app\.use\(\s*cors/i,
  credentialsTrue: /credentials\s*:\s*true/i,
  allowOrigin: /origin\s*:/i,
  allowOriginStar: /origin\s*:\s*['"]?\*['"]?/i,
  allowOriginFunction: /origin\s*:\s*(?:function|\()/i,
  allowHeaders: /allowedHeaders|allowHeaders|Access-Control-Allow-Headers/i,
  allowTelegramHeaders: /telegram|init-data/i,
  enableCors: /enableCors|setupCors|configureCors/i
};

// –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–π
const sessionPatterns = {
  session: /express-session|cookie-session|session\(/i,
  secure: /secure\s*:\s*true/i,
  sameSite: /sameSite\s*:/i,
  sameSiteNone: /sameSite\s*:\s*['"]?none['"]?/i,
  httpOnly: /httpOnly\s*:\s*true/i,
  cookieDomain: /domain\s*:/i,
  memoryStore: /MemoryStore|new\s+session\.Store/i
};

// –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CORS
async function analyzeCorsSettings() {
  log('\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CORS...', colors.cyan);
  
  const corsResults = [];
  const problems = [];
  const detailedFindings = {};
  
  for (const filePath of filesToCheck) {
    const result = checkFileForPatterns(filePath, corsPatterns);
    
    if (result.exists) {
      corsResults.push({
        filePath,
        matches: result.matches
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (result.matches.cors || result.matches.usesCors) {
        detailedFindings[filePath] = {
          hasCors: result.matches.cors || result.matches.usesCors,
          corsConfiguration: extractCorsConfiguration(result.content),
          credentialsEnabled: result.matches.credentialsTrue,
          hasAllowOrigin: result.matches.allowOrigin,
          hasStarOrigin: result.matches.allowOriginStar,
          hasAllowHeaders: result.matches.allowHeaders,
          hasTelegramHeaders: result.matches.allowTelegramHeaders
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
      if ((result.matches.cors || result.matches.usesCors) && !result.matches.credentialsTrue) {
        problems.push({
          filePath, 
          problem: 'CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±–µ–∑ credentials: true, —á—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É cookies',
          location: findLineInContent(result.content, /cors\(/),
          severity: 'critical'
        });
      }
      
      if (result.matches.credentialsTrue && result.matches.allowOriginStar) {
        problems.push({
          filePath,
          problem: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: credentials: true –∏ origin: "*", —á—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É CORS',
          location: findLineInContent(result.content, /origin\s*:\s*['"]?\*['"]?/),
          severity: 'critical'
        });
      }
      
      if ((result.matches.cors || result.matches.usesCors) && !result.matches.allowTelegramHeaders) {
        problems.push({
          filePath,
          problem: 'CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±–µ–∑ —è–≤–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Telegram (telegram-data, x-telegram-data –∏ —Ç.–¥.)',
          location: findLineInContent(result.content, /allowedHeaders|allowHeaders/),
          severity: 'high'
        });
      }
    }
  }
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ CORS
  const filesWithCors = corsResults.filter(result => 
    result.matches.cors || result.matches.usesCors || result.matches.enableCors
  ).length;
  
  log(`\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìä –ù–∞–π–¥–µ–Ω–æ ${filesWithCors} —Ñ–∞–π–ª–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ CORS`, colors.cyan);
  
  // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö CORS
  for (const [filePath, details] of Object.entries(detailedFindings)) {
    log(`\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìÑ –§–∞–π–ª: ${filePath}`, colors.cyan);
    log(`  - CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${details.hasCors ? '‚úÖ' : '‚ùå'}`, details.hasCors ? colors.green : colors.red);
    
    if (details.corsConfiguration) {
      log(`  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS:`, colors.yellow);
      log(`${details.corsConfiguration}`, colors.reset);
    }
    
    log(`  - Credentials –≤–∫–ª—é—á–µ–Ω—ã: ${details.credentialsEnabled ? '‚úÖ' : '‚ùå'}`, details.credentialsEnabled ? colors.green : colors.red);
    log(`  - Origin –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${details.hasAllowOrigin ? '‚úÖ' : '‚ùå'}`, details.hasAllowOrigin ? colors.green : colors.red);
    
    if (details.hasAllowOrigin) {
      if (details.hasStarOrigin) {
        log(`  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è wildcard origin "*": ‚ö†Ô∏è`, colors.yellow);
        log(`    –≠—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å credentials: true!`, colors.red);
      }
    }
    
    log(`  - Headers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: ${details.hasAllowHeaders ? '‚úÖ' : '‚ùå'}`, details.hasAllowHeaders ? colors.green : colors.red);
    log(`  - Telegram –∑–∞–≥–æ–ª–æ–≤–∫–∏: ${details.hasTelegramHeaders ? '‚úÖ' : '‚ùå'}`, details.hasTelegramHeaders ? colors.green : colors.red);
  }
  
  // –í—ã–≤–æ–¥–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (problems.length > 0) {
    log('\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:', colors.yellow);
    
    const criticalProblems = problems.filter(p => p.severity === 'critical');
    const highProblems = problems.filter(p => p.severity === 'high');
    const otherProblems = problems.filter(p => p.severity !== 'critical' && p.severity !== 'high');
    
    if (criticalProblems.length > 0) {
      log('\nüî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:', colors.red);
      criticalProblems.forEach((problem, index) => {
        log(`${index + 1}. ${problem.problem}`, colors.red);
        log(`   –§–∞–π–ª: ${problem.filePath}${problem.location ? `, —Å—Ç—Ä–æ–∫–∞: ${problem.location}` : ''}`, colors.yellow);
      });
    }
    
    if (highProblems.length > 0) {
      log('\nüü† –í–∞–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:', colors.yellow);
      highProblems.forEach((problem, index) => {
        log(`${index + 1}. ${problem.problem}`, colors.yellow);
        log(`   –§–∞–π–ª: ${problem.filePath}${problem.location ? `, —Å—Ç—Ä–æ–∫–∞: ${problem.location}` : ''}`, colors.yellow);
      });
    }
    
    if (otherProblems.length > 0) {
      log('\nüü° –î—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:', colors.white);
      otherProblems.forEach((problem, index) => {
        log(`${index + 1}. ${problem.problem}`, colors.white);
        log(`   –§–∞–π–ª: ${problem.filePath}${problem.location ? `, —Å—Ç—Ä–æ–∫–∞: ${problem.location}` : ''}`, colors.yellow);
      });
    }
  } else {
    log('\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ CORS –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ', colors.green);
  }
  
  return {
    filesWithCors,
    problems,
    detailedFindings
  };
}

// –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–π
async function analyzeSessionSettings() {
  log('\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–π...', colors.cyan);
  
  const sessionResults = [];
  const problems = [];
  const detailedFindings = {};
  
  for (const filePath of filesToCheck) {
    const result = checkFileForPatterns(filePath, sessionPatterns);
    
    if (result.exists) {
      sessionResults.push({
        filePath,
        matches: result.matches
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (result.matches.session) {
        detailedFindings[filePath] = {
          hasSession: result.matches.session,
          sessionConfiguration: extractSessionConfiguration(result.content),
          secureEnabled: result.matches.secure,
          hasSameSite: result.matches.sameSite,
          hasSameSiteNone: result.matches.sameSiteNone,
          httpOnlyEnabled: result.matches.httpOnly,
          hasCookieDomain: result.matches.cookieDomain,
          usesMemoryStore: result.matches.memoryStore
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
      if (result.matches.session && !result.matches.secure) {
        problems.push({
          filePath,
          problem: '–°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –±–µ–∑ —Ñ–ª–∞–≥–∞ secure: true, —á—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è production',
          location: findLineInContent(result.content, /session\(/),
          severity: 'high'
        });
      }
      
      if (result.matches.session && !result.matches.sameSite) {
        problems.push({
          filePath,
          problem: '–°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ sameSite, —á—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å CORS',
          location: findLineInContent(result.content, /session\(/),
          severity: 'high'
        });
      }
      
      if (result.matches.session && !result.matches.httpOnly) {
        problems.push({
          filePath,
          problem: '–°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –±–µ–∑ —Ñ–ª–∞–≥–∞ httpOnly: true, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
          location: findLineInContent(result.content, /session\(/),
          severity: 'medium'
        });
      }
      
      if (result.matches.session && result.matches.memoryStore) {
        problems.push({
          filePath,
          problem: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MemoryStore –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π, —á—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è production',
          location: findLineInContent(result.content, /MemoryStore|new\s+session\.Store/),
          severity: 'medium'
        });
      }
    }
  }
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Å—Å–∏–π
  const filesWithSession = sessionResults.filter(result => result.matches.session).length;
  
  log(`\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìä –ù–∞–π–¥–µ–Ω–æ ${filesWithSession} —Ñ–∞–π–ª–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Å—Å–∏–π`, colors.cyan);
  
  // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Å—Å–∏–π
  for (const [filePath, details] of Object.entries(detailedFindings)) {
    log(`\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìÑ –§–∞–π–ª: ${filePath}`, colors.cyan);
    log(`  - –°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: ${details.hasSession ? '‚úÖ' : '‚ùå'}`, details.hasSession ? colors.green : colors.red);
    
    if (details.sessionConfiguration) {
      log(`  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏:`, colors.yellow);
      log(`${details.sessionConfiguration}`, colors.reset);
    }
    
    log(`  - Secure –≤–∫–ª—é—á–µ–Ω: ${details.secureEnabled ? '‚úÖ' : '‚ùå'}`, details.secureEnabled ? colors.green : colors.red);
    log(`  - SameSite –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${details.hasSameSite ? '‚úÖ' : '‚ùå'}`, details.hasSameSite ? colors.green : colors.red);
    
    if (details.hasSameSite) {
      if (details.hasSameSiteNone) {
        log(`  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è sameSite: 'none': ‚úÖ`, colors.green);
      } else {
        log(`  - SameSite –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 'none', –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å CORS: ‚ö†Ô∏è`, colors.yellow);
      }
    }
    
    log(`  - HttpOnly –≤–∫–ª—é—á–µ–Ω: ${details.httpOnlyEnabled ? '‚úÖ' : '‚ùå'}`, details.httpOnlyEnabled ? colors.green : colors.red);
    log(`  - Domain –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${details.hasCookieDomain ? '‚úÖ' : '‚ùå'}`, details.hasCookieDomain ? colors.green : colors.yellow);
    log(`  - MemoryStore: ${details.usesMemoryStore ? '‚ö†Ô∏è' : '‚úÖ'}`, details.usesMemoryStore ? colors.yellow : colors.green);
  }
  
  // –í—ã–≤–æ–¥–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (problems.length > 0) {
    log('\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Å—Å–∏—è–º–∏:', colors.yellow);
    
    const highProblems = problems.filter(p => p.severity === 'high');
    const mediumProblems = problems.filter(p => p.severity === 'medium');
    const lowProblems = problems.filter(p => p.severity === 'low');
    
    if (highProblems.length > 0) {
      log('\nüü† –í–∞–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:', colors.yellow);
      highProblems.forEach((problem, index) => {
        log(`${index + 1}. ${problem.problem}`, colors.yellow);
        log(`   –§–∞–π–ª: ${problem.filePath}${problem.location ? `, —Å—Ç—Ä–æ–∫–∞: ${problem.location}` : ''}`, colors.yellow);
      });
    }
    
    if (mediumProblems.length > 0) {
      log('\nüü° –ü—Ä–æ–±–ª–µ–º—ã —Å—Ä–µ–¥–Ω–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏:', colors.white);
      mediumProblems.forEach((problem, index) => {
        log(`${index + 1}. ${problem.problem}`, colors.white);
        log(`   –§–∞–π–ª: ${problem.filePath}${problem.location ? `, —Å—Ç—Ä–æ–∫–∞: ${problem.location}` : ''}`, colors.yellow);
      });
    }
    
    if (lowProblems.length > 0) {
      log('\nüü¢ –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:', colors.green);
      lowProblems.forEach((problem, index) => {
        log(`${index + 1}. ${problem.problem}`, colors.green);
        log(`   –§–∞–π–ª: ${problem.filePath}${problem.location ? `, —Å—Ç—Ä–æ–∫–∞: ${problem.location}` : ''}`, colors.yellow);
      });
    }
  } else {
    log('\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Å—Å–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ', colors.green);
  }
  
  return {
    filesWithSession,
    problems,
    detailedFindings
  };
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CORS –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
function extractCorsConfiguration(content) {
  const corsRegex = /app\.use\(\s*cors\(([^;]*)\)\s*\)/s;
  const corsOptionsRegex = /const\s+corsOptions\s*=\s*({[^;]*})/s;
  
  let corsConfig = null;
  
  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä—è–º—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ app.use(cors(...))
  const corsMatch = content.match(corsRegex);
  if (corsMatch && corsMatch[1]) {
    corsConfig = corsMatch[1].trim();
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä—è–º—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∏—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  if (!corsConfig) {
    const corsOptionsMatch = content.match(corsOptionsRegex);
    if (corsOptionsMatch && corsOptionsMatch[1]) {
      corsConfig = corsOptionsMatch[1].trim();
    }
  }
  
  return corsConfig;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
function extractSessionConfiguration(content) {
  const sessionRegex = /app\.use\(\s*session\(([^;]*)\)\s*\)/s;
  const sessionOptionsRegex = /const\s+sessionConfig\s*=\s*({[^;]*})/s;
  
  let sessionConfig = null;
  
  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä—è–º—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ app.use(session(...))
  const sessionMatch = content.match(sessionRegex);
  if (sessionMatch && sessionMatch[1]) {
    sessionConfig = sessionMatch[1].trim();
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä—è–º—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∏—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  if (!sessionConfig) {
    const sessionOptionsMatch = content.match(sessionOptionsRegex);
    if (sessionOptionsMatch && sessionOptionsMatch[1]) {
      sessionConfig = sessionOptionsMatch[1].trim();
    }
  }
  
  return sessionConfig;
}

// –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞
function findLineInContent(content, pattern) {
  const lines = content.split('\n');
  for (let i = 0; i < lines.length; i++) {
    if (pattern.test(lines[i])) {
      return i + 1;
    }
  }
  return null;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CORS
function generateCorrectCorsConfig() {
  return `const corsOptions = {
  origin: function(origin, callback) {
    const allowedOrigins = [
      'https://web.telegram.org',
      'https://t.me',
      // –¥—Ä—É–≥–∏–µ –Ω—É–∂–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    ];
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
    // –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–æ–π CORS'));
    }
  },
  credentials: true,
  allowedHeaders: [
    'Content-Type', 
    'Authorization',
    'X-Requested-With',
    'X-Telegram-Init-Data',
    'Telegram-Init-Data',
    'X-Telegram-Data',
    'Telegram-Data',
    'X-Telegram-Auth',
    'X-Telegram-User-Id',
    'X-Telegram-Start-Param'
  ],
  methods: ['GET', 'PUT', 'POST', 'DELETE', 'OPTIONS'],
  preflightContinue: false,
  optionsSuccessStatus: 204
};

app.use(cors(corsOptions));`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
function generateCorrectSessionConfig() {
  return `const sessionConfig = {
  secret: 'your-secure-secret-key',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production', // true –≤ production
    httpOnly: true,
    sameSite: 'none', // –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
    maxAge: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
  },
  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ MemoryStore –≤ production:
  // store: new PgStore({
  //   conString: process.env.DATABASE_URL,
  //   tableName: 'sessions' // —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  // }),
};

app.use(session(sessionConfig));`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
function generateRecommendations(corsResults, sessionResults) {
  log('\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:', colors.cyan);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ CORS
  if (corsResults.problems.length > 0) {
    log('\n1. –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å CORS:', colors.yellow);
    
    const hasCriticalCorsProblems = corsResults.problems.some(p => p.severity === 'critical');
    
    if (hasCriticalCorsProblems) {
      log('\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CORS:', colors.green);
      log(generateCorrectCorsConfig(), colors.reset);
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ CORS
    if (corsResults.problems.some(p => p.problem.includes('credentials: true'))) {
      log('\n- –í–∫–ª—é—á–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É credentials –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies:', colors.yellow);
      log('  credentials: true,', colors.green);
    }
    
    if (corsResults.problems.some(p => p.problem.includes('origin: "*"'))) {
      log('\n- –ó–∞–º–µ–Ω–∏—Ç–µ wildcard origin –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤:', colors.yellow);
      log('  origin: [\'https://web.telegram.org\', \'https://t.me\'],', colors.green);
    }
    
    if (corsResults.problems.some(p => p.problem.includes('–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Telegram'))) {
      log('\n- –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Telegram –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö:', colors.yellow);
      log('  allowedHeaders: [\'Content-Type\', \'Authorization\', \'X-Telegram-Init-Data\', \'Telegram-Init-Data\'],', colors.green);
    }
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ—Å—Å–∏—è–º
  if (sessionResults.problems.length > 0) {
    log('\n2. –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏—è–º–∏:', colors.yellow);
    
    const hasHighSessionProblems = sessionResults.problems.some(p => p.severity === 'high');
    
    if (hasHighSessionProblems) {
      log('\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏:', colors.green);
      log(generateCorrectSessionConfig(), colors.reset);
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ—Å—Å–∏—è–º
    if (sessionResults.problems.some(p => p.problem.includes('secure: true'))) {
      log('\n- –í–∫–ª—é—á–∏—Ç–µ —Ñ–ª–∞–≥ secure –¥–ª—è cookies:', colors.yellow);
      log('  cookie: { secure: true, ... },', colors.green);
    }
    
    if (sessionResults.problems.some(p => p.problem.includes('sameSite'))) {
      log('\n- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ sameSite: \'none\' –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Telegram:', colors.yellow);
      log('  cookie: { sameSite: \'none\', ... },', colors.green);
    }
    
    if (sessionResults.problems.some(p => p.problem.includes('httpOnly: true'))) {
      log('\n- –í–∫–ª—é—á–∏—Ç–µ —Ñ–ª–∞–≥ httpOnly –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', colors.yellow);
      log('  cookie: { httpOnly: true, ... },', colors.green);
    }
    
    if (sessionResults.problems.some(p => p.problem.includes('MemoryStore'))) {
      log('\n- –ó–∞–º–µ–Ω–∏—Ç–µ MemoryStore –Ω–∞ PgStore –¥–ª—è production:', colors.yellow);
      log('  store: new PgStore({ conString: process.env.DATABASE_URL }),', colors.green);
    }
  }
  
  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  log('\n3. –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', colors.cyan);
  log('- –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É sessions –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π', colors.white);
  log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ middleware –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (CORS –ø–µ—Ä–µ–¥ session)', colors.white);
  log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç credentials –ø—Ä–∏ –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö', colors.white);
  log('- –í Telegram Mini App, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ fetch —Å { credentials: \'include\' }', colors.white);
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
async function runAllChecks() {
  try {
    // –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CORS
    const corsResults = await analyzeCorsSettings();
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–π
    const sessionResults = await analyzeSessionSettings();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    generateRecommendations(corsResults, sessionResults);
    
    log('\n[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', colors.cyan);
    
  } catch (error) {
    log(`[CORS –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: ${error.message}`, colors.red);
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
runAllChecks();