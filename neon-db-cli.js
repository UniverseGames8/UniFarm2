#!/usr/bin/env node
/**
 * CLI-—É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Neon DB –≤ –ø—Ä–æ–µ–∫—Ç–µ UniFarm
 * 
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å Neon DB:
 * - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Neon DB
 * - –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
 * - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

import { spawn } from 'child_process';
import fs from 'fs';
import { createInterface } from 'readline';
import path from 'path';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
function runScript(scriptPath, args = []) {
  return new Promise((resolve, reject) => {
    const process = spawn('node', [scriptPath, ...args], {
      stdio: 'inherit'
    });
    
    process.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
      }
    });
    
    process.on('error', (error) => {
      reject(error);
    });
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ readline
function createReadline() {
  return createInterface({
    input: process.stdin,
    output: process.stdout
  });
}

// –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function askQuestion(rl, question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ .env.neon
async function checkEnvFile() {
  if (!fs.existsSync('.env.neon')) {
    log('‚ö†Ô∏è –§–∞–π–ª .env.neon –Ω–µ –Ω–∞–π–¥–µ–Ω!', colors.yellow);
    
    const rl = createReadline();
    
    const answer = await askQuestion(rl, '–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env.neon —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? (y/n): ');
    
    if (answer.toLowerCase() === 'y') {
      const defaultContent = `# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB
DATABASE_PROVIDER=neon
USE_LOCAL_DB_ONLY=false
FORCE_NEON_DB=true
DISABLE_REPLIT_DB=true
OVERRIDE_DB_PROVIDER=neon
DISABLE_AUTO_PARTITIONING=true

# URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
DATABASE_URL=postgresql://your_username:your_password@your-endpoint.neon.tech/neondb?sslmode=require
`;
      
      fs.writeFileSync('.env.neon', defaultContent);
      log('‚úÖ –§–∞–π–ª .env.neon —Å–æ–∑–¥–∞–Ω. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ, —É–∫–∞–∑–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π DATABASE_URL', colors.green);
      
      const editAnswer = await askQuestion(rl, '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å–µ–π—á–∞—Å? (y/n): ');
      
      if (editAnswer.toLowerCase() === 'y') {
        const editor = process.env.EDITOR || 'nano';
        spawn(editor, ['.env.neon'], {
          stdio: 'inherit',
          shell: true
        }).on('close', () => {
          log('‚úÖ –§–∞–π–ª .env.neon –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω', colors.green);
          rl.close();
        });
      } else {
        rl.close();
      }
    } else {
      log('‚ùå –ë–µ–∑ —Ñ–∞–π–ª–∞ .env.neon —Ä–∞–±–æ—Ç–∞ —Å Neon DB –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞', colors.red);
      rl.close();
      return false;
    }
  }
  
  return true;
}

// –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu() {
  const rl = createReadline();
  
  while (true) {
    log('\nüåü UniFarm Neon DB CLI üåü', colors.magenta);
    log('----------------------------', colors.magenta);
    log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB', colors.reset);
    log('2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', colors.reset);
    log('3. –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions', colors.reset);
    log('4. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', colors.reset);
    log('5. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Neon DB', colors.reset);
    log('6. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Neon DB (.env.neon)', colors.reset);
    log('7. –°–ø—Ä–∞–≤–∫–∞ –ø–æ Neon DB', colors.reset);
    log('8. –í—ã—Ö–æ–¥', colors.reset);
    log('----------------------------', colors.magenta);
    
    const answer = await askQuestion(rl, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-8): ');
    
    switch (answer) {
      case '1':
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try {
          await runScript('check-neon-db.js');
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`, colors.red);
        }
        break;
        
      case '2':
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        try {
          await runScript('init-neon-db.js');
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, colors.red);
        }
        break;
        
      case '3':
        // –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        try {
          log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–∏—Ç –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—É transactions!', colors.yellow);
          const confirm = await askQuestion(rl, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ');
          
          if (confirm.toLowerCase() === 'y') {
            await runScript('create-neon-partitions.js');
          } else {
            log('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', colors.yellow);
          }
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, colors.red);
        }
        break;
        
      case '4':
        // –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        try {
          await runScript('test-neon-integration.js');
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: ${error.message}`, colors.red);
        }
        break;
        
      case '5':
        // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try {
          log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Neon DB...', colors.blue);
          log('–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C', colors.yellow);
          
          if (fs.existsSync('./start-with-neon.sh')) {
            spawn('./start-with-neon.sh', [], {
              stdio: 'inherit',
              shell: true
            });
          } else {
            await runScript('neon-start.js');
          }
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`, colors.red);
        }
        break;
        
      case '6':
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        const editor = process.env.EDITOR || 'nano';
        spawn(editor, ['.env.neon'], {
          stdio: 'inherit',
          shell: true
        });
        break;
        
      case '7':
        // –°–ø—Ä–∞–≤–∫–∞
        if (fs.existsSync('NEON_DB_USAGE.md')) {
          log('\nüìö –°–æ–¥–µ—Ä–∂–∏–º–æ–µ NEON_DB_USAGE.md:', colors.blue);
          const content = fs.readFileSync('NEON_DB_USAGE.md', 'utf8');
          console.log(content);
        } else {
          log('‚ùå –§–∞–π–ª NEON_DB_USAGE.md –Ω–µ –Ω–∞–π–¥–µ–Ω', colors.red);
        }
        
        await askQuestion(rl, '–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
        break;
        
      case '8':
        // –í—ã—Ö–æ–¥
        log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!', colors.green);
        rl.close();
        return;
        
      default:
        log('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ—Ç 1 –¥–æ 8', colors.yellow);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env.neon
    const envExists = await checkEnvFile();
    
    if (!envExists) {
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await showMainMenu();
  } catch (error) {
    log(`üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
    console.error(error);
    process.exit(1);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º dirname –¥–ª—è ES modules
function dirname(path) {
  return new URL('.', path).pathname;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
main();