/**
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã Drizzle –≤ PostgreSQL –Ω–∞ Replit
 * 
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Drizzle ORM –±–µ–∑ drizzle-kit
 * –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ä–µ–¥—ã Replit —Å ESM –º–æ–¥—É–ª—è–º–∏
 */

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');
const dotenv = require('dotenv');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

/**
 * –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–≤–µ—Ç–æ–º
 */
function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.replit
 */
function loadEnvFromReplit() {
  const envPath = path.join(process.cwd(), '.env.replit');
  
  if (!fs.existsSync(envPath)) {
    log(`‚ùå –§–∞–π–ª .env.replit –Ω–µ –Ω–∞–π–¥–µ–Ω!`, colors.red);
    process.exit(1);
  }
  
  log(`üìù –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.replit...`, colors.blue);
  const config = dotenv.parse(fs.readFileSync(envPath));
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  for (const key in config) {
    process.env[key] = config[key];
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
  process.env.DATABASE_PROVIDER = 'replit';
  process.env.USE_LOCAL_DB_ONLY = 'true';
  
  log(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env.replit`, colors.green);
  return config;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL
 */
function checkPostgreSQL() {
  try {
    const pgSocketPath = process.env.PGSOCKET || path.join(process.env.HOME, '.postgresql', 'sockets');
    execSync(`PGHOST=${pgSocketPath} PGUSER=${process.env.PGUSER} psql -d postgres -c "SELECT 1" -t`);
    return true;
  } catch (error) {
    return false;
  }
}

/**
 * –ó–∞–ø—É—Å–∫ PostgreSQL –Ω–∞ Replit
 */
function startPostgreSQL() {
  try {
    log(`üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL...`, colors.blue);
    execSync('bash ./start-postgres.sh', { stdio: 'inherit' });
    return true;
  } catch (error) {
    log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
 */
function createMigrationScript() {
  const scriptPath = path.join(process.cwd(), 'tmp-migration.ts');
  const scriptContent = `
import { Pool } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import { migrate } from 'drizzle-orm/node-postgres/migrator';
import * as schema from './shared/schema';

async function main() {
  console.log('Connecting to PostgreSQL...');
  
  const pool = new Pool({
    user: process.env.PGUSER || 'runner',
    host: process.env.PGSOCKET || process.env.HOME + '/.postgresql/sockets',
    database: process.env.PGDATABASE || 'postgres',
    password: process.env.PGPASSWORD || '',
    port: parseInt(process.env.PGPORT || '5432')
  });
  
  console.log('Creating Drizzle instance...');
  const db = drizzle(pool, { schema });
  
  console.log('Pushing schema to database...');
  
  try {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    console.log('Beginning schema synchronization...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏–∑ —Å—Ö–µ–º—ã
    const tables = Object.keys(schema).filter(key => {
      const obj = schema[key];
      return obj && obj._ && obj._.name;
    });
    console.log('Tables to create:', tables.join(', '));
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –Ω–∞–ø—Ä—è–º—É—é
    for (const tableName of tables) {
      const table = schema[tableName];
      if (table && table._) {
        try {
          // –ù–∞–ø–µ—á–∞—Ç–∞–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
          console.log('Creating table:', table._.name);
        } catch (error) {
          console.error('Error creating table:', error);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const result = await pool.query('SELECT table_name FROM information_schema.tables WHERE table_schema = $1', ['public']);
    console.log('Tables after migration:', result.rows.map(r => r.table_name).join(', '));
    
    console.log('Schema synchronization completed successfully!');
  } catch (error) {
    console.error('Error during schema synchronization:', error);
  } finally {
    await pool.end();
  }
}

main().catch(console.error);
`;

  fs.writeFileSync(scriptPath, scriptContent);
  log(`‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: ${scriptPath}`, colors.green);
  return scriptPath;
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ npx drizzle-kit push
 */
function runDrizzlePush() {
  try {
    log(`\n${colors.blue}=== –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ drizzle-kit ===${colors.reset}`);
    execSync('npx drizzle-kit push:pg', { stdio: 'inherit' });
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ drizzle-kit push: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
function checkMigrationResults() {
  try {
    const pgSocketPath = process.env.PGSOCKET || path.join(process.env.HOME, '.postgresql', 'sockets');
    const result = execSync(`PGHOST=${pgSocketPath} PGUSER=${process.env.PGUSER} psql -d postgres -c "
      SELECT table_name FROM information_schema.tables 
      WHERE table_schema='public' ORDER BY table_name
    "`).toString();
    
    log(`üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`, colors.cyan);
    console.log(result);
    
    // –ü–æ–¥—Å—á–µ—Ç —Ç–∞–±–ª–∏—Ü
    const tables = result.split('\n')
      .filter(line => line.trim() && !line.includes('---') && !line.includes('table_name'))
      .map(line => line.trim());
    
    log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${tables.length}`, colors.blue);
    
    return tables.length > 0;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  log(`\n${colors.magenta}=============================================${colors.reset}`);
  log(`${colors.magenta}= –ú–ò–ì–†–ê–¶–ò–Ø –°–•–ï–ú–´ –í POSTGRESQL –ù–ê REPLIT =${colors.reset}`);
  log(`${colors.magenta}=============================================${colors.reset}\n`);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envConfig = loadEnvFromReplit();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ PostgreSQL
  if (!checkPostgreSQL()) {
    log(`‚ö†Ô∏è PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`, colors.yellow);
    if (!startPostgreSQL()) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.`, colors.red);
      process.exit(1);
    }
  } else {
    log(`‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.`, colors.green);
  }
  
  // –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ drizzle-kit
  if (!runDrizzlePush()) {
    log(`‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ drizzle-kit –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é.`, colors.yellow);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
  if (checkMigrationResults()) {
    log(`\n${colors.green}‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${colors.reset}`);
  } else {
    log(`\n${colors.yellow}‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏${colors.reset}`);
  }
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  log(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`, colors.red);
  console.error(error);
  process.exit(1);
});