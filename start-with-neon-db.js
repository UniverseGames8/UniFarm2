/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Neon DB
 * –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

import 'dotenv/config';
import { spawn } from 'child_process';
import { createInterface } from 'readline';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB
process.env.DATABASE_PROVIDER = 'neon';
process.env.USE_LOCAL_DB_ONLY = 'false';
process.env.FORCE_NEON_DB = 'true';

let appProcess = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints
async function testEndpoints(baseUrl = 'https://uni-farm-connect-x-lukyanenkolawfa.replit.app') {
  log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints...', colors.blue);
  
  const endpoints = [
    { path: '/api/system/status', description: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã' },
    { path: '/api/auth/check', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' },
    { path: '/api/users/count', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
    { path: '/api/farming/status', description: '–°—Ç–∞—Ç—É—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞' },
  ];
  
  for (const endpoint of endpoints) {
    try {
      log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º: ${endpoint.description} (${endpoint.path})`, colors.cyan);
      const response = await fetch(`${baseUrl}${endpoint.path}`);
      const data = await response.json();
      
      log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`, colors.green);
      log(`–û—Ç–≤–µ—Ç: ${JSON.stringify(data, null, 2)}`, colors.reset);
    } catch (err) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ${endpoint.path}: ${err.message}`, colors.red);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function startApp() {
  return new Promise((resolve, reject) => {
    log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Neon DB...', colors.magenta);
    
    const env = { ...process.env };
    appProcess = spawn('node', ['dist/index.js'], { env, stdio: 'pipe' });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
    appProcess.stdout.on('data', (data) => {
      const output = data.toString();
      process.stdout.write(output);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      if (output.includes('Server is listening') || output.includes('Server running on port')) {
        log('\n‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ', colors.green);
        resolve(true);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    appProcess.stderr.on('data', (data) => {
      const output = data.toString();
      process.stderr.write(`${colors.red}${output}${colors.reset}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      if (output.includes('FATAL ERROR') || output.includes('connection error')) {
        log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', colors.red);
        reject(new Error('Failed to start server'));
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    appProcess.on('close', (code) => {
      if (code !== 0 && code !== null) {
        log(`\n‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –∫–æ–¥–æ–º ${code}`, colors.red);
        reject(new Error(`Process exited with code ${code}`));
      } else {
        log('\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É', colors.yellow);
        resolve(false);
      }
    });
    
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    setTimeout(() => {
      resolve(true); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å—ë OK, –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫
    }, 10000);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∏—Å—Ç–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –≤—ã—Ö–æ–¥–∞
function cleanupAndExit() {
  log('\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...', colors.yellow);
  
  if (appProcess && !appProcess.killed) {
    appProcess.kill();
    appProcess = null;
  }
  
  log('–í—ã—Ö–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞', colors.yellow);
  process.exit(0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', cleanupAndExit);
process.on('SIGTERM', cleanupAndExit);

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Neon DB
  if (!process.env.DATABASE_URL || !process.env.DATABASE_URL.includes('neon')) {
    log('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Neon DB', colors.red);
    log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Neon DB', colors.yellow);
    process.exit(1);
  }
  
  log('üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB:', colors.blue);
  log(`URL: ${process.env.DATABASE_URL.replace(/:[^:]*@/, ':***@')}`, colors.reset);
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const serverStarted = await startApp();
    
    if (serverStarted) {
      // –î–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      log('‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...', colors.yellow);
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
      await testEndpoints();
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å readline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const rl = createInterface({
        input: process.stdin,
        output: process.stdout,
        prompt: 'UniFarm> '
      });
      
      log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', colors.magenta);
      log('  test - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API endpoints', colors.reset);
      log('  exit - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É', colors.reset);
      
      rl.prompt();
      
      rl.on('line', async (line) => {
        const command = line.trim();
        
        if (command === 'test') {
          await testEndpoints();
        } else if (command === 'exit') {
          rl.close();
          cleanupAndExit();
        } else {
          log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`, colors.yellow);
          log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: test, exit', colors.yellow);
        }
        
        rl.prompt();
      });
      
      rl.on('close', () => {
        cleanupAndExit();
      });
    } else {
      log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', colors.red);
      process.exit(1);
    }
  } catch (err) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, colors.red);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(err => {
  log(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, colors.red);
  process.exit(1);
});