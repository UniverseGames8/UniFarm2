/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ª–æ–≥. –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
 * —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
 * 
 * –ó–∞–ø—É—Å–∫: node db-health-check.js
 * 
 * –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: Ctrl+C
 */

import pg from 'pg';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const poolConfig = process.env.DATABASE_URL
  ? { 
      connectionString: process.env.DATABASE_URL,
      ssl: {
        rejectUnauthorized: false
      },
      max: 5,
      idleTimeoutMillis: 60000,
      connectionTimeoutMillis: 10000
    }
  : {
      host: process.env.PGHOST || 'localhost',
      port: parseInt(process.env.PGPORT || '5432'),
      user: process.env.PGUSER || 'postgres',
      password: process.env.PGPASSWORD || '',
      database: process.env.PGDATABASE || 'postgres',
      max: 5,
      idleTimeoutMillis: 60000, 
      connectionTimeoutMillis: 10000
    };

// –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const logFile = path.join(__dirname, 'db-health-check.log');

// –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
let pool = new pg.Pool(poolConfig);

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
pool.on('error', (err) => {
  console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:`, err.message);
  logToFile(`ERROR: ${err.message}`);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª
function logToFile(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `${timestamp}: ${message}\n`;
  
  fs.appendFile(logFile, logMessage, (err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª:', err);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async function checkConnection() {
  let client = null;
  const startTime = Date.now();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞
    client = await pool.connect();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const result = await client.query('SELECT NOW() as current_time');
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    console.log(`[${new Date().toISOString()}] ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms, –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].current_time}`);
    logToFile(`SUCCESS: Response time ${responseTime}ms, server time: ${result.rows[0].current_time}`);
    
    return true;
  } catch (error) {
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}, –≤—Ä–µ–º—è: ${responseTime}ms`);
    logToFile(`FAIL: ${error.message}, time: ${responseTime}ms`);
    
    return false;
  } finally {
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    if (client) {
      try {
        client.release();
      } catch (releaseError) {
        console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:`, releaseError.message);
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
async function runContinuousMonitoring() {
  console.log(`[${new Date().toISOString()}] üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö`);
  console.log(`[${new Date().toISOString()}] üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª: ${logFile}`);
  logToFile('START: –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
  
  let consecutiveFailures = 0;
  let totalChecks = 0;
  let successfulChecks = 0;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  function printStats() {
    const successRate = totalChecks > 0 ? (successfulChecks / totalChecks * 100).toFixed(2) : 0;
    console.log(`[${new Date().toISOString()}] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${successfulChecks}/${totalChecks} —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (${successRate}%)`);
  }
  
  try {
    while (true) {
      totalChecks++;
      const isConnected = await checkConnection();
      
      if (isConnected) {
        successfulChecks++;
        consecutiveFailures = 0;
      } else {
        consecutiveFailures++;
        
        // –ü—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—É–ª
        if (consecutiveFailures >= 3) {
          console.log(`[${new Date().toISOString()}] üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${consecutiveFailures} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...`);
          logToFile(`RECONNECT: Creating new connection pool after ${consecutiveFailures} consecutive failures`);
          
          try {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—É–ª
            await pool.end();
          } catch (endError) {
            console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞:`, endError.message);
          }
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–ª
          pool = new pg.Pool(poolConfig);
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
          consecutiveFailures = 0;
        }
      }
      
      // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
      if (totalChecks % 10 === 0) {
        printStats();
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (10 —Å–µ–∫—É–Ω–¥)
      await new Promise(resolve => setTimeout(resolve, 10000));
    }
  } catch (error) {
    console.error(`[${new Date().toISOString()}] ‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:`, error);
    logToFile(`ERROR: Unexpected error: ${error.message}`);
  } finally {
    printStats();
    logToFile('END: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    try {
      await pool.end();
      console.log(`[${new Date().toISOString()}] üëã –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç`);
    } catch (endError) {
      console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞:`, endError.message);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏ Ctrl+C
process.on('SIGINT', async () => {
  console.log('\n' + `[${new Date().toISOString()}] üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...`);
  logToFile('END: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (SIGINT)');
  
  try {
    await pool.end();
    console.log(`[${new Date().toISOString()}] üëã –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç`);
  } catch (endError) {
    console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞:`, endError.message);
  }
  
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
runContinuousMonitoring();