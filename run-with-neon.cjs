/**
 * –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π dist/index.js –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –î–µ–ª–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é dist/index.js
 * 2. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –µ–≥–æ, –¥–æ–±–∞–≤–ª—è—è –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB
 * 3. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º dist/index.js
 * 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
 */

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

const distIndexPath = path.join(process.cwd(), 'dist', 'index.js');
const backupPath = path.join(process.cwd(), 'dist', 'index.js.backup');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';

console.log('üöÄ –ó–∞–ø—É—Å–∫ UniFarm —Å –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ú –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Neon DB');
console.log('‚úÖ DATABASE_PROVIDER =', process.env.DATABASE_PROVIDER);
console.log('‚úÖ FORCE_NEON_DB =', process.env.FORCE_NEON_DB);
console.log('‚úÖ DISABLE_REPLIT_DB =', process.env.DISABLE_REPLIT_DB);

function restoreOriginal() {
  try {
    if (fs.existsSync(backupPath)) {
      fs.copyFileSync(backupPath, distIndexPath);
      fs.unlinkSync(backupPath);
      console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π dist/index.js');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  restoreOriginal();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  restoreOriginal();
  process.exit(0);
});

// –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
try {
  if (fs.existsSync(distIndexPath)) {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ dist/index.js...');
    fs.copyFileSync(distIndexPath, backupPath);
    
    // –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    let content = fs.readFileSync(distIndexPath, 'utf8');
    
    // –ö–æ–¥ –¥–ª—è –∏–Ω–∂–µ–∫—Ü–∏–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Neon DB
    const injectionCode = `
// INJECTED BY run-with-neon.cjs
// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Neon DB
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';
console.log('[INJECTED] üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï NEON DB');
`;
    
    // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ - –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤, –Ω–æ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
    const importPattern = /import\s+.*?from\s+['"].*?['"]/g;
    const importMatches = [...content.matchAll(importPattern)];
    
    if (importMatches.length > 0) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç
      const lastImport = importMatches[importMatches.length - 1];
      const lastImportPos = lastImport.index + lastImport[0].length;
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
      content = content.slice(0, lastImportPos) + 
                '\n' + injectionCode + 
                content.slice(lastImportPos);
    } else {
      // –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
      content = injectionCode + content;
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(distIndexPath, content);
    console.log('‚úÖ –§–∞–π–ª dist/index.js —É—Å–ø–µ—à–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB');
  } else {
    console.error('‚ùå –§–∞–π–ª dist/index.js –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
  }
} catch (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:', err.message);
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
console.log('üì¶ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º...');
const child = spawn('node', ['dist/index.js'], {
  stdio: 'inherit',
  env: process.env
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
child.on('close', (code) => {
  console.log(`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
  restoreOriginal();
  process.exit(code);
});

child.on('error', (err) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: ${err.message}`);
  restoreOriginal();
  process.exit(1);
});