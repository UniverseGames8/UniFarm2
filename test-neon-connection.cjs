/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
require('dotenv').config({ path: '.env.neon' });
const { Pool } = require('pg');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m'
};

function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

async function testNeonDbConnection() {
  log('='.repeat(60), colors.blue);
  log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö NEON DB', colors.bright + colors.blue);
  log('='.repeat(60), colors.blue);
  
  const CONNECTION_STRING = process.env.DATABASE_URL;
  if (!CONNECTION_STRING) {
    log('‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.', colors.red);
    log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.neon', colors.yellow);
    return;
  }
  
  log(`üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${CONNECTION_STRING.replace(/:[^:]*@/, ':***@')}`, colors.yellow);
  
  const pool = new Pool({
    connectionString: CONNECTION_STRING,
    ssl: {
      rejectUnauthorized: false
    }
  });
  
  try {
    log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...', colors.yellow);
    const timeResult = await pool.query('SELECT NOW() as time');
    log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', colors.green);
    log(`‚è∞ –í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${timeResult.rows[0].time}`, colors.green);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
    log('\nüìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', colors.blue);
    const tablesResult = await pool.query(`
      SELECT table_name, 
             (SELECT COUNT(*) FROM information_schema.columns 
              WHERE table_name = t.table_name AND table_schema = 'public') as column_count
      FROM information_schema.tables t
      WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);
    
    if (tablesResult.rows.length === 0) {
      log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!', colors.yellow);
    } else {
      tablesResult.rows.forEach(table => {
        log(`üìù ${table.table_name} (${table.column_count} –∫–æ–ª–æ–Ω–æ–∫)`, colors.green);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const userCount = await pool.query('SELECT COUNT(*) FROM users');
    log(`\nüë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount.rows[0].count}`, colors.blue);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–ø–µ—Ä—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã transactions
    log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã transactions:', colors.blue);
    try {
      const partitionCheck = await pool.query(`
        SELECT p.relname as parent_table,
               c.relname as child_table,
               pg_get_expr(c.relpartbound, c.oid) as partition_expression
        FROM pg_inherits i
        JOIN pg_class p ON i.inhparent = p.oid
        JOIN pg_class c ON i.inhrelid = c.oid
        WHERE p.relname = 'transactions'
      `);
      
      if (partitionCheck.rows.length === 0) {
        log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ transactions –Ω–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!', colors.yellow);
      } else {
        log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${partitionCheck.rows.length} —á–∞—Å—Ç–µ–π:`, colors.green);
        partitionCheck.rows.forEach(partition => {
          log(`   - ${partition.child_table}: ${partition.partition_expression}`, colors.green);
        });
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, colors.red);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö—Ä–∞–Ω–∏–º—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä
    log('\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–∞–Ω–∏–º—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏—è–º–∏:', colors.blue);
    const proceduresResult = await pool.query(`
      SELECT proname, prosrc
      FROM pg_proc 
      WHERE proname LIKE '%partition%'
      AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
    `);
    
    if (proceduresResult.rows.length === 0) {
      log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏—è–º–∏!', colors.yellow);
    } else {
      log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${proceduresResult.rows.length} —Ö—Ä–∞–Ω–∏–º—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä:`, colors.green);
      proceduresResult.rows.forEach(proc => {
        log(`   - ${proc.proname}`, colors.green);
      });
    }
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, colors.red);
    console.error(error);
  } finally {
    await pool.end();
    log('\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', colors.blue);
  }
}

testNeonDbConnection().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});