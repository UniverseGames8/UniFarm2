/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã transactions
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions,
 * —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –¥–∞–Ω–Ω—ã—Ö
 */

const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const { Pool } = require('pg');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

/**
 * –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º
 */
function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.replit
 */
function loadEnvFromReplit() {
  const replitEnvPath = path.join(process.cwd(), '.env.replit');
  
  if (!fs.existsSync(replitEnvPath)) {
    log(`‚ùå –§–∞–π–ª .env.replit –Ω–µ –Ω–∞–π–¥–µ–Ω!`, colors.red);
    process.exit(1);
  }
  
  log(`üìù –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.replit...`, colors.blue);
  const envConfig = dotenv.parse(fs.readFileSync(replitEnvPath));
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Replit PostgreSQL
  envConfig.DATABASE_PROVIDER = 'replit';
  envConfig.USE_LOCAL_DB_ONLY = 'true';
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  for (const key in envConfig) {
    process.env[key] = envConfig[key];
  }
  
  log(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env.replit`, colors.green);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL
 */
function checkPostgreSQLRunning() {
  log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PostgreSQL...`, colors.blue);
  
  try {
    const pgSocketPath = process.env.PGSOCKET || path.join(process.env.HOME, '.postgresql', 'sockets');
    const result = execSync(`PGHOST=${pgSocketPath} PGUSER=${process.env.PGUSER} psql -d postgres -c "SELECT 1" -t`).toString().trim();
    
    if (result === '1') {
      log(`‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω`, colors.green);
      return true;
    } else {
      log(`‚ö†Ô∏è PostgreSQL –∑–∞–ø—É—â–µ–Ω, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`, colors.yellow);
      return false;
    }
  } catch (err) {
    log(`‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${err.message}`, colors.red);
    return false;
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç PostgreSQL —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç start-postgres.sh
 */
function startPostgreSQL() {
  log(`üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL...`, colors.blue);
  
  try {
    execSync('bash ./start-postgres.sh', { stdio: 'inherit' });
    log(`‚úÖ PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`, colors.green);
    return true;
  } catch (err) {
    log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL: ${err.message}`, colors.red);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ö–µ–º—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions
 */
async function createPartitionSchema() {
  log(`\n${colors.blue}=== –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ö–µ–º—ã ===${colors.reset}`);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const pgSocketPath = process.env.PGSOCKET || path.join(process.env.HOME, '.postgresql', 'sockets');
  const pool = new Pool({
    host: pgSocketPath,
    user: process.env.PGUSER || 'runner',
    database: process.env.PGDATABASE || 'postgres',
    password: process.env.PGPASSWORD || '',
    port: parseInt(process.env.PGPORT || '5432'),
  });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ transactions
    const existsResult = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'transactions'
      )
    `);
    
    const tableExists = existsResult.rows[0].exists;
    if (!tableExists) {
      log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ transactions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑–æ–≤—É—é —Å—Ö–µ–º—É`, colors.red);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ transactions —É–∂–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
    const partitionResult = await pool.query(`
      SELECT EXISTS (
        SELECT FROM pg_partitioned_table pt
        JOIN pg_class c ON c.oid = pt.partrelid
        JOIN pg_namespace n ON n.oid = c.relnamespace
        WHERE n.nspname = 'public' AND c.relname = 'transactions'
      )
    `);
    
    const isPartitioned = partitionResult.rows[0].exists;
    if (isPartitioned) {
      log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions —É–∂–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞`, colors.green);
      return true;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã transactions –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    log(`üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã transactions...`, colors.blue);
    const dataResult = await pool.query(`SELECT * FROM transactions`);
    const transactions = dataResult.rows;
    log(`üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`, colors.blue);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...`, colors.blue);
    await pool.query(`CREATE TABLE transactions_temp AS SELECT * FROM transactions`);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
    log(`üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã transactions...`, colors.blue);
    await pool.query(`DROP TABLE transactions CASCADE`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã transactions...`, colors.blue);
    await pool.query(`
      CREATE TABLE transactions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        type TEXT,
        currency TEXT,
        amount NUMERIC(18, 6),
        status TEXT DEFAULT 'confirmed',
        source TEXT,
        category TEXT,
        tx_hash TEXT,
        description TEXT,
        source_user_id INTEGER,
        wallet_address TEXT,
        data TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      ) PARTITION BY RANGE (created_at)
    `);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth() + 1;
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—à–ª—ã—Ö –º–µ—Å—è—Ü–µ–≤ –∏ –±—É–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º...`, colors.blue);
    
    // –ü–∞—Ä—Ç–∏—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    await pool.query(`
      CREATE TABLE transactions_before_${currentYear} PARTITION OF transactions
      FOR VALUES FROM (MINVALUE) TO ('${currentYear}-01-01')
    `);
    
    // –ü–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let month = 1; month < currentMonth; month++) {
      const nextMonth = month + 1;
      const monthStr = month.toString().padStart(2, '0');
      const nextMonthStr = nextMonth.toString().padStart(2, '0');
      
      await pool.query(`
        CREATE TABLE transactions_${currentYear}_${monthStr} PARTITION OF transactions
        FOR VALUES FROM ('${currentYear}-${monthStr}-01') TO ('${currentYear}-${nextMonthStr}-01')
      `);
    }
    
    // –ü–∞—Ä—Ç–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const nextMonth = currentMonth + 1 > 12 ? 1 : currentMonth + 1;
    const nextYear = currentMonth + 1 > 12 ? currentYear + 1 : currentYear;
    const currentMonthStr = currentMonth.toString().padStart(2, '0');
    const nextMonthStr = nextMonth.toString().padStart(2, '0');
    
    await pool.query(`
      CREATE TABLE transactions_${currentYear}_${currentMonthStr} PARTITION OF transactions
      FOR VALUES FROM ('${currentYear}-${currentMonthStr}-01') TO ('${nextYear}-${nextMonthStr}-01')
    `);
    
    // –ü–∞—Ä—Ç–∏—Ü–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const afterNextMonth = nextMonth + 1 > 12 ? 1 : nextMonth + 1;
    const afterNextYear = nextMonth + 1 > 12 ? nextYear + 1 : nextYear;
    
    await pool.query(`
      CREATE TABLE transactions_${nextYear}_${nextMonthStr} PARTITION OF transactions
      FOR VALUES FROM ('${nextYear}-${nextMonthStr}-01') TO ('${afterNextYear}-${afterNextMonth.toString().padStart(2, '0')}-01')
    `);
    
    // –ü–∞—Ä—Ç–∏—Ü–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    await pool.query(`
      CREATE TABLE transactions_future PARTITION OF transactions
      FOR VALUES FROM ('${afterNextYear}-${afterNextMonth.toString().padStart(2, '0')}-01') TO (MAXVALUE)
    `);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...`, colors.blue);
    await pool.query(`CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions (user_id)`);
    await pool.query(`CREATE INDEX IF NOT EXISTS idx_transactions_source_user_id ON transactions (source_user_id)`);
    await pool.query(`CREATE INDEX IF NOT EXISTS idx_transactions_type_status ON transactions (type, status)`);
    await pool.query(`CREATE INDEX IF NOT EXISTS idx_transactions_created_at ON transactions (created_at)`);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    if (transactions.length > 0) {
      log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...`, colors.blue);
      await pool.query(`INSERT INTO transactions SELECT * FROM transactions_temp`);
      log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`, colors.green);
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    log(`üßπ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...`, colors.blue);
    await pool.query(`DROP TABLE transactions_temp`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ–≥–æ–≤ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
    log(`üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã partition_logs...`, colors.blue);
    const logsExistResult = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'partition_logs'
      )
    `);
    
    if (!logsExistResult.rows[0].exists) {
      log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã partition_logs...`, colors.blue);
      await pool.query(`
        CREATE TABLE partition_logs (
          id SERIAL PRIMARY KEY,
          operation TEXT NOT NULL,
          partition_name TEXT,
          message TEXT NOT NULL,
          timestamp TIMESTAMP DEFAULT NOW() NOT NULL,
          status TEXT NOT NULL,
          error_details TEXT
        )
      `);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∏ –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Å—Ö–µ–º—ã
    await pool.query(`
      INSERT INTO partition_logs 
      (operation, message, status) 
      VALUES 
      ('schema_creation', '–ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', 'success')
    `);
    
    log(`‚úÖ –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`, colors.green);
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Å—Ö–µ–º—ã: ${error.message}`, colors.red);
    console.error(error);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∏ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
    try {
      await pool.query(`
        INSERT INTO partition_logs 
        (operation, message, status, error_details) 
        VALUES 
        ('schema_creation', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Å—Ö–µ–º—ã', 'error', $1)
      `, [error.message]);
    } catch (logError) {
      log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∏: ${logError.message}`, colors.yellow);
    }
    
    return false;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await pool.end();
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  log(`\n${colors.magenta}=============================================${colors.reset}`);
  log(`${colors.magenta}= –°–û–ó–î–ê–ù–ò–ï –ü–ê–†–¢–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø REPLIT PG =${colors.reset}`);
  log(`${colors.magenta}=============================================${colors.reset}\n`);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  loadEnvFromReplit();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL
  if (!checkPostgreSQLRunning()) {
    log(`üîÑ PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å...`, colors.yellow);
    if (!startPostgreSQL()) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL, –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞`, colors.red);
      process.exit(1);
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–Ω—É—é —Å—Ö–µ–º—É
  if (await createPartitionSchema()) {
    log(`\n${colors.green}‚úÖ –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!${colors.reset}`);
  } else {
    log(`\n${colors.red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–Ω—É—é —Å—Ö–µ–º—É${colors.reset}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(err => {
  log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, colors.red);
  console.error(err);
  process.exit(1);
});