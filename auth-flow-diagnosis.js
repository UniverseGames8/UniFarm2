/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å Telegram Mini App
 * 
 * –°–∫—Ä–∏–ø—Ç –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç API endpoints
 * –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node auth-flow-diagnosis.js
 */

import { createRequire } from 'module';
const require = createRequire(import.meta.url);
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
log(`${colors.cyan}[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞]${colors.reset} üîç –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É
function findFiles(dir, pattern, maxDepth = 3, currentDepth = 0) {
  if (currentDepth > maxDepth) return [];
  
  let results = [];
  
  try {
    const items = fs.readdirSync(dir);
    
    for (const item of items) {
      const fullPath = path.join(dir, item);
      
      try {
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory()) {
          results = results.concat(findFiles(fullPath, pattern, maxDepth, currentDepth + 1));
        } else if (pattern.test(item)) {
          results.push(fullPath);
        }
      } catch (error) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
      }
    }
  } catch (error) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
  }
  
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ñ–∞–π–ª–µ
function findPatternsInFile(filePath, patterns) {
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    const results = {};
    
    for (const [key, pattern] of Object.entries(patterns)) {
      results[key] = {
        found: pattern.test(content),
        matches: content.match(pattern) || []
      };
    }
    
    return {
      path: filePath,
      content,
      results
    };
  } catch (error) {
    return {
      path: filePath,
      error: error.message
    };
  }
}

// –ü–æ–∏—Å–∫ –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function findApiEndpoints() {
  log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üîç –ü–æ–∏—Å–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...', colors.cyan);
  
  // –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const apiPatterns = {
    sessionRestore: /\/api\/session\/restore/,
    login: /\/api\/(?:auth\/)?login/,
    register: /\/api\/(?:auth\/)?register/,
    telegramAuth: /telegram.*auth|init.*data/i,
    userCreate: /createUser|new\s+User|user\.create/i
  };
  
  // –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ js/ts –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ server
  const jsFiles = findFiles('./server', /\.(js|ts)$/);
  
  log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üîé –ù–∞–π–¥–µ–Ω–æ ${jsFiles.length} js/ts —Ñ–∞–π–ª–æ–≤ –≤ server`, colors.cyan);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  const authEndpoints = [];
  
  for (const file of jsFiles) {
    const results = findPatternsInFile(file, apiPatterns);
    
    if (results.error) {
      continue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª –∫–∞–∫–∏–µ-–ª–∏–±–æ —à–∞–±–ª–æ–Ω—ã API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const hasAuthPatterns = Object.values(results.results).some(result => result.found);
    
    if (hasAuthPatterns) {
      authEndpoints.push({
        path: results.path,
        patterns: results.results
      });
    }
  }
  
  log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${authEndpoints.length} —Ñ–∞–π–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π`, colors.green);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const apiEndpoints = [];
  
  for (const endpoint of authEndpoints) {
    log(`\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìÑ –§–∞–π–ª: ${endpoint.path}`, colors.cyan);
    
    // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    for (const [key, result] of Object.entries(endpoint.patterns)) {
      if (result.found) {
        log(`  - ${key}: ${result.found ? '‚úÖ' : '‚ùå'}`, result.found ? colors.green : colors.red);
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        const content = fs.readFileSync(endpoint.path, 'utf-8');
        const lines = content.split('\n');
        
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–æ–≤
        const routeLines = lines.filter(line => 
          line.includes('app.') && 
          (line.includes('.get') || line.includes('.post') || line.includes('.put') || line.includes('.delete'))
        );
        
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        let pattern;
        switch (key) {
          case 'sessionRestore':
            pattern = /\/api\/session\/restore/;
            break;
          case 'login':
            pattern = /\/api\/(?:auth\/)?login/;
            break;
          case 'register':
            pattern = /\/api\/(?:auth\/)?register/;
            break;
          case 'telegramAuth':
            pattern = /telegram.*auth|init.*data/i;
            break;
          case 'userCreate':
            pattern = /createUser|new\s+User|user\.create/i;
            break;
        }
        
        const matchingRoutes = routeLines.filter(line => pattern.test(line));
        
        if (matchingRoutes.length > 0) {
          log(`    –ù–∞–π–¥–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã:`, colors.yellow);
          matchingRoutes.forEach((route, i) => {
            log(`    ${i + 1}. ${route.trim()}`, colors.reset);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
            const methodMatch = route.match(/\.(get|post|put|delete)/i);
            const urlMatch = route.match(/'([^']+)'|"([^"]+)"/);
            
            if (methodMatch && urlMatch) {
              const method = methodMatch[1].toUpperCase();
              const url = urlMatch[1] || urlMatch[2];
              
              apiEndpoints.push({
                method,
                url,
                file: endpoint.path,
                category: key,
                line: route.trim()
              });
            }
          });
        } else if (key === 'userCreate' && result.found) {
          log(`    –ù–∞–π–¥–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, colors.yellow);
        }
      }
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
  log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìä –°–≤–æ–¥–∫–∞ –ø–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', colors.cyan);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const endpointsByCategory = {};
  
  for (const endpoint of apiEndpoints) {
    if (!endpointsByCategory[endpoint.category]) {
      endpointsByCategory[endpoint.category] = [];
    }
    endpointsByCategory[endpoint.category].push(endpoint);
  }
  
  // –í—ã–≤–æ–¥–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  for (const [category, endpoints] of Object.entries(endpointsByCategory)) {
    log(`\n${category}:`, colors.yellow);
    endpoints.forEach((endpoint, index) => {
      log(`  ${index + 1}. ${endpoint.method} ${endpoint.url}`, colors.reset);
    });
  }
  
  return {
    apiEndpoints,
    endpointsByCategory
  };
}

// –ê–Ω–∞–ª–∏–∑ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
async function analyzeSessionRestoreFlow() {
  log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üîç –ê–Ω–∞–ª–∏–∑ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...', colors.cyan);
  
  // –ò—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
  const sessionPatterns = {
    expressSession: /express-session/,
    cookieSession: /cookie-session/,
    sessionRestore: /session.*restore|restore.*session/i,
    telegramAuth: /telegram.*auth|init.*data/i,
    sessionCheck: /req\.session|session\.[a-zA-Z]/i
  };
  
  // –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ js/ts
  const jsFiles = findFiles('.', /\.(js|ts)$/);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–µ—Å—Å–∏–π
  const sessionFiles = [];
  
  for (const file of jsFiles) {
    const results = findPatternsInFile(file, sessionPatterns);
    
    if (results.error) {
      continue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    const hasSessionPatterns = Object.values(results.results).some(result => result.found);
    
    if (hasSessionPatterns) {
      sessionFiles.push({
        path: results.path,
        patterns: results.results
      });
    }
  }
  
  log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${sessionFiles.length} —Ñ–∞–π–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å–µ—Å—Å–∏—è–º–∏`, colors.green);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å —Å–µ—Å—Å–∏—è–º–∏
  const issues = [];
  
  for (const file of sessionFiles) {
    log(`\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìÑ –§–∞–π–ª: ${file.path}`, colors.cyan);
    
    // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    for (const [key, result] of Object.entries(file.patterns)) {
      if (result.found) {
        log(`  - ${key}: ${result.found ? '‚úÖ' : '‚ùå'}`, result.found ? colors.green : colors.red);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Å—Å–∏—è–º–∏
    const content = fs.readFileSync(file.path, 'utf-8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookie
    if (content.includes('cookie') && !content.includes('sameSite')) {
      issues.push({
        file: file.path,
        issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ sameSite –¥–ª—è cookie',
        severity: 'high'
      });
    }
    
    if (content.includes('cookie') && !content.includes('secure')) {
      issues.push({
        file: file.path,
        issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ secure –¥–ª—è cookie',
        severity: 'high'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
    if (file.patterns.telegramAuth && file.patterns.telegramAuth.found) {
      if (!content.includes('headers') || !content.includes('telegram-init-data') && !content.includes('x-telegram-init-data')) {
        issues.push({
          file: file.path,
          issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ telegram-init-data –∏–ª–∏ x-telegram-init-data',
          severity: 'critical'
        });
      }
      
      if (!content.includes('verify') && !content.includes('validate') && !content.includes('check')) {
        issues.push({
          file: file.path,
          issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram',
          severity: 'high'
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
    if (file.patterns.sessionCheck && file.patterns.sessionCheck.found) {
      if (!content.includes('user') || !content.includes('req.session.user')) {
        issues.push({
          file: file.path,
          issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏',
          severity: 'medium'
        });
      }
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (issues.length > 0) {
    log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º —Å–µ—Å—Å–∏–π:', colors.yellow);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    const criticalIssues = issues.filter(issue => issue.severity === 'critical');
    const highIssues = issues.filter(issue => issue.severity === 'high');
    const mediumIssues = issues.filter(issue => issue.severity === 'medium');
    
    if (criticalIssues.length > 0) {
      log('\nüî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:', colors.red);
      criticalIssues.forEach((issue, index) => {
        log(`${index + 1}. ${issue.issue}`, colors.red);
        log(`   –§–∞–π–ª: ${issue.file}`, colors.yellow);
      });
    }
    
    if (highIssues.length > 0) {
      log('\nüü† –í–∞–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:', colors.yellow);
      highIssues.forEach((issue, index) => {
        log(`${index + 1}. ${issue.issue}`, colors.yellow);
        log(`   –§–∞–π–ª: ${issue.file}`, colors.yellow);
      });
    }
    
    if (mediumIssues.length > 0) {
      log('\nüü° –ü—Ä–æ–±–ª–µ–º—ã —Å—Ä–µ–¥–Ω–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏:', colors.white);
      mediumIssues.forEach((issue, index) => {
        log(`${index + 1}. ${issue.issue}`, colors.white);
        log(`   –§–∞–π–ª: ${issue.file}`, colors.yellow);
      });
    }
  } else {
    log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚úÖ –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º —Å–µ—Å—Å–∏–π', colors.green);
  }
  
  return {
    sessionFiles,
    issues
  };
}

// –ê–Ω–∞–ª–∏–∑ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function analyzeUserCreationFlow() {
  log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üîç –ê–Ω–∞–ª–∏–∑ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', colors.cyan);
  
  // –ò—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userPatterns = {
    createUser: /createUser|user\.create|new\s+User/i,
    telegramUser: /telegram.*user|user.*telegram/i,
    authUser: /auth.*user|user.*auth/i,
    insertUser: /insert.*user|user.*insert/i
  };
  
  // –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ js/ts
  const jsFiles = findFiles('.', /\.(js|ts)$/);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userFiles = [];
  
  for (const file of jsFiles) {
    const results = findPatternsInFile(file, userPatterns);
    
    if (results.error) {
      continue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const hasUserPatterns = Object.values(results.results).some(result => result.found);
    
    if (hasUserPatterns) {
      userFiles.push({
        path: results.path,
        patterns: results.results
      });
    }
  }
  
  log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${userFiles.length} —Ñ–∞–π–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, colors.green);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const issues = [];
  
  for (const file of userFiles) {
    log(`\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìÑ –§–∞–π–ª: ${file.path}`, colors.cyan);
    
    // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    for (const [key, result] of Object.entries(file.patterns)) {
      if (result.found) {
        log(`  - ${key}: ${result.found ? '‚úÖ' : '‚ùå'}`, result.found ? colors.green : colors.red);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const content = fs.readFileSync(file.path, 'utf-8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (file.patterns.createUser && file.patterns.createUser.found) {
      if (!content.includes('find') && !content.includes('where') && !content.includes('exists')) {
        issues.push({
          file: file.path,
          issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º',
          severity: 'high'
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (file.patterns.telegramUser && file.patterns.telegramUser.found) {
        if (!content.includes('telegram_id') && !content.includes('telegramId')) {
          issues.push({
            file: file.path,
            issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            severity: 'critical'
          });
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (!content.includes('try') || !content.includes('catch')) {
        issues.push({
          file: file.path,
          issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          severity: 'medium'
        });
      }
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (issues.length > 0) {
    log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', colors.yellow);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    const criticalIssues = issues.filter(issue => issue.severity === 'critical');
    const highIssues = issues.filter(issue => issue.severity === 'high');
    const mediumIssues = issues.filter(issue => issue.severity === 'medium');
    
    if (criticalIssues.length > 0) {
      log('\nüî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:', colors.red);
      criticalIssues.forEach((issue, index) => {
        log(`${index + 1}. ${issue.issue}`, colors.red);
        log(`   –§–∞–π–ª: ${issue.file}`, colors.yellow);
      });
    }
    
    if (highIssues.length > 0) {
      log('\nüü† –í–∞–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:', colors.yellow);
      highIssues.forEach((issue, index) => {
        log(`${index + 1}. ${issue.issue}`, colors.yellow);
        log(`   –§–∞–π–ª: ${issue.file}`, colors.yellow);
      });
    }
    
    if (mediumIssues.length > 0) {
      log('\nüü° –ü—Ä–æ–±–ª–µ–º—ã —Å—Ä–µ–¥–Ω–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏:', colors.white);
      mediumIssues.forEach((issue, index) => {
        log(`${index + 1}. ${issue.issue}`, colors.white);
        log(`   –§–∞–π–ª: ${issue.file}`, colors.yellow);
      });
    }
  } else {
    log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚úÖ –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', colors.green);
  }
  
  return {
    userFiles,
    issues
  };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
function checkTelegramValidation() {
  log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram...', colors.cyan);
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ initData –æ—Ç Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const mockInitData = 'query_id=AAHdF6IQAAAAAN0XohDhrOrc&user=%7B%22id%22%3A123456789%2C%22first_name%22%3A%22Test%22%2C%22last_name%22%3A%22User%22%2C%22username%22%3A%22testuser%22%2C%22language_code%22%3A%22en%22%7D&auth_date=1641234567&hash=1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  try {
    // –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É initData
    const urlParams = new URLSearchParams(mockInitData);
    const hash = urlParams.get('hash');
    
    if (!hash) {
      log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash`, colors.red);
      return {
        isValid: false,
        error: '–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash'
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStr = urlParams.get('user');
    
    if (!userStr) {
      log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, colors.red);
      return {
        isValid: false,
        error: '–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      };
    }
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user;
    try {
      user = JSON.parse(userStr);
      log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã`, colors.green);
      log(`  - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}`, colors.cyan);
      log(`  - –ò–º—è: ${user.first_name} ${user.last_name || ''}`, colors.cyan);
      log(`  - Username: ${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`, colors.cyan);
    } catch (error) {
      log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`, colors.red);
      return {
        isValid: false,
        error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`
      };
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    const dataCheckArr = [];
    
    urlParams.forEach((val, key) => {
      if (key !== 'hash') {
        dataCheckArr.push(`${key}=${val}`);
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
    dataCheckArr.sort();
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
    const dataCheckString = dataCheckArr.join('\n');
    
    log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ`, colors.green);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)
    log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ö†Ô∏è –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞`, colors.yellow);
    log(`  - –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è TELEGRAM_BOT_TOKEN`, colors.yellow);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
    log(`\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`, colors.cyan);
    
    const requiredTables = [
      { name: 'auth_users', description: '–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
      { name: 'sessions', description: '–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π' },
      { name: 'telegram_users', description: '–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å Telegram' }
    ];
    
    for (const table of requiredTables) {
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
      const exists = table.name === 'auth_users';
      
      if (exists) {
        log(`  - –¢–∞–±–ª–∏—Ü–∞ ${table.name}: ‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, colors.green);
      } else {
        log(`  - –¢–∞–±–ª–∏—Ü–∞ ${table.name}: ‚ùå –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, colors.red);
        log(`    (${table.description})`, colors.yellow);
      }
    }
    
    return {
      isValid: true,
      user
    };
  } catch (error) {
    log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, colors.red);
    return {
      isValid: false,
      error: error.message
    };
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
function generateRecommendations(apiResults, sessionResults, userResults) {
  log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:', colors.cyan);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ API
  const hasApiIssues = apiResults && apiResults.apiEndpoints.length === 0;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Å—Å–∏—è–º–∏
  const hasSessionIssues = sessionResults && sessionResults.issues.length > 0;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const hasUserIssues = userResults && userResults.issues.length > 0;
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤
  if (hasApiIssues) {
    log('\n1. –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å API –º–∞—Ä—à—Ä—É—Ç–∞–º–∏:', colors.yellow);
    log('- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /api/session/restore)', colors.white);
    log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram', colors.white);
    
    // –ü—Ä–∏–º–µ—Ä —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    log('\n–ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', colors.green);
    log(`app.post('/api/session/restore', (req, res) => {
  const initData = req.headers['telegram-init-data'] || req.headers['x-telegram-init-data'];
  
  if (!initData) {
    return res.status(400).json({ success: false, error: 'No Telegram initData provided' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
  const isValid = validateTelegramInitData(initData);
  
  if (!isValid) {
    return res.status(403).json({ success: false, error: 'Invalid Telegram data signature' });
  }
  
  // –†–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userData = parseTelegramInitData(initData);
  
  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  findOrCreateUser(userData)
    .then(user => {
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
      req.session.user = user;
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
      res.json({ success: true, data: { user } });
    })
    .catch(error => {
      res.status(500).json({ success: false, error: error.message });
    });
});`, colors.reset);
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–π
  if (hasSessionIssues) {
    log('\n2. –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏—è–º–∏:', colors.yellow);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏—è–º–∏
    const hasCriticalSessionIssues = sessionResults.issues.some(issue => issue.severity === 'critical');
    
    if (hasCriticalSessionIssues) {
      log('- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ Telegram', colors.white);
      log('- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram', colors.white);
    }
    
    // –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram
    log('\n–ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram:', colors.green);
    log(`function validateTelegramInitData(initData) {
  // –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É initData
  const urlParams = new URLSearchParams(initData);
  const hash = urlParams.get('hash');
  
  if (!hash) {
    return false;
  }
  
  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const dataCheckArr = [];
  
  urlParams.forEach((val, key) => {
    if (key !== 'hash') {
      dataCheckArr.push(\`${key}=${val}\`);
    }
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
  dataCheckArr.sort();
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
  const dataCheckString = dataCheckArr.join('\\n');
  
  // –°–æ–∑–¥–∞–µ–º HMAC-SHA-256 –ø–æ–¥–ø–∏—Å—å
  const secretKey = crypto.createHmac('sha256', 'WebAppData').update(process.env.TELEGRAM_BOT_TOKEN).digest();
  const calculatedHash = crypto.createHmac('sha256', secretKey)
    .update(dataCheckString)
    .digest('hex');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
  return calculatedHash === hash;
}`, colors.reset);
    
    // –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log('\n–ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', colors.green);
    log(`function parseTelegramInitData(initData) {
  // –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É initData
  const urlParams = new URLSearchParams(initData);
  const userStr = urlParams.get('user');
  
  if (!userStr) {
    throw new Error('No user data found in Telegram initData');
  }
  
  // –†–∞–∑–±–∏—Ä–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  return JSON.parse(userStr);
}`, colors.reset);
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (hasUserIssues) {
    log('\n3. –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', colors.yellow);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const hasCriticalUserIssues = userResults.issues.some(issue => issue.severity === 'critical');
    
    if (hasCriticalUserIssues) {
      log('- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', colors.white);
      log('- –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É telegram_users –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Telegram', colors.white);
    }
    
    // –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log('\n–ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', colors.green);
    log(`async function findOrCreateUser(telegramUser) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
  const existingUser = await findUserByTelegramId(telegramUser.id);
  
  if (existingUser) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    return existingUser;
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    const newUser = await createUser({
      username: telegramUser.username || \`user_\${telegramUser.id}\`,
      telegram_id: telegramUser.id,
      first_name: telegramUser.first_name,
      last_name: telegramUser.last_name,
      language_code: telegramUser.language_code
    });
    
    return newUser;
  } catch (error) {
    console.error('Error creating user:', error);
    throw error;
  }
}`, colors.reset);
  }
  
  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  log('\n4. –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', colors.cyan);
  log('- –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É sessions –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π', colors.white);
  log('- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CORS –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ credentials (cookies)', colors.white);
  log('- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ middleware –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (CORS –ø–µ—Ä–µ–¥ session)', colors.white);
  log('- –í Telegram Mini App, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch —Å { credentials: \'include\' }', colors.white);
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
async function runAllChecks() {
  try {
    // –ü–æ–∏—Å–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const apiResults = await findApiEndpoints();
    
    // –ê–Ω–∞–ª–∏–∑ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    const sessionResults = await analyzeSessionRestoreFlow();
    
    // –ê–Ω–∞–ª–∏–∑ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userResults = await analyzeUserCreationFlow();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
    const telegramValidation = checkTelegramValidation();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    generateRecommendations(apiResults, sessionResults, userResults);
    
    log('\n[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', colors.cyan);
    
  } catch (error) {
    log(`[Auth –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: ${error.message}`, colors.red);
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
runAllChecks();