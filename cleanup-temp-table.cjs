/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã transactions_temp
 */

const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const { Pool } = require('pg');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

/**
 * –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º
 */
function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.replit
 */
function loadEnvFromReplit() {
  const replitEnvPath = path.join(process.cwd(), '.env.replit');
  
  if (!fs.existsSync(replitEnvPath)) {
    log(`‚ùå –§–∞–π–ª .env.replit –Ω–µ –Ω–∞–π–¥–µ–Ω!`, colors.red);
    process.exit(1);
  }
  
  log(`üìù –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.replit...`, colors.blue);
  const envConfig = dotenv.parse(fs.readFileSync(replitEnvPath));
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Replit PostgreSQL
  envConfig.DATABASE_PROVIDER = 'replit';
  envConfig.USE_LOCAL_DB_ONLY = 'true';
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  for (const key in envConfig) {
    process.env[key] = envConfig[key];
  }
  
  log(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env.replit`, colors.green);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL
 */
function checkPostgreSQLRunning() {
  log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PostgreSQL...`, colors.blue);
  
  try {
    const pgSocketPath = process.env.PGSOCKET || path.join(process.env.HOME, '.postgresql', 'sockets');
    const result = execSync(`PGHOST=${pgSocketPath} PGUSER=${process.env.PGUSER} psql -d postgres -c "SELECT 1" -t`).toString().trim();
    
    if (result === '1') {
      log(`‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω`, colors.green);
      return true;
    } else {
      log(`‚ö†Ô∏è PostgreSQL –∑–∞–ø—É—â–µ–Ω, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`, colors.yellow);
      return false;
    }
  } catch (err) {
    log(`‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${err.message}`, colors.red);
    return false;
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç PostgreSQL —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç start-postgres.sh
 */
function startPostgreSQL() {
  log(`üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL...`, colors.blue);
  
  try {
    execSync('bash ./start-postgres.sh', { stdio: 'inherit' });
    log(`‚úÖ PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`, colors.green);
    return true;
  } catch (err) {
    log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL: ${err.message}`, colors.red);
    return false;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É transactions_temp
 */
async function cleanupTempTable() {
  log(`\n${colors.blue}=== –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ===${colors.reset}`);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const pgSocketPath = process.env.PGSOCKET || path.join(process.env.HOME, '.postgresql', 'sockets');
  const pool = new Pool({
    host: pgSocketPath,
    user: process.env.PGUSER || 'runner',
    database: process.env.PGDATABASE || 'postgres',
    password: process.env.PGPASSWORD || '',
    port: parseInt(process.env.PGPORT || '5432'),
  });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ transactions_temp
    const existsResult = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'transactions_temp'
      )
    `);
    
    const tempTableExists = existsResult.rows[0].exists;
    if (!tempTableExists) {
      log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions_temp –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å`, colors.green);
      return true;
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    log(`üßπ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã transactions_temp...`, colors.blue);
    await pool.query(`DROP TABLE transactions_temp`);
    
    log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions_temp —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`, colors.green);
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: ${error.message}`, colors.red);
    console.error(error);
    return false;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await pool.end();
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  log(`\n${colors.magenta}====================================${colors.reset}`);
  log(`${colors.magenta}= –û–ß–ò–°–¢–ö–ê –í–†–ï–ú–ï–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–´ –í –ë–î =${colors.reset}`);
  log(`${colors.magenta}====================================${colors.reset}\n`);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  loadEnvFromReplit();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL
  if (!checkPostgreSQLRunning()) {
    log(`üîÑ PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å...`, colors.yellow);
    if (!startPostgreSQL()) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL, –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞`, colors.red);
      process.exit(1);
    }
  }
  
  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
  if (await cleanupTempTable()) {
    log(`\n${colors.green}‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${colors.reset}`);
  } else {
    log(`\n${colors.red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É${colors.reset}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(err => {
  log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, colors.red);
  console.error(err);
  process.exit(1);
});