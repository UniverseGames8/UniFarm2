/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã transactions –≤ Neon DB
 * 
 * –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Ç–∏—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏–º—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–∏
 */
require('dotenv').config({ path: '.env.neon' });
const { Pool } = require('pg');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m'
};

function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

async function createTransactionsPartitions() {
  log('='.repeat(60), colors.blue);
  log('üîß –°–û–ó–î–ê–ù–ò–ï –ü–ê–†–¢–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –¢–ê–ë–õ–ò–¶–´ TRANSACTIONS', colors.bright + colors.blue);
  log('='.repeat(60), colors.blue);
  
  const CONNECTION_STRING = process.env.DATABASE_URL;
  if (!CONNECTION_STRING) {
    log('‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.', colors.red);
    log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.neon', colors.yellow);
    return;
  }
  
  log(`üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${CONNECTION_STRING.replace(/:[^:]*@/, ':***@')}`, colors.yellow);
  
  const pool = new Pool({
    connectionString: CONNECTION_STRING,
    ssl: {
      rejectUnauthorized: false
    }
  });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const timeResult = await pool.query('SELECT NOW() as time');
    log(`‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ ${timeResult.rows[0].time}`, colors.green);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü–∞ transactions
    const isPartitioned = await checkIfPartitioned(pool);
    
    if (isPartitioned) {
      log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ transactions —É–∂–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ.', colors.yellow);
      await listPartitions(pool);
      return;
    }
    
    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—É transactions –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!', colors.red);
    log('‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º!', colors.red);
    log('‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...', colors.yellow);
    
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã transactions
    log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö...', colors.yellow);
    const backupResult = await pool.query('SELECT * FROM transactions');
    log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å ${backupResult.rows.length} –∑–∞–ø–∏—Å—è–º–∏`, colors.green);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
    log('\nüîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã transactions...', colors.yellow);
    await pool.query('DROP TABLE IF EXISTS transactions CASCADE');
    log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞', colors.green);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã transactions...', colors.yellow);
    
    await pool.query(`
      CREATE TABLE transactions (
        id SERIAL,
        user_id INTEGER REFERENCES users(id),
        type TEXT,
        currency TEXT,
        amount NUMERIC(18, 6),
        status TEXT DEFAULT 'confirmed',
        source TEXT,
        category TEXT,
        tx_hash TEXT,
        description TEXT,
        source_user_id INTEGER,
        wallet_address TEXT,
        data TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      ) PARTITION BY RANGE (created_at);
      
      -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      CREATE INDEX idx_transactions_user_id ON transactions(user_id);
      CREATE INDEX idx_transactions_source_user_id ON transactions(source_user_id);
      CREATE INDEX idx_transactions_type_status ON transactions(type, status);
      CREATE INDEX idx_transactions_created_at ON transactions(created_at);
      
      -- –î–µ–ª–∞–µ–º id —Å–∫–≤–æ–∑–Ω—ã–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–º
      CREATE SEQUENCE transactions_id_seq OWNED BY transactions.id;
      ALTER TABLE transactions ALTER COLUMN id SET DEFAULT nextval('transactions_id_seq');
    `);
    
    log('‚úÖ –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ transactions —Å–æ–∑–¥–∞–Ω–∞', colors.green);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ –∏ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
    log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–π...', colors.yellow);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth();
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è 3 –ø—Ä–æ—à–ª—ã—Ö, —Ç–µ–∫—É—â–µ–≥–æ –∏ 6 –±—É–¥—É—â–∏—Ö –º–µ—Å—è—Ü–µ–≤
    for (let monthOffset = -3; monthOffset <= 6; monthOffset++) {
      let year = currentYear;
      let month = currentMonth + monthOffset;
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü, –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã 0-11
      if (month < 0) {
        year--;
        month = 12 + month;
      }
      
      if (month > 11) {
        year++;
        month = month - 12;
      }
      
      const partitionName = `transactions_${year}_${String(month + 1).padStart(2, '0')}`;
      
      // –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–∏
      const startDate = new Date(year, month, 1).toISOString();
      const endDate = new Date(year, month + 1, 1).toISOString();
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏—é
      await pool.query(`
        CREATE TABLE ${partitionName} PARTITION OF transactions
        FOR VALUES FROM ('${startDate}') TO ('${endDate}');
      `);
      
      log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä—Ç–∏—Ü–∏—è ${partitionName} –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${startDate.slice(0, 10)} - ${endDate.slice(0, 10)}`, colors.green);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞—Ç
    await pool.query(`
      CREATE TABLE transactions_default PARTITION OF transactions
      DEFAULT;
    `);
    
    log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä—Ç–∏—Ü–∏—è transactions_default –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞—Ç', colors.green);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    log('\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...', colors.yellow);
    
    if (backupResult.rows.length > 0) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –≤—Å—Ç–∞–≤–∫–∏
      const columnsToInsert = Object.keys(backupResult.rows[0])
        .filter(col => col !== 'id') // –ò—Å–∫–ª—é—á–∞–µ–º id, —á—Ç–æ–±—ã –æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        .join(', ');
      
      const valuesList = backupResult.rows.map(row => {
        const values = Object.entries(row)
          .filter(([key, _]) => key !== 'id')
          .map(([_, value]) => {
            if (value === null) return 'NULL';
            if (typeof value === 'string') return `'${value.replace(/'/g, "''")}'`;
            if (value instanceof Date) return `'${value.toISOString()}'`;
            return value;
          });
        
        return `(${values.join(', ')})`;
      });
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –Ω–∞ –ø–æ—Ä—Ü–∏–∏ –ø–æ 100 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
      const chunkSize = 100;
      for (let i = 0; i < valuesList.length; i += chunkSize) {
        const chunk = valuesList.slice(i, i + chunkSize);
        await pool.query(`
          INSERT INTO transactions (${columnsToInsert})
          VALUES ${chunk.join(',\n')}
        `);
      }
    }
    
    log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${backupResult.rows.length} –∑–∞–ø–∏—Å–µ–π`, colors.green);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏—è–º–∏
    log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏—è–º–∏...', colors.yellow);
    
    await pool.query(`
      -- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π –Ω–∞ –±—É–¥—É—â–∏–µ –º–µ—Å—è—Ü—ã
      CREATE OR REPLACE FUNCTION create_future_transaction_partitions(months_ahead integer DEFAULT 3)
      RETURNS void AS $$
      DECLARE
          partition_date date;
          partition_name text;
          start_date timestamp;
          end_date timestamp;
      BEGIN
          FOR i IN 1..months_ahead LOOP
              partition_date := date_trunc('month', current_date + (i || ' month')::interval);
              partition_name := 'transactions_' || to_char(partition_date, 'YYYY_MM');
              start_date := date_trunc('month', partition_date);
              end_date := date_trunc('month', partition_date + '1 month'::interval);
              
              -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞—Ä—Ç–∏—Ü–∏—è
              PERFORM 1
              FROM pg_class c
              JOIN pg_namespace n ON n.oid = c.relnamespace
              WHERE c.relname = partition_name AND n.nspname = 'public';
              
              IF NOT FOUND THEN
                  -- –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏—é
                  EXECUTE format(
                      'CREATE TABLE %I PARTITION OF transactions FOR VALUES FROM (%L) TO (%L)',
                      partition_name, start_date, end_date
                  );
                  
                  -- –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏
                  INSERT INTO partition_logs (operation, partition_name, message, status)
                  VALUES ('CREATE', partition_name, format('Created partition for %s to %s', start_date, end_date), 'success');
              END IF;
          END LOOP;
      END;
      $$ LANGUAGE plpgsql;
      
      -- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É
      CREATE OR REPLACE FUNCTION check_and_create_transaction_partitions()
      RETURNS trigger AS $$
      BEGIN
          -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏
          IF NOT EXISTS (
              SELECT 1 FROM partition_logs
              WHERE operation = 'AUTO_CHECK'
              AND date_trunc('day', timestamp) = date_trunc('day', current_timestamp)
          ) THEN
              -- –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
              INSERT INTO partition_logs (operation, message, status)
              VALUES ('AUTO_CHECK', 'Automatic check for future partitions', 'success');
              
              -- –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥
              PERFORM create_future_transaction_partitions(3);
          END IF;
          
          RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;
      
      -- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π
      DROP TRIGGER IF EXISTS trg_check_partitions ON transactions;
      CREATE TRIGGER trg_check_partitions
      AFTER INSERT ON transactions
      FOR EACH STATEMENT
      EXECUTE FUNCTION check_and_create_transaction_partitions();
    `);
    
    log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏—è–º–∏ —Å–æ–∑–¥–∞–Ω—ã', colors.green);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏—Ü–∏–π:', colors.blue);
    await listPartitions(pool);
    
    log('\nüéâ –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', colors.green);
    log('‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é create_future_transaction_partitions() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π –Ω–∞ –±—É–¥—É—â–∏–µ –º–µ—Å—è—Ü—ã', colors.blue);
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, colors.red);
    console.error(error);
  } finally {
    await pool.end();
    log('\nüìù –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', colors.blue);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ transactions
async function checkIfPartitioned(pool) {
  try {
    const result = await pool.query(`
      SELECT p.relname as parent_table
      FROM pg_class p
      WHERE p.relname = 'transactions' AND p.relkind = 'p'
    `);
    
    return result.rows.length > 0;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π
async function listPartitions(pool) {
  try {
    const partitions = await pool.query(`
      SELECT c.relname as partition_name,
             pg_get_expr(c.relpartbound, c.oid) as partition_expression
      FROM pg_inherits i
      JOIN pg_class p ON i.inhparent = p.oid
      JOIN pg_class c ON i.inhrelid = c.oid
      WHERE p.relname = 'transactions'
      ORDER BY c.relname
    `);
    
    if (partitions.rows.length === 0) {
      log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–∏—Ü–∏–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions', colors.yellow);
    } else {
      log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${partitions.rows.length} –ø–∞—Ä—Ç–∏—Ü–∏–π:`, colors.green);
      partitions.rows.forEach(partition => {
        log(`   - ${partition.partition_name}: ${partition.partition_expression}`, colors.green);
      });
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π: ${error.message}`, colors.red);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createTransactionsPartitions().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});