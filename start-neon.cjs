/**
 * –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ UniFarm —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Neon DB
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Neon DB
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m', 
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

/**
 * –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º
 */
function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Neon DB
 */
function loadNeonEnvironment() {
  log(`\n${colors.blue}=== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Neon DB ===${colors.reset}`);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.neon
  const neonEnvPath = path.join(process.cwd(), '.env.neon');
  if (fs.existsSync(neonEnvPath)) {
    log(`üìù –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env.neon...`, colors.blue);
    const neonConfig = dotenv.parse(fs.readFileSync(neonEnvPath));
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
    for (const key in neonConfig) {
      process.env[key] = neonConfig[key];
    }
    
    log(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`, colors.green);
  } else {
    log(`‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª .env.neon –Ω–µ –Ω–∞–π–¥–µ–Ω!`, colors.red);
    log(`‚ö†Ô∏è –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.neon —Å DATABASE_URL –¥–ª—è Neon DB`, colors.yellow);
    return false;
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Neon DB
  process.env.DATABASE_PROVIDER = 'neon';
  process.env.FORCE_NEON_DB = 'true';
  process.env.DISABLE_REPLIT_DB = 'true';
  process.env.USE_LOCAL_DB_ONLY = 'false';
  process.env.OVERRIDE_DB_PROVIDER = 'neon';
  process.env.NODE_ENV = 'production';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
  if (!process.env.DATABASE_URL) {
    log(`‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.neon`, colors.red);
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ Neon DB
  if (!process.env.DATABASE_URL.includes('neon.tech')) {
    log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: DATABASE_URL –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ URL Neon DB`, colors.yellow);
    log(`‚ö†Ô∏è URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å "neon.tech"`, colors.yellow);
  }
  
  log(`‚úÖ DATABASE_PROVIDER = ${process.env.DATABASE_PROVIDER}`, colors.green);
  log(`‚úÖ FORCE_NEON_DB = ${process.env.FORCE_NEON_DB}`, colors.green);
  log(`‚úÖ NODE_ENV = ${process.env.NODE_ENV}`, colors.green);
  
  return true;
}

/**
 * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
 */
function startServer() {
  log(`\n${colors.blue}=== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Neon DB ===${colors.reset}`);
  
  try {
    log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ production —Ä–µ–∂–∏–º–µ...`, colors.magenta);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ tsx –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    const serverProcess = spawn('tsx', ['server/index.ts'], {
      stdio: 'inherit',
      env: process.env
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    serverProcess.on('close', (code) => {
      log(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º ${code}`, colors.yellow);
      process.exit(code);
    });
    
    serverProcess.on('error', (error) => {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, colors.red);
      process.exit(1);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
      log(`\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`, colors.blue);
      serverProcess.kill('SIGINT');
      process.exit(0);
    });
    
    process.on('SIGTERM', () => {
      log(`\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`, colors.blue);
      serverProcess.kill('SIGTERM');
      process.exit(0);
    });
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, colors.red);
    console.error(error);
    process.exit(1);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  log(`\n${colors.magenta}====================================${colors.reset}`);
  log(`${colors.magenta}= –ó–ê–ü–£–°–ö UNIFARM –° NEON DB (FORCED) =${colors.reset}`);
  log(`${colors.magenta}====================================${colors.reset}`);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Neon DB
  if (!loadNeonEnvironment()) {
    log(`\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è Neon DB.`, colors.red);
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  startServer();
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();