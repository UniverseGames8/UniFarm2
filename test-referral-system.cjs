/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö CTE
 * –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥–ª—É–±–æ–∫–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏.
 */

require('dotenv').config();
const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const config = {
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
  depth: 5,
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–µ—Ç–≤–ª–µ–Ω–∏—è (—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  branchingFactor: 3,
  
  // –û—á–∏—â–∞—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  cleanupAfterTests: true,
  
  // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SQL –∑–∞–ø—Ä–æ—Å–æ–≤
  verboseOutput: false
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å
 * @param {string} query SQL –∑–∞–ø—Ä–æ—Å
 * @param {Array} params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
async function executeQuery(query, params = []) {
  const client = await pool.connect();
  try {
    return await client.query(query, params);
  } finally {
    client.release();
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
 */
async function createTestReferralStructure() {
  console.log(`\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–≥–ª—É–±–∏–Ω–∞: ${config.depth}, –≤–µ—Ç–≤–ª–µ–Ω–∏–µ: ${config.branchingFactor})...`);
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
  await executeQuery("DELETE FROM users WHERE username LIKE 'test_opt_%'");
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const rootResult = await executeQuery(`
    INSERT INTO users (username, ref_code, parent_ref_code, balance_uni, balance_ton)
    VALUES ('test_opt_root', 'ROOT_OPT', NULL, '1000.0', '10.0')
    RETURNING id, ref_code
  `);
  
  const rootId = rootResult.rows[0].id;
  const rootRefCode = rootResult.rows[0].ref_code;
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID ${rootId}, ref_code: ${rootRefCode}`);
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  async function createReferralsRecursively(level, parentId, parentRefCode, path = '') {
    if (level > config.depth) {
      return;
    }
    
    for (let i = 0; i < config.branchingFactor; i++) {
      const username = `test_opt_${level}_${path}${i}`;
      const refCode = `REF_OPT_${level}_${path}${i}`;
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await executeQuery(`
        INSERT INTO users (username, ref_code, parent_ref_code, balance_uni, balance_ton)
        VALUES ($1, $2, $3, '100.0', '1.0')
        RETURNING id
      `, [username, refCode, parentRefCode]);
      
      const userId = userResult.rows[0].id;
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ referrals
      await executeQuery(`
        INSERT INTO referrals (user_id, inviter_id, level)
        VALUES ($1, $2, 1)
      `, [userId, parentId]);
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É—Ä–æ–≤–Ω–∏
      await createReferralsRecursively(level + 1, userId, refCode, `${path}${i}_`);
    }
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  await createReferralsRecursively(1, rootId, rootRefCode);
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const countResult = await executeQuery(`
    SELECT COUNT(*) FROM users WHERE username LIKE 'test_opt_%'
  `);
  
  const totalCount = parseInt(countResult.rows[0].count);
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${totalCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ`);
  
  return {
    rootId,
    rootRefCode,
    totalUsers: totalCount
  };
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
 * @param {number} rootId ID –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
 */
async function testStandardApproach(rootId) {
  console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...`);
  
  const startTime = performance.now();
  let queryCount = 0;
  
  // –ò–º–∏—Ç–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
  async function getReferralsStandardWay(userId, currentLevel = 0, maxLevel = config.depth) {
    if (currentLevel >= maxLevel) {
      return { count: 0, users: [] };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const query = `
      SELECT u.id, u.username, u.ref_code 
      FROM users u
      WHERE u.parent_ref_code = (
        SELECT ref_code FROM users WHERE id = $1
      )
    `;
    
    const result = await executeQuery(query, [userId]);
    queryCount++;
    
    let totalCount = result.rows.length;
    let allUsers = [...result.rows];
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    for (const user of result.rows) {
      const childResults = await getReferralsStandardWay(
        user.id, 
        currentLevel + 1,
        maxLevel
      );
      
      totalCount += childResults.count;
      allUsers = allUsers.concat(childResults.users);
    }
    
    return { count: totalCount, users: allUsers };
  }
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
  const result = await getReferralsStandardWay(rootId);
  
  const endTime = performance.now();
  const duration = endTime - startTime;
  
  console.log(`‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥: ${result.count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} –º—Å`);
  console.log(`üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SQL –∑–∞–ø—Ä–æ—Å–æ–≤: ${queryCount}`);
  
  return {
    count: result.count,
    duration,
    queryCount,
    approach: 'standard'
  };
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º–∏ CTE
 * @param {number} rootId ID –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
 */
async function testOptimizedApproach(rootId) {
  console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º–∏ CTE...`);
  
  const startTime = performance.now();
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º CTE
  const query = `
    WITH RECURSIVE referral_chain AS (
      -- –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –Ω–∞—Ö–æ–¥–∏–º –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      SELECT 
        u.id, 
        u.username, 
        u.ref_code, 
        u.parent_ref_code,
        1 AS level
      FROM 
        users u
      INNER JOIN 
        (SELECT ref_code FROM users WHERE id = $1) root
      ON 
        u.parent_ref_code = root.ref_code
      
      UNION ALL
      
      -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –Ω–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
      SELECT 
        u.id, 
        u.username, 
        u.ref_code, 
        u.parent_ref_code, 
        rc.level + 1 AS level
      FROM 
        users u
      INNER JOIN 
        referral_chain rc ON u.parent_ref_code = rc.ref_code
      WHERE 
        rc.level < $2 -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
    )
    -- –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —É—Ä–æ–≤–Ω—è–º
    SELECT 
      level,
      COUNT(*) AS count,
      ARRAY_AGG(id) AS user_ids
    FROM 
      referral_chain
    GROUP BY 
      level
    ORDER BY 
      level
  `;
  
  const result = await executeQuery(query, [rootId, config.depth]);
  
  const endTime = performance.now();
  const duration = endTime - startTime;
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  let totalCount = 0;
  for (const row of result.rows) {
    totalCount += parseInt(row.count);
  }
  
  console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: ${totalCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} –º—Å`);
  console.log(`üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SQL –∑–∞–ø—Ä–æ—Å–æ–≤: 1`);
  
  if (config.verboseOutput) {
    console.log("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:");
    for (const row of result.rows) {
      console.log(`–£—Ä–æ–≤–µ–Ω—å ${row.level}: ${row.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }
  }
  
  return {
    count: totalCount,
    duration,
    queryCount: 1,
    approach: 'optimized',
    levelDistribution: result.rows
  };
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö CTE
 * @param {number} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
 */
async function testGetInviters(userId) {
  console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  const startTime = performance.now();
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º CTE –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤
  const query = `
    WITH RECURSIVE inviter_chain AS (
      -- –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –Ω–∞—Ö–æ–¥–∏–º –ø—Ä—è–º–æ–≥–æ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞
      SELECT 
        u.id, 
        u.username,
        u.ref_code, 
        u.parent_ref_code,
        1 AS level
      FROM 
        users u
      INNER JOIN
        users target ON u.ref_code = target.parent_ref_code
      WHERE 
        target.id = $1
      
      UNION ALL
      
      -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
      SELECT 
        u.id, 
        u.username,
        u.ref_code, 
        u.parent_ref_code, 
        ic.level + 1 AS level
      FROM 
        users u
      INNER JOIN 
        inviter_chain ic ON u.ref_code = ic.parent_ref_code
      WHERE 
        u.parent_ref_code IS NOT NULL AND
        ic.level < 20
    )
    -- –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞
    SELECT 
      id,
      username,
      level
    FROM 
      inviter_chain
    ORDER BY 
      level
  `;
  
  const result = await executeQuery(query, [userId]);
  
  const endTime = performance.now();
  const duration = endTime - startTime;
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ –≤ —Ü–µ–ø–æ—á–∫–µ`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} –º—Å`);
  
  if (config.verboseOutput && result.rows.length > 0) {
    console.log("\n–¶–µ–ø–æ—á–∫–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤:");
    for (const row of result.rows) {
      console.log(`–£—Ä–æ–≤–µ–Ω—å ${row.level}: ID ${row.id}, ${row.username}`);
    }
  }
  
  return {
    count: result.rows.length,
    duration,
    inviters: result.rows
  };
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
 * @param {number} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
 */
async function testAtomicRewardsDistribution(userId) {
  console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π...`);
  
  const client = await pool.connect();
  const startTime = performance.now();
  
  try {
    await client.query('BEGIN');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
    const batchId = `test-${Date.now()}`;
    const amount = 100; // –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞ –≤ UNI
    
    await client.query(`
      INSERT INTO reward_distribution_logs 
      (source_user_id, batch_id, currency, earned_amount, status, processed_at)
      VALUES ($1, $2, 'UNI', $3, 'processing', NOW())
    `, [userId, batchId, amount.toString()]);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    const invitersQuery = `
      WITH RECURSIVE inviter_chain AS (
        SELECT 
          u.id,
          u.parent_ref_code,
          1 AS level
        FROM 
          users u
        WHERE 
          u.id = $1
        
        UNION ALL
        
        SELECT 
          u.id,
          u.parent_ref_code,
          ic.level + 1
        FROM 
          users u
        JOIN 
          inviter_chain ic ON u.ref_code = ic.parent_ref_code
        WHERE 
          u.parent_ref_code IS NOT NULL AND
          ic.level < 20
      )
      SELECT 
        u.id,
        u.username,
        u.balance_uni,
        ic.level
      FROM 
        inviter_chain ic
      JOIN 
        users u ON u.id = ic.id
      WHERE 
        ic.level > 0
      ORDER BY 
        ic.level
    `;
    
    const invitersResult = await client.query(invitersQuery, [userId]);
    const inviters = invitersResult.rows;
    
    if (inviters.length === 0) {
      await client.query(`
        UPDATE reward_distribution_logs
        SET status = 'completed', levels_processed = 0, inviter_count = 0, 
            total_distributed = '0', completed_at = NOW()
        WHERE batch_id = $1
      `, [batchId]);
      
      await client.query('COMMIT');
      
      const endTime = performance.now();
      const duration = endTime - startTime;
      
      console.log(`‚úÖ –ù–µ—Ç –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π`);
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} –º—Å`);
      
      return {
        batchId,
        invitersCount: 0,
        totalDistributed: 0,
        duration,
        status: 'completed'
      };
    }
    
    // –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
    const levelPercents = [
      5.0,  // –£—Ä–æ–≤–µ–Ω—å 1: 5%
      3.0,  // –£—Ä–æ–≤–µ–Ω—å 2: 3%
      2.0,  // –£—Ä–æ–≤–µ–Ω—å 3: 2%
      1.0,  // –£—Ä–æ–≤–µ–Ω—å 4: 1%
      0.8,  // –£—Ä–æ–≤–µ–Ω—å 5: 0.8%
      0.5,  // –£—Ä–æ–≤–µ–Ω—å 6: 0.5%
      0.3,  // –£—Ä–æ–≤–µ–Ω—å 7: 0.3%
      0.3,  // –£—Ä–æ–≤–µ–Ω—å 8: 0.3%
      0.3,  // –£—Ä–æ–≤–µ–Ω—å 9: 0.3%
      0.3,  // –£—Ä–æ–≤–µ–Ω—å 10: 0.3%
      0.2,  // –£—Ä–æ–≤–µ–Ω—å 11: 0.2%
      0.2,  // –£—Ä–æ–≤–µ–Ω—å 12: 0.2%
      0.2,  // –£—Ä–æ–≤–µ–Ω—å 13: 0.2%
      0.2,  // –£—Ä–æ–≤–µ–Ω—å 14: 0.2%
      0.2,  // –£—Ä–æ–≤–µ–Ω—å 15: 0.2%
      0.1,  // –£—Ä–æ–≤–µ–Ω—å 16: 0.1%
      0.1,  // –£—Ä–æ–≤–µ–Ω—å 17: 0.1%
      0.1,  // –£—Ä–æ–≤–µ–Ω—å 18: 0.1%
      0.1,  // –£—Ä–æ–≤–µ–Ω—å 19: 0.1%
      0.1   // –£—Ä–æ–≤–µ–Ω—å 20: 0.1%
    ];
    
    let totalDistributed = 0;
    let updatedInviters = 0;
    let balanceUpdates = [];
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤
    for (const inviter of inviters) {
      const level = inviter.level;
      if (level <= 0 || level > 20) continue;
      
      const percent = levelPercents[level - 1];
      const bonusAmount = amount * (percent / 100);
      
      if (bonusAmount <= 0) continue;
      
      const currentBalance = parseFloat(inviter.balance_uni);
      const newBalance = currentBalance + bonusAmount;
      
      balanceUpdates.push({
        id: inviter.id,
        bonusAmount,
        newBalance,
        level,
        percent
      });
      
      totalDistributed += bonusAmount;
      updatedInviters++;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
    if (balanceUpdates.length > 0) {
      // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å
      const valueStrings = [];
      const valueParams = [];
      let paramIndex = 1;
      
      for (const update of balanceUpdates) {
        valueStrings.push(`($${paramIndex}, $${paramIndex + 1}::numeric)`);
        valueParams.push(update.id, update.newBalance.toString());
        paramIndex += 2;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
      const updateBalanceQuery = `
        UPDATE users AS u
        SET balance_uni = v.new_balance
        FROM (VALUES ${valueStrings.join(', ')}) AS v(id, new_balance)
        WHERE u.id = v.id::integer
      `;
      
      await client.query(updateBalanceQuery, valueParams);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      for (const update of balanceUpdates) {
        await client.query(`
          INSERT INTO transactions (
            user_id, type, currency, amount, status, source, 
            description, source_user_id, category, data
          )
          VALUES ($1, 'referral', 'UNI', $2, 'confirmed', 'Referral Income', 
                  $3, $4, 'bonus', $5)
        `, [
          update.id,
          update.bonusAmount.toString(),
          `Referral reward from level ${update.level} farming (test)`,
          userId,
          JSON.stringify({
            batch_id: batchId,
            level: update.level,
            percent: update.percent
          })
        ]);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    await client.query(`
      UPDATE reward_distribution_logs
      SET 
        status = 'completed', 
        levels_processed = $1, 
        inviter_count = $2, 
        total_distributed = $3, 
        completed_at = NOW()
      WHERE batch_id = $4
    `, [
      inviters.length,
      updatedInviters,
      totalDistributed.toString(),
      batchId
    ]);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('COMMIT');
    
    const endTime = performance.now();
    const duration = endTime - startTime;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ${totalDistributed.toFixed(6)} UNI —Å—Ä–µ–¥–∏ ${updatedInviters} –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} –º—Å`);
    
    if (config.verboseOutput && balanceUpdates.length > 0) {
      console.log("\n–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:");
      for (const update of balanceUpdates) {
        console.log(`–£—Ä–æ–≤–µ–Ω—å ${update.level}: ID ${update.id}, –ë–æ–Ω—É—Å: ${update.bonusAmount.toFixed(6)} UNI (${update.percent}%)`);
      }
    }
    
    return {
      batchId,
      invitersCount: updatedInviters,
      totalDistributed,
      duration,
      status: 'completed'
    };
  } catch (error) {
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('ROLLBACK');
    
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π:`, error);
    
    const endTime = performance.now();
    const duration = endTime - startTime;
    
    return {
      error: error.message,
      duration,
      status: 'failed'
    };
  } finally {
    client.release();
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
async function cleanupTestData() {
  console.log(`\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...`);
  
  try {
    // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    await executeQuery(`
      DELETE FROM transactions 
      WHERE source_user_id IN (SELECT id FROM users WHERE username LIKE 'test_opt_%')
      OR user_id IN (SELECT id FROM users WHERE username LIKE 'test_opt_%')
    `);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ reward_distribution_logs
    await executeQuery(`
      DELETE FROM reward_distribution_logs
      WHERE source_user_id IN (SELECT id FROM users WHERE username LIKE 'test_opt_%')
    `);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ referrals
    await executeQuery(`
      DELETE FROM referrals
      WHERE user_id IN (SELECT id FROM users WHERE username LIKE 'test_opt_%')
      OR inviter_id IN (SELECT id FROM users WHERE username LIKE 'test_opt_%')
    `);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const deleteResult = await executeQuery(`
      DELETE FROM users WHERE username LIKE 'test_opt_%'
      RETURNING id
    `);
    
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rows.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:`, error);
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */
async function runTests() {
  try {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n`);
    console.log(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
    console.log(`- –ì–ª—É–±–∏–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${config.depth}`);
    console.log(`- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–µ—Ç–≤–ª–µ–Ω–∏—è: ${config.branchingFactor}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const { rootId } = await createTestReferralStructure();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    const standardResults = await testStandardApproach(rootId);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    const optimizedResults = await testOptimizedApproach(rootId);
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥–ª—É–±–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤
    const leafQuery = `
      WITH RECURSIVE all_users AS (
        SELECT id FROM users WHERE id = $1
        
        UNION ALL
        
        SELECT u.id
        FROM users u
        JOIN all_users au ON u.parent_ref_code = (SELECT ref_code FROM users WHERE id = au.id)
      )
      SELECT id FROM all_users
      WHERE id <> $1
      ORDER BY id DESC
      LIMIT 1
    `;
    
    const leafResult = await executeQuery(leafQuery, [rootId]);
    
    if (leafResult.rows.length > 0) {
      const leafId = leafResult.rows[0].id;
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤
      await testGetInviters(leafId);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
      await testAtomicRewardsDistribution(leafId);
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log(`\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`);
    console.log(`‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê`);
    console.log(`‚îÇ –ú–µ—Ç—Ä–∏–∫–∞              ‚îÇ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π   ‚îÇ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚îÇ`);
    console.log(`‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§`);
    console.log(`‚îÇ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –º—Å ‚îÇ ${standardResults.duration.toFixed(2).padStart(13)} ‚îÇ ${optimizedResults.duration.toFixed(2).padStart(14)} ‚îÇ`);
    console.log(`‚îÇ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤  ‚îÇ ${standardResults.queryCount.toString().padStart(13)} ‚îÇ ${optimizedResults.queryCount.toString().padStart(14)} ‚îÇ`);
    console.log(`‚îÇ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤    ‚îÇ ${standardResults.count.toString().padStart(13)} ‚îÇ ${optimizedResults.count.toString().padStart(14)} ‚îÇ`);
    console.log(`‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò`);
    
    // –†–∞—Å—á–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è
    const speedup = standardResults.duration / optimizedResults.duration;
    console.log(`\nüöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${speedup.toFixed(2)}x`);
    console.log(`üîç –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤: ${standardResults.queryCount}x`);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (config.cleanupAfterTests) {
      await cleanupTestData();
    }
    
    console.log(`\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:`, error);
  } finally {
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();