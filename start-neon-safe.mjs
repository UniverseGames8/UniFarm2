/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Neon DB
 * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import { config } from 'dotenv';
import { Pool } from 'pg';
import { spawn } from 'child_process';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
config({ path: '.env.neon' });

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Neon DB
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';
process.env.NODE_ENV = 'production';
// –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
process.env.SKIP_PARTITION_CREATION = 'true';
process.env.IGNORE_PARTITION_ERRORS = 'true';

console.log('===============================================');
console.log('üöÄ –ó–∞–ø—É—Å–∫ UniFarm —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Neon DB');
console.log('===============================================');
console.log('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
console.log('  DATABASE_PROVIDER:', process.env.DATABASE_PROVIDER);
console.log('  FORCE_NEON_DB:', process.env.FORCE_NEON_DB);
console.log('  DISABLE_REPLIT_DB:', process.env.DISABLE_REPLIT_DB);
console.log('  NODE_ENV:', process.env.NODE_ENV);
console.log('  SKIP_PARTITION_CREATION:', process.env.SKIP_PARTITION_CREATION);
console.log('===============================================');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
if (!process.env.DATABASE_URL) {
  console.error('‚ùå ERROR: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env.neon —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç DATABASE_URL');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

try {
  const result = await pool.query('SELECT NOW() as now');
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  console.log(`  –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].now}`);
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const tablesResult = await pool.query(`
    SELECT table_name 
    FROM information_schema.tables 
    WHERE table_schema = 'public'
    ORDER BY table_name;
  `);
  
  console.log(`‚úÖ –ë–î —Å–æ–¥–µ—Ä–∂–∏—Ç ${tablesResult.rowCount} —Ç–∞–±–ª–∏—Ü`);
  console.log('===============================================');
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
  await pool.end();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  const serverProcess = spawn('node', ['dist/index.js'], {
    env: {
      ...process.env,
      DATABASE_PROVIDER: 'neon',
      FORCE_NEON_DB: 'true', 
      DISABLE_REPLIT_DB: 'true',
      OVERRIDE_DB_PROVIDER: 'neon',
      SKIP_PARTITION_CREATION: 'true',
      IGNORE_PARTITION_ERRORS: 'true'
    },
    stdio: 'inherit'
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
  serverProcess.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
    process.exit(1);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
  serverProcess.on('exit', (code) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–æ–¥ 1)
    if (code !== 0) {
      if (code === 1) {
        console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º 1 (–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)');
        console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        setTimeout(() => {
          const restartProcess = spawn('node', ['dist/index.js'], {
            env: {
              ...process.env,
              DATABASE_PROVIDER: 'neon',
              FORCE_NEON_DB: 'true', 
              DISABLE_REPLIT_DB: 'true',
              OVERRIDE_DB_PROVIDER: 'neon',
              SKIP_PARTITION_CREATION: 'true',
              IGNORE_PARTITION_ERRORS: 'true'
            },
            stdio: 'inherit'
          });
          
          restartProcess.on('exit', (restartCode) => {
            if (restartCode !== 0) {
              console.error(`‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å –∫–æ–¥–æ–º: ${restartCode}`);
              process.exit(restartCode);
            }
          });
        }, 3000);
      } else {
        console.error(`‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
        process.exit(code);
      }
    }
  });
  
  // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    serverProcess.kill('SIGINT');
  });
  
  process.on('SIGTERM', () => {
    serverProcess.kill('SIGTERM');
  });
  
} catch (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Neon DB:', err.message);
  console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env.neon');
  process.exit(1);
}