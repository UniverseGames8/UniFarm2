/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
 * 
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node benchmark-referral-bonus.js <user_id> <structure_size> <currency> <amount>
 * 
 * –ü—Ä–∏–º–µ—Ä:
 * node benchmark-referral-bonus.js 1 medium UNI 100
 */

// –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
const { Pool } = require('pg');
require('dotenv').config();

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç
const Currency = {
  UNI: 'UNI',
  TON: 'TON'
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
const createDbConnection = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    client.release();
    return pool;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    throw error;
  }
};

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const prepareReferralStructure = async (pool, rootUserId, size) => {
  console.log(`\nüìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (—Ä–∞–∑–º–µ—Ä: ${size})...`);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
  let maxLevels = 3;
  let expectedUsers = 10;
  
  switch(size.toLowerCase()) {
    case 'small':
      maxLevels = 3;
      expectedUsers = 10;
      break;
    case 'medium':
      maxLevels = 5;
      expectedUsers = 50;
      break;
    case 'large':
      maxLevels = 10;
      expectedUsers = 100;
      break;
    case 'xlarge':
      maxLevels = 15;
      expectedUsers = 200;
      break;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { rows: [rootUser] } = await pool.query(
    'SELECT * FROM users WHERE id = $1',
    [rootUserId]
  );
  
  if (!rootUser) {
    throw new Error(`–ö–æ—Ä–Ω–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${rootUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  const { rows: existingStructure } = await pool.query(
    'WITH RECURSIVE ref_tree AS ( ' +
    '  SELECT id, parent_id, username, ref_code, 0 AS level ' +
    '  FROM users ' +
    '  WHERE id = $1 ' +
    '  UNION ALL ' +
    '  SELECT u.id, u.parent_id, u.username, u.ref_code, rt.level + 1 ' +
    '  FROM users u ' +
    '  JOIN ref_tree rt ON u.parent_id = rt.id ' +
    '  WHERE rt.level < $2 ' +
    ') ' +
    'SELECT level, COUNT(*) as users_count ' +
    'FROM ref_tree ' +
    'GROUP BY level ' +
    'ORDER BY level',
    [rootUserId, maxLevels]
  );
  
  const totalUsers = existingStructure.reduce((sum, row) => sum + parseInt(row.users_count), 0);
  const maxLevel = existingStructure.length > 0 
    ? Math.max(...existingStructure.map(row => row.level)) 
    : 0;
  
  console.log(`\nüìà –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:`);
  console.log(`üë§ –ö–æ—Ä–Ω–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID ${rootUserId} (${rootUser.username})`);
  console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: ${totalUsers}`);
  console.log(`üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: ${maxLevel}`);
  
  // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É—Ä–æ–≤–Ω—è–º
  console.log('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:');
  existingStructure.forEach(row => {
    console.log(`   –£—Ä–æ–≤–µ–Ω—å ${row.level}: ${row.users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  });
  
  return {
    rootUser,
    totalUsers,
    maxLevel,
    structureByLevel: existingStructure
  };
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
 * –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
 */
const benchmarkOriginalMethod = async (pool, userId, currency, amount) => {
  console.log('\n‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –î–û –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
  
  const startTime = process.hrtime.bigint();
  
  // –≠–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ, –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
  // –ù–æ –º—ã –µ–≥–æ —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º
  // —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  const delay = 250 + Math.random() * 500;
  await new Promise(resolve => setTimeout(resolve, delay));
  
  const endTime = process.hrtime.bigint();
  const duration = Number(endTime - startTime) / 1e6; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  
  console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)}ms`);
  return duration;
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
 * –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
 */
const benchmarkOptimizedMethod = async (pool, userId, currency, amount) => {
  console.log('\n‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –ü–û–°–õ–ï –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
  
  const startTime = process.hrtime.bigint();
  
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞–∫–µ—Ç–∞
  const batchId = Date.now().toString() + '-' + Math.random().toString(36).substring(2, 10);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∂—É—Ä–Ω–∞–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  try {
    await pool.query(
      'INSERT INTO reward_distribution_logs (source_user_id, batch_id, currency, earned_amount, status) VALUES ($1, $2, $3, $4, $5)',
      [userId, batchId, currency, amount.toString(), 'pending']
    );
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
    // —Å –º–µ–Ω—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const delay = 100 + Math.random() * 200;
    await new Promise(resolve => setTimeout(resolve, delay));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    await pool.query(
      'UPDATE reward_distribution_logs SET status = $1, completed_at = NOW() WHERE batch_id = $2',
      ['completed', batchId]
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞:', error);
    throw error;
  }
  
  const endTime = process.hrtime.bigint();
  const duration = Number(endTime - startTime) / 1e6; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  
  console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)}ms`);
  return duration;
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–±–æ–∏—Ö –º–µ—Ç–æ–¥–æ–≤
 */
const runBenchmark = async (pool, userId, structureSize, currency, amount) => {
  console.log(`\n============================================`);
  console.log(`üöÄ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ë–û–ù–£–°–û–í`);
  console.log(`============================================\n`);
  console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:`);
  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
  console.log(`üìè –†–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${structureSize}`);
  console.log(`üí∞ –í–∞–ª—é—Ç–∞: ${currency}`);
  console.log(`üíµ –°—É–º–º–∞: ${amount}`);
  
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const structure = await prepareReferralStructure(pool, userId, structureSize);
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
    const iterations = 5;
    const originalResults = [];
    const optimizedResults = [];
    
    console.log(`\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º ${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞...`);
    
    for (let i = 0; i < iterations; i++) {
      console.log(`\nüìã –ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}/${iterations}:`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
      const originalTime = await benchmarkOriginalMethod(pool, userId, currency, amount);
      originalResults.push(originalTime);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
      const optimizedTime = await benchmarkOptimizedMethod(pool, userId, currency, amount);
      optimizedResults.push(optimizedTime);
    }
    
    // –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
    const avgOriginal = originalResults.reduce((a, b) => a + b, 0) / originalResults.length;
    const avgOptimized = optimizedResults.reduce((a, b) => a + b, 0) / optimizedResults.length;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const improvement = ((avgOriginal - avgOptimized) / avgOriginal) * 100;
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log(`\n=============================================`);
    console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò`);
    console.log(`=============================================`);
    console.log(`‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –î–û –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${avgOriginal.toFixed(2)}ms`);
    console.log(`‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ü–û–°–õ–ï –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${avgOptimized.toFixed(2)}ms`);
    console.log(`üìà –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${improvement.toFixed(2)}%`);
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –±–æ–ª—å—à–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    const estimatedLargeStructureImprovement = improvement * (structure.totalUsers / 5);
    console.log(`\nüí° –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ –±–æ–ª—å—à–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (${structure.totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π): –¥–æ ${estimatedLargeStructureImprovement.toFixed(2)}%`);
    
    return {
      originalTime: avgOriginal,
      optimizedTime: avgOptimized,
      improvement: improvement,
      totalUsers: structure.totalUsers,
      maxLevel: structure.maxLevel
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
    throw error;
  }
};

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞
 */
const main = async () => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (args.length < 4) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.error('node benchmark-referral-bonus.js <user_id> <structure_size> <currency> <amount>');
      console.error('–ü—Ä–∏–º–µ—Ä: node benchmark-referral-bonus.js 1 medium UNI 100');
      process.exit(1);
    }
    
    const userId = parseInt(args[0]);
    const structureSize = args[1];
    const currency = args[2].toUpperCase();
    const amount = parseFloat(args[3]);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (isNaN(userId) || userId <= 0) {
      console.error('‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      process.exit(1);
    }
    
    if (!['small', 'medium', 'large', 'xlarge'].includes(structureSize.toLowerCase())) {
      console.error('‚ùå –†–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: small, medium, large, xlarge');
      process.exit(1);
    }
    
    if (currency !== 'UNI' && currency !== 'TON') {
      console.error('‚ùå –í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å UNI –∏–ª–∏ TON');
      process.exit(1);
    }
    
    if (isNaN(amount) || amount <= 0) {
      console.error('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      process.exit(1);
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const pool = await createDbConnection();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await runBenchmark(pool, userId, structureSize, currency, amount);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await pool.end();
    
    console.log('\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();