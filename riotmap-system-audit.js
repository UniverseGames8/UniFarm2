/**
 * –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ UNIFARM –°–û–ì–õ–ê–°–ù–û RIOTMAP.md
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 * –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ RIOTMAP.md
 */

import pkg from 'pg';
const { Pool } = pkg;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || process.env.NEON_DATABASE_URL,
});

class RiotmapAuditor {
  constructor() {
    this.results = {
      missions: { passed: 0, failed: 0, details: [] },
      tonBoost: { passed: 0, failed: 0, details: [] },
      farming: { passed: 0, failed: 0, details: [] },
      referral: { passed: 0, failed: 0, details: [] },
      dailyBonus: { passed: 0, failed: 0, details: [] },
      api: { passed: 0, failed: 0, details: [] },
      database: { passed: 0, failed: 0, details: [] }
    };
  }

  log(message, status = 'info') {
    const colors = {
      info: '\x1b[36m',    // cyan
      pass: '\x1b[32m',    // green
      fail: '\x1b[31m',    // red
      warn: '\x1b[33m',    // yellow
      reset: '\x1b[0m'
    };
    console.log(`${colors[status]}${message}${colors.reset}`);
  }

  async checkMissions() {
    this.log('\nüéØ –ü–†–û–í–ï–†–ö–ê –ú–ò–°–°–ò–ô –°–û–ì–õ–ê–°–ù–û RIOTMAP.md', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const missionsQuery = 'SELECT * FROM missions WHERE is_active = true ORDER BY id';
      const { rows: missions } = await pool.query(missionsQuery);

      // –û–∂–∏–¥–∞–µ–º—ã–µ –º–∏—Å—Å–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ RIOTMAP.md
      const expectedMissions = [
        { type: 'telegram_group', reward: '500.00', link: 'https://t.me/universegameschat' },
        { type: 'telegram_channel', reward: '500.00', link: 'https://t.me/universegames' },
        { type: 'youtube', reward: '500.00', link: 'https://youtube.com/@universegamesyoutube' },
        { type: 'tiktok', reward: '500.00', link: 'https://www.tiktok.com/@universegames.io' }
      ];

      this.log(`‚úì –ù–∞–π–¥–µ–Ω–æ –º–∏—Å—Å–∏–π –≤ –ë–î: ${missions.length}`, missions.length === 4 ? 'pass' : 'fail');
      
      if (missions.length === 4) {
        this.results.missions.passed++;
        this.results.missions.details.push('‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏—Å—Å–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç RIOTMAP (4 —à—Ç.)');
      } else {
        this.results.missions.failed++;
        this.results.missions.details.push(`‚úó –û–∂–∏–¥–∞–ª–æ—Å—å 4 –º–∏—Å—Å–∏–∏, –Ω–∞–π–¥–µ–Ω–æ ${missions.length}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏—Å—Å–∏—é
      for (let i = 0; i < expectedMissions.length; i++) {
        const expected = expectedMissions[i];
        const actual = missions[i];

        if (actual) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
          if (actual.type === expected.type) {
            this.log(`  ‚úì –ú–∏—Å—Å–∏—è ${i+1}: —Ç–∏–ø ${actual.type} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`, 'pass');
            this.results.missions.passed++;
          } else {
            this.log(`  ‚úó –ú–∏—Å—Å–∏—è ${i+1}: –æ–∂–∏–¥–∞–ª—Å—è —Ç–∏–ø ${expected.type}, –ø–æ–ª—É—á–µ–Ω ${actual.type}`, 'fail');
            this.results.missions.failed++;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
          if (parseFloat(actual.reward_uni) === 500.00) {
            this.log(`  ‚úì –ú–∏—Å—Å–∏—è ${i+1}: –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ 500 UNI –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`, 'pass');
            this.results.missions.passed++;
          } else {
            this.log(`  ‚úó –ú–∏—Å—Å–∏—è ${i+1}: –æ–∂–∏–¥–∞–ª–æ—Å—å 500 UNI, –ø–æ–ª—É—á–µ–Ω–æ ${actual.reward_uni}`, 'fail');
            this.results.missions.failed++;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É
          if (actual.link === expected.link) {
            this.log(`  ‚úì –ú–∏—Å—Å–∏—è ${i+1}: —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`, 'pass');
            this.results.missions.passed++;
          } else {
            this.log(`  ‚úó –ú–∏—Å—Å–∏—è ${i+1}: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞`, 'fail');
            this.results.missions.failed++;
          }
        } else {
          this.log(`  ‚úó –ú–∏—Å—Å–∏—è ${i+1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'fail');
          this.results.missions.failed++;
        }
      }

    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏—Å—Å–∏–π: ${error.message}`, 'fail');
      this.results.missions.failed++;
    }
  }

  async checkTonBoost() {
    this.log('\nüíé –ü–†–û–í–ï–†–ö–ê TON BOOST –°–û–ì–õ–ê–°–ù–û RIOTMAP.md', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç—ã –±—É—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const boostQuery = 'SELECT * FROM boost_packages WHERE is_active = true ORDER BY price_ton';
      const { rows: boosts } = await pool.query(boostQuery);

      // –û–∂–∏–¥–∞–µ–º—ã–µ –ø–∞–∫–µ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ RIOTMAP.md
      const expectedBoosts = [
        { name: 'Starter Boost', price_ton: '1.00', bonus_uni: '10000.00', daily_percent: '0.5' },
        { name: 'Standard Boost', price_ton: '5.00', bonus_uni: '75000.00', daily_percent: '1.0' },
        { name: 'Advanced Boost', price_ton: '15.00', bonus_uni: '250000.00', daily_percent: '2.0' },
        { name: 'Premium Boost', price_ton: '25.00', bonus_uni: '500000.00', daily_percent: '2.5' }
      ];

      this.log(`‚úì –ù–∞–π–¥–µ–Ω–æ boost –ø–∞–∫–µ—Ç–æ–≤: ${boosts.length}`, boosts.length === 4 ? 'pass' : 'fail');
      
      if (boosts.length === 4) {
        this.results.tonBoost.passed++;
      } else {
        this.results.tonBoost.failed++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç
      expectedBoosts.forEach((expected, i) => {
        const actual = boosts.find(b => b.price_ton === expected.price_ton);
        if (actual) {
          this.log(`  ‚úì ${expected.name}: –Ω–∞–π–¥–µ–Ω`, 'pass');
          this.results.tonBoost.passed++;
        } else {
          this.log(`  ‚úó ${expected.name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'fail');
          this.results.tonBoost.failed++;
        }
      });

    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON Boost: ${error.message}`, 'fail');
      this.results.tonBoost.failed++;
    }
  }

  async checkFarming() {
    this.log('\nüåæ –ü–†–û–í–ï–†–ö–ê UNI FARMING –°–û–ì–õ–ê–°–ù–û RIOTMAP.md', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ñ–∞—Ä–º–∏–Ω–≥–∞
      const farmingTables = ['farming_deposits', 'farming_rewards'];
      
      for (const table of farmingTables) {
        const checkQuery = `SELECT COUNT(*) as count FROM information_schema.tables WHERE table_name = '${table}'`;
        const { rows } = await pool.query(checkQuery);
        
        if (rows[0].count > 0) {
          this.log(`  ‚úì –¢–∞–±–ª–∏—Ü–∞ ${table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'pass');
          this.results.farming.passed++;
        } else {
          this.log(`  ‚úó –¢–∞–±–ª–∏—Ü–∞ ${table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'fail');
          this.results.farming.failed++;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 3% –≤ –¥–µ–Ω—å
      const farmingConfigQuery = 'SELECT * FROM farming_config WHERE is_active = true';
      const { rows: configs } = await pool.query(farmingConfigQuery);
      
      if (configs.length > 0) {
        const dailyRate = parseFloat(configs[0].daily_rate || '0.03');
        if (dailyRate === 0.03) {
          this.log(`  ‚úì –ë–∞–∑–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 3% –≤ –¥–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`, 'pass');
          this.results.farming.passed++;
        } else {
          this.log(`  ‚úó –û–∂–∏–¥–∞–ª–∞—Å—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 3%, –ø–æ–ª—É—á–µ–Ω–∞ ${dailyRate * 100}%`, 'fail');
          this.results.farming.failed++;
        }
      }

    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${error.message}`, 'fail');
      this.results.farming.failed++;
    }
  }

  async checkReferralSystem() {
    this.log('\nüë• –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –°–û–ì–õ–ê–°–ù–û RIOTMAP.md', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      const referralTables = ['referral_tree', 'referral_rewards'];
      
      for (const table of referralTables) {
        const checkQuery = `SELECT COUNT(*) as count FROM information_schema.tables WHERE table_name = '${table}'`;
        const { rows } = await pool.query(checkQuery);
        
        if (rows[0].count > 0) {
          this.log(`  ‚úì –¢–∞–±–ª–∏—Ü–∞ ${table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'pass');
          this.results.referral.passed++;
        } else {
          this.log(`  ‚úó –¢–∞–±–ª–∏—Ü–∞ ${table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'fail');
          this.results.referral.failed++;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
      const refCodesQuery = 'SELECT ref_code, COUNT(*) as count FROM users WHERE ref_code IS NOT NULL GROUP BY ref_code HAVING COUNT(*) > 1';
      const { rows: duplicates } = await pool.query(refCodesQuery);
      
      if (duplicates.length === 0) {
        this.log(`  ‚úì –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã`, 'pass');
        this.results.referral.passed++;
      } else {
        this.log(`  ‚úó –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã: ${duplicates.length}`, 'fail');
        this.results.referral.failed++;
      }

    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ${error.message}`, 'fail');
      this.results.referral.failed++;
    }
  }

  async checkDailyBonus() {
    this.log('\nüéÅ –ü–†–û–í–ï–†–ö–ê –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ë–û–ù–£–°–ê –°–û–ì–õ–ê–°–ù–û RIOTMAP.md', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
      const bonusQuery = 'SELECT COUNT(*) as count FROM information_schema.tables WHERE table_name = \'daily_bonuses\'';
      const { rows } = await pool.query(bonusQuery);
      
      if (rows[0].count > 0) {
        this.log(`  ‚úì –¢–∞–±–ª–∏—Ü–∞ daily_bonuses —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'pass');
        this.results.dailyBonus.passed++;
      } else {
        this.log(`  ‚úó –¢–∞–±–ª–∏—Ü–∞ daily_bonuses –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'fail');
        this.results.dailyBonus.failed++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É streak (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π)
      const streakQuery = 'SELECT * FROM daily_bonuses WHERE streak_days > 0 LIMIT 1';
      const { rows: streakData } = await pool.query(streakQuery);
      
      if (streakData.length > 0) {
        this.log(`  ‚úì –°–∏—Å—Ç–µ–º–∞ streak –±–æ–Ω—É—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞`, 'pass');
        this.results.dailyBonus.passed++;
      } else {
        this.log(`  ! –°–∏—Å—Ç–µ–º–∞ streak –±–æ–Ω—É—Å–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å`, 'warn');
      }

    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: ${error.message}`, 'fail');
      this.results.dailyBonus.failed++;
    }
  }

  async checkAPIRoutes() {
    this.log('\nüîó –ü–†–û–í–ï–†–ö–ê API –ú–ê–†–®–†–£–¢–û–í –°–û–ì–õ–ê–°–ù–û RIOTMAP.md', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –û—Å–Ω–æ–≤–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ RIOTMAP.md
      const expectedRoutes = [
        '/api/v2/missions/active',
        '/api/v2/missions/complete',
        '/api/v2/farming/deposit',
        '/api/v2/farming/harvest',
        '/api/v2/referral/generate-code',
        '/api/v2/daily-bonus/claim',
        '/api/v2/boost/purchase',
        '/api/v2/user/balance'
      ];

      const fetch = (await import('node-fetch')).default;
      const baseUrl = 'http://localhost:3000';

      for (const route of expectedRoutes) {
        try {
          const response = await fetch(`${baseUrl}${route}`, { 
            method: 'GET',
            timeout: 5000 
          });
          
          if (response.status !== 404) {
            this.log(`  ‚úì ${route}: –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${response.status})`, 'pass');
            this.results.api.passed++;
          } else {
            this.log(`  ‚úó ${route}: –Ω–µ –Ω–∞–π–¥–µ–Ω (404)`, 'fail');
            this.results.api.failed++;
          }
        } catch (error) {
          this.log(`  ‚úó ${route}: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è`, 'fail');
          this.results.api.failed++;
        }
      }

    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: ${error.message}`, 'fail');
      this.results.api.failed++;
    }
  }

  async checkDatabase() {
    this.log('\nüóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• –°–û–ì–õ–ê–°–ù–û RIOTMAP.md', 'info');
    this.log('='.repeat(50), 'info');

    try {
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ RIOTMAP.md
      const expectedTables = [
        'users',
        'missions', 
        'user_missions',
        'farming_deposits',
        'farming_rewards',
        'referral_tree',
        'daily_bonuses',
        'boost_packages',
        'transactions'
      ];

      for (const table of expectedTables) {
        const checkQuery = `SELECT COUNT(*) as count FROM information_schema.tables WHERE table_name = '${table}'`;
        const { rows } = await pool.query(checkQuery);
        
        if (rows[0].count > 0) {
          this.log(`  ‚úì –¢–∞–±–ª–∏—Ü–∞ ${table}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'pass');
          this.results.database.passed++;
        } else {
          this.log(`  ‚úó –¢–∞–±–ª–∏—Ü–∞ ${table}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'fail');
          this.results.database.failed++;
        }
      }

    } catch (error) {
      this.log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${error.message}`, 'fail');
      this.results.database.failed++;
    }
  }

  generateReport() {
    this.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø RIOTMAP.md', 'info');
    this.log('='.repeat(60), 'info');

    const categories = Object.keys(this.results);
    let totalPassed = 0;
    let totalFailed = 0;

    categories.forEach(category => {
      const result = this.results[category];
      const total = result.passed + result.failed;
      const percentage = total > 0 ? Math.round((result.passed / total) * 100) : 0;
      
      totalPassed += result.passed;
      totalFailed += result.failed;

      const status = percentage >= 80 ? 'pass' : percentage >= 50 ? 'warn' : 'fail';
      this.log(`${category.toUpperCase()}: ${result.passed}/${total} (${percentage}%)`, status);
      
      if (result.details.length > 0) {
        result.details.forEach(detail => {
          this.log(`  ${detail}`, 'info');
        });
      }
    });

    const overallTotal = totalPassed + totalFailed;
    const overallPercentage = overallTotal > 0 ? Math.round((totalPassed / overallTotal) * 100) : 0;

    this.log('\n' + '='.repeat(60), 'info');
    this.log(`–û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${totalPassed}/${overallTotal} (${overallPercentage}%)`, 
             overallPercentage >= 80 ? 'pass' : 'fail');

    if (overallPercentage >= 80) {
      this.log('üéâ –°–ò–°–¢–ï–ú–ê –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ RIOTMAP.md', 'pass');
    } else {
      this.log('‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø RIOTMAP.md', 'warn');
    }
  }

  async runFullAudit() {
    this.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ü–†–û–í–ï–†–ö–ò –°–ò–°–¢–ï–ú–´ UNIFARM', 'info');
    this.log('üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º RIOTMAP.md', 'info');
    this.log('='.repeat(60), 'info');

    await this.checkMissions();
    await this.checkTonBoost();
    await this.checkFarming();
    await this.checkReferralSystem();
    await this.checkDailyBonus();
    await this.checkAPIRoutes();
    await this.checkDatabase();
    
    this.generateReport();

    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
const auditor = new RiotmapAuditor();
auditor.runFullAudit().catch(console.error);