/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Neon
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Unix socket –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç TCP/IP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Unix socket –¥–ª—è PostgreSQL
process.env.PGHOST = process.env.PGHOST || 'ep-misty-brook-a4dkea48.us-east-1.aws.neon.tech';  
process.env.PGSSLMODE = process.env.PGSSLMODE || 'prefer';
process.env.PGSOCKET = '';
process.env.PGCONNECT_TIMEOUT = process.env.PGCONNECT_TIMEOUT || '10';

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Neon DB
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';

// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–∫—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ
if (require.main === module) {
  console.log('[Database Fix] ‚úÖ –§–∏–∫—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  console.log('[Database Fix] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
  console.log(`- DATABASE_PROVIDER = ${process.env.DATABASE_PROVIDER}`);
  console.log(`- PGHOST = ${process.env.PGHOST}`);
  console.log(`- PGSSLMODE = ${process.env.PGSSLMODE}`);
  console.log(`- PGCONNECT_TIMEOUT = ${process.env.PGCONNECT_TIMEOUT}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
  if (process.env.DATABASE_URL) {
    console.log('[Database Fix] ‚úÖ DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    console.error('[Database Fix] ‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
async function testDatabaseConnection() {
  const { Pool } = require('pg');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
  if (!process.env.DATABASE_URL) {
    console.error('[Database Fix] ‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    return false;
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Neon DB
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false // –î–ª—è Neon DB
    },
    max: 3, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
    idleTimeoutMillis: 10000,
    connectionTimeoutMillis: 5000
  });

  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø—É–ª–∞
    const client = await pool.connect();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const result = await client.query('SELECT NOW() as time');
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client.release();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª
    await pool.end();
    
    console.log(`[Database Fix] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${result.rows[0].time}`);
    return true;
  } catch (error) {
    console.error(`[Database Fix] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    
    if (error.message.includes('ENOENT') || error.message.includes('socket')) {
      console.error('[Database Fix] üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å Unix socket. –§–∏–∫—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª.');
    }
    
    try {
      await pool.end();
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞
    }
    
    return false;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
module.exports = {
  testDatabaseConnection
};

// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testDatabaseConnection()
    .then(success => {
      if (!success) {
        console.error('[Database Fix] ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error(`[Database Fix] ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      process.exit(1);
    });
}