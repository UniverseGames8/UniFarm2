/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ UniFarm –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ —Å—Ä–µ–¥–µ Replit
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ TypeScript –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
 * - –£–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
 * - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ Replit
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
const startTime = new Date();
console.log('üïí –ó–∞–ø—É—Å–∫:', startTime.toISOString());
console.log('üöÄ UniFarm Server Keeper - –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∏—è');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
const logsDir = path.join(__dirname, 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

// –§–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
const logFile = path.join(logsDir, `server-${Date.now()}.log`);
const logStream = fs.createWriteStream(logFile, { flags: 'a' });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message) {
  const timestamp = new Date().toISOString();
  const formattedMessage = `[${timestamp}] ${message}`;
  console.log(formattedMessage);
  logStream.write(formattedMessage + '\n');
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
let serverProcess = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
function startServer() {
  log('–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ UniFarm...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
  serverProcess = spawn('npx', ['tsx', 'server/index.ts'], {
    env: {
      ...process.env,
      NODE_ENV: 'production',
      FORCE_COLOR: '1', // –í–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    },
  });
  
  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
  serverProcess.stdout.on('data', (data) => {
    process.stdout.write(data);
    logStream.write(data);
  });
  
  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
  serverProcess.stderr.on('data', (data) => {
    process.stderr.write(data);
    logStream.write(data);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  serverProcess.on('close', (code) => {
    const uptime = Math.floor((new Date() - startTime) / 1000);
    log(`–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º ${code}. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(uptime / 60)}–º ${uptime % 60}—Å`);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
    setTimeout(startServer, 3000);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
  serverProcess.on('error', (err) => {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT');
  log('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ Replit');
});

process.on('SIGTERM', () => {
  log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM');
  log('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ Replit');
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
process.on('uncaughtException', (err) => {
  log(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`);
  log('–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
});

// –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
setInterval(() => {
  const uptime = Math.floor((new Date() - startTime) / 1000);
  const hours = Math.floor(uptime / 3600);
  const minutes = Math.floor((uptime % 3600) / 60);
  const seconds = uptime % 60;
  
  log(`‚è±Ô∏è –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç ${hours}—á ${minutes}–º ${seconds}—Å`);
}, 5 * 60 * 1000);

// –ï—â–µ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Ä–∞–±–æ—Ç—ã
setInterval(() => {}, 1000);

log('‚úÖ –°–∫—Ä–∏–ø—Ç –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');