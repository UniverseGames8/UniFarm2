#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –≤ Neon DB
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon –∏
 * –∑–∞–ø—É—Å–∫–∞–µ—Ç drizzle-kit –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ Neon DB.
 */

import fs from 'fs';
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
function loadEnvFromFile() {
  try {
    const envFile = fs.readFileSync('.env.neon', 'utf8');
    const envVars = {};
    
    envFile.split('\n').forEach(line => {
      if (line.trim() && !line.startsWith('#')) {
        const parts = line.split('=');
        if (parts.length >= 2) {
          const key = parts[0].trim();
          const value = parts.slice(1).join('=').trim();
          
          if (key && value) {
            envVars[key] = value;
            process.env[key] = value;
          }
        }
      }
    });
    
    return envVars;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env.neon: ${error.message}`, colors.red);
    return {};
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã drizzle-kit
function runDrizzlePush() {
  return new Promise((resolve, reject) => {
    log('üîÑ –ó–∞–ø—É—Å–∫ drizzle-kit push –¥–ª—è Neon DB...', colors.cyan);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
    if (!process.env.DATABASE_URL) {
      log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!', colors.red);
      return reject(new Error('DATABASE_URL is not set'));
    }
    
    const maskedUrl = process.env.DATABASE_URL.replace(/:[^:]*@/, ':***@');
    log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${maskedUrl}`, colors.yellow);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É npm run db:push
    const drizzlePush = spawn('npm', ['run', 'db:push'], {
      stdio: 'pipe',
      env: process.env
    });
    
    drizzlePush.stdout.on('data', (data) => {
      process.stdout.write(data);
    });
    
    drizzlePush.stderr.on('data', (data) => {
      process.stderr.write(data);
    });
    
    drizzlePush.on('close', (code) => {
      if (code === 0) {
        log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', colors.green);
        resolve();
      } else {
        log(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏, –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${code}`, colors.red);
        reject(new Error(`Migration failed with code ${code}`));
      }
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  log('üåü –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –≤ Neon DB', colors.magenta);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envVars = loadEnvFromFile();
  
  if (!process.env.DATABASE_URL && !envVars.DATABASE_URL) {
    log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –µ—ë –≤ .env.neon', colors.red);
    process.exit(1);
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Neon DB
  process.env.DATABASE_PROVIDER = 'neon';
  process.env.USE_LOCAL_DB_ONLY = 'false';
  process.env.FORCE_NEON_DB = 'true';
  process.env.DISABLE_REPLIT_DB = 'true';
  process.env.OVERRIDE_DB_PROVIDER = 'neon';
  
  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await runDrizzlePush();
    
    log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –≤ Neon DB —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', colors.green);
    log('–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏.', colors.reset);
  } catch (error) {
    log(`\nüí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`, colors.red);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
  log(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
  process.exit(1);
});