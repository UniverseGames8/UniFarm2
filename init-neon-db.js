#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Neon DB –±–∞–∑–æ–≤—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
 * 
 * –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Neon DB –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã –∏–∑ shared/schema.ts
 */

import fs from 'fs';
import { Pool } from 'pg';
import 'dotenv/config';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
function loadEnvFromFile() {
  try {
    const envFile = fs.readFileSync('.env.neon', 'utf8');
    const envVars = {};
    
    envFile.split('\n').forEach(line => {
      if (line.trim() && !line.startsWith('#')) {
        const parts = line.split('=');
        if (parts.length >= 2) {
          const key = parts[0].trim();
          const value = parts.slice(1).join('=').trim();
          
          if (key && value) {
            envVars[key] = value;
            process.env[key] = value;
          }
        }
      }
    });
    
    return envVars;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env.neon: ${error.message}`, colors.red);
    return {};
  }
}

// –û—Å–Ω–æ–≤–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
const createTableQueries = [
  // –¢–∞–±–ª–∏—Ü–∞ auth_users
  `CREATE TABLE IF NOT EXISTS auth_users (
    id SERIAL PRIMARY KEY,
    username TEXT NOT NULL UNIQUE,
    password TEXT DEFAULT 'telegram_auth'
  );`,
  
  // –¢–∞–±–ª–∏—Ü–∞ users
  `CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT UNIQUE,
    guest_id TEXT UNIQUE,
    username TEXT,
    wallet TEXT,
    ton_wallet_address TEXT,
    ref_code TEXT UNIQUE,
    parent_ref_code TEXT,
    balance_uni DECIMAL(18, 6) DEFAULT 0,
    balance_ton DECIMAL(18, 6) DEFAULT 0,
    uni_deposit_amount DECIMAL(18, 6) DEFAULT 0,
    uni_farming_start_timestamp TIMESTAMP,
    uni_farming_balance DECIMAL(18, 6) DEFAULT 0,
    uni_farming_rate DECIMAL(18, 6) DEFAULT 0,
    uni_farming_last_update TIMESTAMP,
    uni_farming_deposit DECIMAL(18, 6) DEFAULT 0,
    uni_farming_activated_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    checkin_last_date TIMESTAMP,
    checkin_streak INTEGER DEFAULT 0
  );`,
  
  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users
  `CREATE INDEX IF NOT EXISTS idx_users_parent_ref_code ON users(parent_ref_code);`,
  `CREATE INDEX IF NOT EXISTS idx_users_ref_code ON users(ref_code);`,
  
  // –¢–∞–±–ª–∏—Ü–∞ farming_deposits
  `CREATE TABLE IF NOT EXISTS farming_deposits (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    amount_uni DECIMAL(18, 6),
    rate_uni DECIMAL(5, 2),
    rate_ton DECIMAL(5, 2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_claim TIMESTAMP,
    is_boosted BOOLEAN DEFAULT FALSE,
    deposit_type TEXT DEFAULT 'regular',
    boost_id INTEGER,
    expires_at TIMESTAMP
  );`,
  
  // –¢–∞–±–ª–∏—Ü–∞ transactions
  `CREATE TABLE IF NOT EXISTS transactions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    type TEXT,
    currency TEXT,
    amount DECIMAL(18, 6),
    status TEXT DEFAULT 'confirmed',
    source TEXT,
    category TEXT,
    tx_hash TEXT,
    description TEXT,
    source_user_id INTEGER,
    wallet_address TEXT,
    data TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  );`,
  
  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions
  `CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id);`,
  `CREATE INDEX IF NOT EXISTS idx_transactions_source_user_id ON transactions(source_user_id);`,
  `CREATE INDEX IF NOT EXISTS idx_transactions_type_status ON transactions(type, status);`,
  
  // –¢–∞–±–ª–∏—Ü–∞ referrals
  `CREATE TABLE IF NOT EXISTS referrals (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) NOT NULL,
    inviter_id INTEGER REFERENCES users(id) NOT NULL,
    level INTEGER NOT NULL,
    reward_uni DECIMAL(18, 6),
    ref_path JSONB[],
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  );`,
  
  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã referrals
  `CREATE INDEX IF NOT EXISTS idx_referrals_user_id ON referrals(user_id);`,
  `CREATE INDEX IF NOT EXISTS idx_referrals_inviter_id ON referrals(inviter_id);`,
  `CREATE INDEX IF NOT EXISTS idx_referrals_user_inviter ON referrals(user_id, inviter_id);`,
  `CREATE INDEX IF NOT EXISTS idx_referrals_level ON referrals(level);`,
  
  // –¢–∞–±–ª–∏—Ü–∞ missions
  `CREATE TABLE IF NOT EXISTS missions (
    id SERIAL PRIMARY KEY,
    type TEXT,
    title TEXT,
    description TEXT,
    reward_uni DECIMAL(18, 6),
    is_active BOOLEAN DEFAULT TRUE
  );`,
  
  // –¢–∞–±–ª–∏—Ü–∞ user_missions
  `CREATE TABLE IF NOT EXISTS user_missions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    mission_id INTEGER REFERENCES missions(id),
    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  );`,
  
  // –¢–∞–±–ª–∏—Ü–∞ uni_farming_deposits
  `CREATE TABLE IF NOT EXISTS uni_farming_deposits (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id),
    amount DECIMAL(18, 6) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    rate_per_second DECIMAL(20, 18) NOT NULL,
    last_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    is_active BOOLEAN DEFAULT TRUE
  );`,
  
  // –¢–∞–±–ª–∏—Ü–∞ ton_boost_deposits
  `CREATE TABLE IF NOT EXISTS ton_boost_deposits (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id),
    ton_amount DECIMAL(18, 5) NOT NULL,
    bonus_uni DECIMAL(18, 6) NOT NULL,
    rate_ton_per_second DECIMAL(20, 18) NOT NULL,
    rate_uni_per_second DECIMAL(20, 18) NOT NULL,
    accumulated_ton DECIMAL(18, 10) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    is_active BOOLEAN DEFAULT TRUE
  );`,
  
  // –¢–∞–±–ª–∏—Ü–∞ launch_logs
  `CREATE TABLE IF NOT EXISTS launch_logs (
    id SERIAL PRIMARY KEY,
    telegram_user_id BIGINT,
    ref_code TEXT,
    platform TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    user_agent TEXT,
    init_data TEXT,
    ip_address TEXT,
    request_id TEXT,
    user_id INTEGER REFERENCES users(id)
  );`,
  
  // –¢–∞–±–ª–∏—Ü–∞ partition_logs
  `CREATE TABLE IF NOT EXISTS partition_logs (
    id SERIAL PRIMARY KEY,
    operation TEXT NOT NULL,
    partition_name TEXT,
    message TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    status TEXT NOT NULL,
    error_details TEXT
  );`,
  
  // –¢–∞–±–ª–∏—Ü–∞ reward_distribution_logs
  `CREATE TABLE IF NOT EXISTS reward_distribution_logs (
    id SERIAL PRIMARY KEY,
    batch_id TEXT NOT NULL,
    source_user_id INTEGER NOT NULL,
    earned_amount DECIMAL(18, 6) NOT NULL,
    currency TEXT NOT NULL,
    processed_at TIMESTAMP,
    status TEXT DEFAULT 'pending',
    levels_processed INTEGER,
    inviter_count INTEGER,
    total_distributed DECIMAL(18, 6),
    error_message TEXT,
    completed_at TIMESTAMP
  );`,
  
  // –¢–∞–±–ª–∏—Ü–∞ performance_metrics
  `CREATE TABLE IF NOT EXISTS performance_metrics (
    id SERIAL PRIMARY KEY,
    operation TEXT NOT NULL,
    batch_id TEXT,
    duration_ms DECIMAL(12, 2) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    details TEXT
  );`,
  
  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã performance_metrics
  `CREATE INDEX IF NOT EXISTS idx_performance_metrics_timestamp ON performance_metrics(timestamp);`,
  `CREATE INDEX IF NOT EXISTS idx_performance_metrics_operation ON performance_metrics(operation);`,
  `CREATE INDEX IF NOT EXISTS idx_performance_metrics_batch_id ON performance_metrics(batch_id);`
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  log('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ Neon DB...', colors.blue);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  loadEnvFromFile();
  
  if (!process.env.DATABASE_URL) {
    throw new Error('DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.neon');
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    },
    max: 5
  });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB...', colors.cyan);
    await pool.query('SELECT 1');
    log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', colors.green);
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Neon DB.', colors.yellow);
    log('‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è IF NOT EXISTS).', colors.yellow);
    log('‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.', colors.yellow);
    
    // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    log('\n–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...', colors.magenta);
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...', colors.cyan);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const client = await pool.connect();
    
    try {
      await client.query('BEGIN');
      
      for (const query of createTableQueries) {
        try {
          await client.query(query);
          // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 40 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, –∫–∞–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è
          const queryPreview = query.replace(/\s+/g, ' ').trim().substring(0, 40) + '...';
          log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å: ${queryPreview}`, colors.green);
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, colors.red);
          throw error;
        }
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await client.query('COMMIT');
      log('\n‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!', colors.green);
    } catch (error) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      await client.query('ROLLBACK');
      log(`\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞: ${error.message}`, colors.red);
      throw error;
    } finally {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø—É–ª
      client.release();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...', colors.cyan);
    
    const tables = await pool.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    log(`\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (${tables.rowCount}):`, colors.magenta);
    tables.rows.forEach(row => {
      log(`- ${row.table_name}`, colors.reset);
    });
    
    log('\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', colors.green);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    await pool.end();
    
    return true;
  } catch (error) {
    log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
    console.error(error);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    await pool.end();
    
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initDatabase()
  .then(success => {
    if (success) {
      log('\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', colors.green);
    } else {
      log('\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏', colors.red);
      process.exit(1);
    }
  })
  .catch(error => {
    log(`\nüí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
    console.error(error);
    process.exit(1);
  });