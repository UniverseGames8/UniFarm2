import { Pool } from 'pg';
import * as dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __dirname = path.dirname(fileURLToPath(import.meta.url));

async function main() {
  if (!process.env.DATABASE_URL) {
    throw new Error('DATABASE_URL –Ω–µ —É–∫–∞–∑–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.');
  }

  console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');

    // –ß—Ç–µ–Ω–∏–µ SQL-—Ñ–∞–π–ª–∞
    const sqlFilePath = path.join(__dirname, '0000_create_tables.sql');
    console.log(`üìÇ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${sqlFilePath}`);
    
    const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');
    console.log('üìù SQL –º–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞');

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    await pool.query(sqlContent);
    console.log('‚úÖ SQL –º–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ –±—É–¥—É—â–µ–º)
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–π...');
    const journalPath = path.join(__dirname, 'meta', '_journal.json');
    const journalData = JSON.parse(fs.readFileSync(journalPath, 'utf8'));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationExists = journalData.entries.some(entry => entry.version === '0000');
    
    if (!migrationExists) {
      journalData.entries.push({
        idx: journalData.entries.length,
        version: '0000',
        when: Date.now().toString(),
        tag: 'create_tables',
        breakpoints: false
      });
      
      fs.writeFileSync(journalPath, JSON.stringify(journalData, null, 2));
      console.log('‚úÖ –ñ—É—Ä–Ω–∞–ª –º–∏–≥—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω');
    } else {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∂—É—Ä–Ω–∞–ª–µ');
    }

    console.log('‚ú® –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    throw error;
  } finally {
    await pool.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
main()
  .then(() => {
    console.log('‚ú® –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  });