/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–¥—É–ª—è db-selector
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—á–µ–º—É –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç
 * –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
 */

import 'dotenv/config';
import * as neonDB from './server/db.js';
import * as replitDB from './server/db-replit.js';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async function checkDbSettings() {
  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', colors.blue);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  log('\nüìã –¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', colors.magenta);
  log(`DATABASE_PROVIDER: ${process.env.DATABASE_PROVIDER || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`, colors.reset);
  log(`USE_LOCAL_DB_ONLY: ${process.env.USE_LOCAL_DB_ONLY || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`, colors.reset);
  log(`FORCE_NEON_DB: ${process.env.FORCE_NEON_DB || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`, colors.reset);
  log(`DISABLE_REPLIT_DB: ${process.env.DISABLE_REPLIT_DB || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`, colors.reset);
  log(`OVERRIDE_DB_PROVIDER: ${process.env.OVERRIDE_DB_PROVIDER || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`, colors.reset);
  
  if (process.env.DATABASE_URL) {
    const maskedUrl = process.env.DATABASE_URL.replace(/:[^:]*@/, ':***@');
    log(`DATABASE_URL: ${maskedUrl}`, colors.reset);
    log(`URL —Å–æ–¥–µ—Ä–∂–∏—Ç "neon": ${maskedUrl.includes('neon') ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`, colors.reset);
    log(`URL —Å–æ–¥–µ—Ä–∂–∏—Ç "pooler": ${maskedUrl.includes('pooler') ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`, colors.reset);
  } else {
    log(`DATABASE_URL: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`, colors.red);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Replit PostgreSQL –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const hasReplitPgEnv = process.env.PGHOST && process.env.PGUSER === 'runner';
  log(`\nReplit PostgreSQL –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${hasReplitPgEnv ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`, hasReplitPgEnv ? colors.green : colors.yellow);
  
  if (hasReplitPgEnv) {
    log(`PGHOST: ${process.env.PGHOST}`, colors.reset);
    log(`PGUSER: ${process.env.PGUSER}`, colors.reset);
    log(`PGDATABASE: ${process.env.PGDATABASE}`, colors.reset);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –ø–æ –ª–æ–≥–∏–∫–µ db-selector
  const enforceLocalDbOnly = process.env.USE_LOCAL_DB_ONLY === 'true';
  const forceNeonDb = process.env.FORCE_NEON_DB === 'true';
  const disableReplitDb = process.env.DISABLE_REPLIT_DB === 'true';
  const overrideProvider = process.env.OVERRIDE_DB_PROVIDER;
  const defaultProvider = process.env.DATABASE_PROVIDER || 'neon';
  
  let expectedProvider = defaultProvider;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  if (enforceLocalDbOnly) {
    expectedProvider = 'replit';
    log(`\n‚ö†Ô∏è USE_LOCAL_DB_ONLY=true, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Replit PostgreSQL`, colors.yellow);
  } else if (forceNeonDb) {
    expectedProvider = 'neon';
    log(`\n‚ö†Ô∏è FORCE_NEON_DB=true, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Neon DB`, colors.yellow);
  } else if (disableReplitDb) {
    expectedProvider = 'neon';
    log(`\n‚ö†Ô∏è DISABLE_REPLIT_DB=true, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Neon DB`, colors.yellow);
  } else if (overrideProvider) {
    expectedProvider = overrideProvider;
    log(`\n‚ö†Ô∏è OVERRIDE_DB_PROVIDER=${overrideProvider}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä`, colors.yellow);
  }
  
  log(`\nüîç –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${expectedProvider}`, colors.cyan);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–µ–∏–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
  log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö:', colors.blue);
  
  try {
    log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB:', colors.blue);
    const neonResult = await neonDB.testDatabaseConnection();
    if (typeof neonResult === 'boolean') {
      log(`‚úÖ Neon DB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${neonResult ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ —É–¥–∞–ª–æ—Å—å'}`, neonResult ? colors.green : colors.red);
    } else {
      log(`‚úÖ Neon DB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${neonResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ —É–¥–∞–ª–æ—Å—å'}`, neonResult.success ? colors.green : colors.red);
      if (neonResult.message) {
        log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${neonResult.message}`, colors.reset);
      }
      if (neonResult.timestamp) {
        log(`   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${neonResult.timestamp}`, colors.reset);
      }
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB: ${error.message}`, colors.red);
  }
  
  try {
    log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Replit PostgreSQL:', colors.blue);
    const replitResult = await replitDB.testDatabaseConnection();
    if (typeof replitResult === 'boolean') {
      log(`‚úÖ Replit PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${replitResult ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ —É–¥–∞–ª–æ—Å—å'}`, replitResult ? colors.green : colors.red);
    } else {
      log(`‚úÖ Replit PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${replitResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ —É–¥–∞–ª–æ—Å—å'}`, replitResult.success ? colors.green : colors.red);
      if (replitResult.message) {
        log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${replitResult.message}`, colors.reset);
      }
      if (replitResult.timestamp) {
        log(`   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${replitResult.timestamp}`, colors.reset);
      }
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Replit PostgreSQL: ${error.message}`, colors.red);
  }
  
  log('\nüèÜ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', colors.magenta);
  
  if (expectedProvider === 'neon') {
    log('1. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env –∏–ª–∏ .env.neon:', colors.reset);
    log('   DATABASE_PROVIDER=neon', colors.reset);
    log('   USE_LOCAL_DB_ONLY=false', colors.reset);
    log('   FORCE_NEON_DB=true', colors.reset);
    log('   DATABASE_URL=postgresql://user:password@your-neon-host.com/database', colors.reset);
  } else {
    log('1. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Replit PostgreSQL —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env:', colors.reset);
    log('   DATABASE_PROVIDER=replit', colors.reset);
    log('   USE_LOCAL_DB_ONLY=true', colors.reset);
  }
  
  log('\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª server/db-selector-new.ts –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–∏–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤–∞—à –≤—ã–±–æ—Ä', colors.reset);
  log('3. –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', colors.reset);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDbSettings()
  .then(() => {
    log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', colors.green);
  })
  .catch(error => {
    log(`\n‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
    console.error(error);
  });