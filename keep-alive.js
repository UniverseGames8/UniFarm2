/**
 * –°–∫—Ä–∏–ø—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã UniFarm
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

const { spawn } = require('child_process');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –≤ —á–∞—Å
  maxRestartsPerHour: 20,
  
  // –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  cooldownPeriodSec: 3,
  
  // –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
  logFile: 'keep-alive.log',
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
  command: 'node',
  args: ['start-unified.js'],
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  env: {
    NODE_ENV: 'production',
    PORT: '3000',
    DATABASE_PROVIDER: 'neon',
    FORCE_NEON_DB: 'true',
    DISABLE_REPLIT_DB: 'true',
    OVERRIDE_DB_PROVIDER: 'neon',
    SKIP_PARTITION_CREATION: 'true',
    IGNORE_PARTITION_ERRORS: 'true',
    KEEP_PROCESS_ALIVE: 'true' // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
  }
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
const stats = {
  startTime: new Date(),
  restarts: 0,
  recentRestarts: [],
  consecutiveNormalExits: 0
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
function log(message) {
  const timestamp = new Date().toISOString();
  const logEntry = `[${timestamp}] ${message}\n`;
  
  console.log(`[KeepAlive] ${message}`);
  
  try {
    fs.appendFileSync(config.logFile, logEntry);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: ${error.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
function checkRestartLimit() {
  const now = Date.now();
  const oneHourAgo = now - (60 * 60 * 1000);
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ö
  stats.recentRestarts = stats.recentRestarts.filter(time => time > oneHourAgo);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
  return stats.recentRestarts.length < config.maxRestartsPerHour;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
function startProcess() {
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const env = { ...process.env, ...config.env };
  
  log(`–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${config.command} ${config.args.join(' ')}`);
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  const child = spawn(config.command, config.args, {
    env,
    stdio: 'pipe' // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  });
  
  // ID –ø—Ä–æ—Ü–µ—Å—Å–∞
  const pid = child.pid;
  log(`–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω —Å PID: ${pid}`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
  child.stdout.on('data', (data) => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    process.stdout.write(data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const output = data.toString();
    if (output.includes('[Server] Starting on port') || 
        output.includes('serving on port')) {
      log(`‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000`);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  child.stderr.on('data', (data) => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    process.stderr.write(data);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  child.on('close', (code) => {
    stats.restarts++;
    stats.recentRestarts.push(Date.now());
    
    if (code === 0) {
      stats.consecutiveNormalExits++;
      log(`–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º 0 (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ). –≠—Ç–æ ${stats.consecutiveNormalExits}-–π —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.`);
      
      // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —à—Ç–∞—Ç–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–≥–∏–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      if (stats.consecutiveNormalExits >= 3) {
        log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${stats.consecutiveNormalExits} –ø–æ–¥—Ä—è–¥ —à—Ç–∞—Ç–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –∫–æ–¥–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞.`);
      }
    } else {
      stats.consecutiveNormalExits = 0;
      log(`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    if (checkRestartLimit()) {
      log(`–û–∂–∏–¥–∞–µ–º ${config.cooldownPeriodSec} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...`);
      
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
      setTimeout(() => {
        log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ (${stats.restarts} —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞)...`);
        startProcess();
      }, config.cooldownPeriodSec * 1000);
    } else {
      log(`‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ (${config.maxRestartsPerHour} –∑–∞ —á–∞—Å). –ñ–¥–µ–º —á–∞—Å.`);
      
      // –ñ–¥–µ–º —á–∞—Å –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
      setTimeout(() => {
        log(`–ü—Ä–æ—à–µ–ª —á–∞—Å –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞. –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.`);
        stats.recentRestarts = []; // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        startProcess();
      }, 60 * 60 * 1000);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
  child.on('error', (error) => {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${error.message}`);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    setTimeout(() => {
      log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...`);
      startProcess();
    }, 5000);
  });
  
  return child;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è keep-alive —Å–∫—Ä–∏–ø—Ç–∞
process.on('SIGINT', () => {
  log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
process.on('uncaughtException', (error) => {
  log(`‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
  log(error.stack);
  log('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É keep-alive —Å–∫—Ä–∏–ø—Ç–∞...');
});

// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
console.log('========================================================================');
console.log('  –ó–ê–ü–£–°–ö UNIFARM –° –ó–ê–©–ò–¢–û–ô –û–¢ –ó–ê–í–ï–†–®–ï–ù–ò–Ø');
console.log('========================================================================');
console.log('–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());
console.log('–ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
console.log('–ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –≤ —á–∞—Å:', config.maxRestartsPerHour);
console.log('–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏:', config.cooldownPeriodSec, '—Å–µ–∫');
console.log('========================================================================');

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
log('üöÄ –ó–∞–ø—É—Å–∫ UniFarm —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
startProcess();