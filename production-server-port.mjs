/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ production-—Å–µ—Ä–≤–µ—Ä–∞ UniFarm –Ω–∞ Replit
 * –° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
 * 
 * –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–π PostgreSQL –æ—Ç Replit,
 * –∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è Neon DB
 */

import { fileURLToPath } from 'url';
import path from 'path';
import { createServer } from 'http';
import express from 'express';
import fs from 'fs';
import { createRequire } from 'module';

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –∏–º–ø–æ—Ä—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const require = createRequire(import.meta.url);

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π PostgreSQL
process.env.DATABASE_PROVIDER = 'replit';
process.env.USE_LOCAL_DB_ONLY = 'true';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const PORT = parseInt(process.env.PORT || '3000', 10);
const BASE_PORT = PORT; // –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
const MAX_PORT_ATTEMPTS = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫

console.log(`[DB] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: replit (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–∞—è PostgreSQL)`);
console.log(`üöÄ –ó–∞–ø—É—Å–∫ UniFarm –≤ production —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
async function isPortAvailable(port) {
  return new Promise(resolve => {
    const server = createServer();
    
    server.once('error', (err) => {
      if (err.code === 'EADDRINUSE') {
        resolve(false); // –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç
      } else {
        resolve(true); // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–Ω—ã–º
      }
    });
    
    server.once('listening', () => {
      server.close();
      resolve(true); // –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    });
    
    server.listen(port);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä—Ç–∞
async function startServerWithAutoPort() {
  let port = BASE_PORT;
  let attempt = 0;
  
  // –ü—Ä–æ–±—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Ä—Ç—ã, –Ω–∞—á–∏–Ω–∞—è —Å BASE_PORT
  while (attempt < MAX_PORT_ATTEMPTS) {
    const available = await isPortAvailable(port);
    if (available) {
      // –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      process.env.PORT = port.toString();
      console.log(`‚úÖ –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...`);
      return port;
    }
    
    // –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ—Ä—Ç ${port + 1}...`);
    port++;
    attempt++;
  }
  
  // –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
  throw new Error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –ø–æ—Å–ª–µ ${MAX_PORT_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ production-—Å–µ—Ä–≤–µ—Ä–∞
async function startProductionServer() {
  try {
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º production-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
    const port = await startServerWithAutoPort();
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ production-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å production-—Å–µ—Ä–≤–µ—Ä
    const appPath = './dist/index.js';
    console.log(`üîé –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ ${appPath}...`);
    
    try {
      // –ü—É—Ç—å –∫ production-—Å–±–æ—Ä–∫–µ
      const app = await import(appPath);
      
      if (app) {
        console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ ${appPath}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π express —Å–µ—Ä–≤–µ—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      console.log('‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –∑–∞–ø–∞—Å–Ω–æ–≥–æ express —Å–µ—Ä–≤–µ—Ä–∞...');
      
      const app = express();
      
      // –ë–∞–∑–æ–≤—ã–µ middleware
      app.use(express.json());
      app.use(express.urlencoded({ extended: true }));
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
      app.get('/api/health', (req, res) => {
        res.json({
          status: 'ok',
          message: 'UniFarm API —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∑–∞–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ',
          timestamp: new Date().toISOString()
        });
      });
      
      // –°—Ç–∞—Ç–∏–∫–∞ –∏–∑ dist, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const distPublicPath = path.join(__dirname, 'dist', 'public');
      if (fs.existsSync(distPublicPath)) {
        app.use(express.static(distPublicPath));
        console.log(`üìÇ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ ${distPublicPath}`);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
      app.use((req, res) => {
        res.status(404).json({
          error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
          message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∑–∞–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ'
        });
      });
      
      // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      app.listen(port, '0.0.0.0', () => {
        console.log(`‚úÖ –ó–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:${port}`);
      });
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startProductionServer();