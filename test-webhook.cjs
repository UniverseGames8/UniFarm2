/**
 * –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è webhook Telegram –±–æ—Ç–∞ UniFarm
 * 
 * –¶–µ–π —Å–∫—Ä–∏–ø—Ç –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook, –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ
 * –∑–∞–ø–∏—Ç–∏ —Ç–∞ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —ó—Ö –æ–±—Ä–æ–±–∫—É.
 */

const fetch = require('node-fetch');
const path = require('path');
const fs = require('fs');

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤—Ä—É—á–Ω—É
function loadEnv() {
  try {
    const envPath = path.join(__dirname, '.env');
    if (fs.existsSync(envPath)) {
      const content = fs.readFileSync(envPath, 'utf-8');
      const lines = content.split('\n');
      
      lines.forEach(line => {
        const match = line.match(/^([^=]+)=(.*)$/);
        if (match && match[1] && match[2]) {
          const key = match[1].trim();
          const value = match[2].trim().replace(/^["']|["']$/g, '');
          if (!process.env[key]) {
            process.env[key] = value;
          }
        }
      });
      
      console.log('–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ .env —Ñ–∞–π–ª—É');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ .env —Ñ–∞–π–ª—É:', error.message);
  }
}

loadEnv();

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const botToken = process.env.TELEGRAM_BOT_TOKEN;
if (!botToken) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.');
  console.error('–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É –≤ .env —Ñ–∞–π–ª—ñ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
  process.exit(1);
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
const logDir = path.join(__dirname, 'logs');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
function log(message, isError = false) {
  const timestamp = new Date().toISOString();
  const logFile = path.join(logDir, 'webhook-test.log');
  const logMessage = `[${timestamp}] ${isError ? 'ERROR: ' : ''}${message}\n`;
  
  console[isError ? 'error' : 'log'](message);
  
  try {
    fs.appendFileSync(logFile, logMessage);
  } catch (err) {
    console.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª: ${err.message}`);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–ª–∏–∫—É Telegram API
async function callTelegramApi(method, params = {}) {
  try {
    const url = `https://api.telegram.org/bot${botToken}/${method}`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(params)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞ ${response.status}: ${errorText}`);
    }
    
    return await response.json();
  } catch (error) {
    log(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—É ${method}: ${error.message}`, true);
    return { ok: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ webhook
async function getWebhookInfo() {
  log('–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π webhook...');
  
  const result = await callTelegramApi('getWebhookInfo');
  
  if (result.ok) {
    const info = result.result;
    log(`‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ:`);
    log(`URL: ${info.url || '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
    log(`–ú–∞—î –Ω–æ–≤—ñ –∑–∞–ø–∏—Ç–∏: ${info.has_custom_certificate ? '–¢–∞–∫' : '–ù—ñ'}`);
    log(`–û—á—ñ–∫—É—é—á—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${info.pending_update_count || 0}`);
    
    if (info.last_error_date) {
      const errorDate = new Date(info.last_error_date * 1000);
      log(`‚ö†Ô∏è –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: ${info.last_error_message} (${errorDate.toISOString()})`, true);
    }
    
    return info;
  } else {
    log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: ${result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`, true);
    return null;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
async function setWebhook(url) {
  log(`–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook –Ω–∞ URL: ${url}...`);
  
  const result = await callTelegramApi('setWebhook', {
    url,
    drop_pending_updates: true,
    allowed_updates: ['message', 'callback_query']
  });
  
  if (result.ok) {
    log(`‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${url}`);
    return true;
  } else {
    log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook: ${result.error || result.description || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`, true);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook
async function deleteWebhook() {
  log('–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ webhook...');
  
  const result = await callTelegramApi('deleteWebhook', {
    drop_pending_updates: true
  });
  
  if (result.ok) {
    log('‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ');
    return true;
  } else {
    log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: ${result.error || result.description || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`, true);
    return false;
  }
}

// –ó–∞–º—ñ–Ω—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–æ—Å—Ç—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ URL
async function checkWebhookUrl(url) {
  log(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ URL: ${url}...`);
  
  try {
    const response = await fetch(url, {
      method: 'HEAD',
      timeout: 5000
    });
    
    if (response.ok) {
      log(`‚úÖ URL ${url} –¥–æ—Å—Ç—É–ø–Ω–∏–π (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
      return true;
    } else {
      log(`‚ö†Ô∏è URL ${url} –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å: ${response.status}`, true);
      return false;
    }
  } catch (error) {
    log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ ${url}: ${error.message}`, true);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–º–µ–Ω—ñ –±–æ—Ç–∞
async function sendTestMessage(chatId, text = '–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ UniFarm –±–æ—Ç–∞') {
  log(`–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É ${chatId}...`);
  
  const result = await callTelegramApi('sendMessage', {
    chat_id: chatId,
    text,
    parse_mode: 'HTML'
  });
  
  if (result.ok) {
    log(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ`);
    return true;
  } else {
    log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${result.error || result.description || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`, true);
    return false;
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è webhook
async function testWebhook() {
  try {
    log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è webhook...');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π webhook
    const currentWebhook = await getWebhookInfo();
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞
    const botInfo = await callTelegramApi('getMe');
    if (botInfo.ok) {
      log(`–ë–æ—Ç: @${botInfo.result.username} (${botInfo.result.first_name})`);
    } else {
      log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–æ–∫–µ–Ω.', true);
      return;
    }
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL –¥–ª—è webhook
    let appUrl = process.env.APP_URL;
    if (!appUrl && process.env.REPLIT_SLUG && process.env.REPL_OWNER) {
      appUrl = `https://${process.env.REPLIT_SLUG}.${process.env.REPL_OWNER}.repl.co`;
      log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–µ–Ω–æ APP_URL: ${appUrl}`);
    } else if (appUrl) {
      log(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ APP_URL –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: ${appUrl}`);
    } else {
      log('‚ö†Ô∏è APP_URL –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º');
      // –î–ª—è Replit –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ URL
      const replitHost = process.env.REPL_SLUG ? 
        `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER || 'replit'}.repl.co` : 
        'https://uni-farm-connect-2.osadchukdmitro2.repl.co';
      appUrl = replitHost;
    }
    
    const webhookUrl = process.env.TELEGRAM_WEBHOOK_URL || `${appUrl}/api/telegram/webhook`;
    log(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ webhook URL: ${webhookUrl}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å URL
    const isUrlAccessible = await checkWebhookUrl(webhookUrl);
    if (!isUrlAccessible) {
      log('‚ö†Ô∏è Webhook URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∑–æ–≤–Ω—ñ, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
    }
    
    // –Ø–∫—â–æ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ webhook –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π URL, –Ω–µ –∑–º—ñ–Ω—é—î–º–æ –π–æ–≥–æ
    if (currentWebhook && currentWebhook.url === webhookUrl) {
      log(`‚ÑπÔ∏è Webhook –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${webhookUrl}. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.`);
    } else {
      log(`–ü–æ—Ç–æ—á–Ω–∏–π webhook: ${currentWebhook?.url || '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
      log(`–ë–∞–∂–∞–Ω–∏–π webhook: ${webhookUrl}`);
      
      // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π webhook
      await deleteWebhook();
      
      // –ü–æ—Ç—ñ–º –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π
      const setResult = await setWebhook(webhookUrl);
      if (!setResult) {
        log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ URL —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.', true);
        
        // –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π URL
        const altWebhookUrl = `${appUrl}/webhook`;
        log(`–°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π webhook URL: ${altWebhookUrl}`);
        
        const altResult = await setWebhook(altWebhookUrl);
        if (!altResult) {
          log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π webhook. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏.', true);
          return;
        }
      }
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ webhook
    const updatedWebhook = await getWebhookInfo();
    
    if (!updatedWebhook || !updatedWebhook.url) {
      log('‚ùå Webhook –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.', true);
      return;
    }
    
    log('‚úÖ Webhook –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    log('\n–ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:');
    log(`‚úì –ë–æ—Ç: @${botInfo.result.username}`);
    log(`‚úì Webhook URL: ${updatedWebhook.url}`);
    log(`‚úì –û—á—ñ–∫—É—é—á—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${updatedWebhook.pending_update_count || 0}`);
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    log('\nüîç –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ webhook
    if (updatedWebhook.url !== webhookUrl) {
      log(`‚ö†Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π webhook (${updatedWebhook.url}) –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –±–∞–∂–∞–Ω–æ–≥–æ (${webhookUrl})`, true);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫ webhook
    if (updatedWebhook.last_error_date) {
      const errorDate = new Date(updatedWebhook.last_error_date * 1000);
      log(`‚ö†Ô∏è –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞ webhook: ${updatedWebhook.last_error_message} (${errorDate.toISOString()})`, true);
      
      // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏
      if (updatedWebhook.last_error_message.includes('connection refused') || 
          updatedWebhook.last_error_message.includes('timeout')) {
        log('‚û°Ô∏è –ü—Ä–∏—á–∏–Ω–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤–∞—à —Å–µ—Ä–≤–µ—Ä.', true);
      } else if (updatedWebhook.last_error_message.includes('HTTP error') || 
                updatedWebhook.last_error_message.includes('status code')) {
        log('‚û°Ô∏è –ü—Ä–∏—á–∏–Ω–∞: —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –æ–±—Ä–æ–±–∫–∏ webhook –∑–∞–ø–∏—Ç—ñ–≤.', true);
      }
    }
    
    // –ù–∞–¥–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    log('\nüìã –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è webhook:');
    log('1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram: t.me/' + botInfo.result.username);
    log('2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É');
    log('3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å');
    log('4. –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑\'—è–≤–ª—è—é—Ç—å—Å—è –≤ –ª–æ–≥–∞—Ö:');
    log('   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä');
    log('   - –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∑–æ–≤–Ω—ñ');
    log('   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—É /api/telegram/webhook');
    
  } catch (error) {
    log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ webhook: ${error.message}`, true);
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
testWebhook();