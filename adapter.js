/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ UniFarm
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * 1. –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB
 * 2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Mini App
 * 3. –ü—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å–µ—Å—Å–∏–π —Å cookies
 * 4. –ü—Ä–æ–≤–µ—Ä–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram
 * 
 * –í—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞,
 * –ø—É—Ç–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±–µ—Ä—Ç–∫–∏ –Ω–∞–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
 */

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
require('./db-selector-fix');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram initData
const telegramAuthUtils = require('./telegram-auth-utils');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å cookies
const cookieParser = require('cookie-parser');

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
const { applyRoutesImprovements } = require('./routes-integrator');

/**
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–ø—É—â–µ–Ω–Ω–æ–µ Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ UniFarm
 * @param {Object} app - Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * @returns {Object} - Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
 */
function setupAdapter(app) {
  if (!app) {
    throw new Error('[Adapter] –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express');
  }
  
  console.log('[Adapter] üõ†Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ UniFarm...');
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies
  app.use(cookieParser());
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  applyRoutesImprovements(app);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  setupDiagnosticEndpoints(app);
  
  console.log('[Adapter] ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  
  return app;
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 * @param {Object} app - Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
function setupDiagnosticEndpoints(app) {
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Å—Å–∏–π
  app.get('/api/diag/session-check', (req, res) => {
    const sessionInfo = {
      hasSession: !!req.session,
      sessionId: req.session ? req.session.id : null,
      user: req.session && req.session.user ? {
        id: req.session.user.id,
        username: req.session.user.username
      } : null,
      cookies: {
        hasCookies: Object.keys(req.cookies).length > 0,
        cookieCount: Object.keys(req.cookies).length,
        cookieNames: Object.keys(req.cookies)
      }
    };
    
    res.json({
      success: true,
      message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π –∏ cookies',
      data: sessionInfo
    });
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã CORS
  app.get('/api/diag/cors-check', (req, res) => {
    const corsHeaders = {
      allowOrigin: res.getHeader('Access-Control-Allow-Origin'),
      allowCredentials: res.getHeader('Access-Control-Allow-Credentials'),
      allowMethods: res.getHeader('Access-Control-Allow-Methods'),
      allowHeaders: res.getHeader('Access-Control-Allow-Headers')
    };
    
    res.json({
      success: true,
      message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CORS',
      data: {
        corsHeaders,
        requestOrigin: req.headers.origin || '–Ω–µ —É–∫–∞–∑–∞–Ω',
        requestMethod: req.method
      }
    });
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram Auth
  app.post('/api/diag/telegram-auth-check', (req, res) => {
    const initData = req.body.initData || req.headers['telegram-init-data'] || req.headers['x-telegram-init-data'];
    
    if (!initData) {
      return res.status(400).json({
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç initData –≤ –∑–∞–ø—Ä–æ—Å–µ',
        error: 'MISSING_INIT_DATA'
      });
    }
    
    const telegramData = telegramAuthUtils.processTelegramInitData(initData);
    
    res.json({
      success: true,
      message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram Auth',
      data: {
        isValid: telegramData.isValid,
        error: telegramData.error,
        user: telegramData.user ? {
          telegramId: telegramData.user.telegramId,
          firstName: telegramData.user.firstName,
          username: telegramData.user.username
        } : null
      }
    });
  });
  
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  app.get('/api/diag/db-check', async (req, res) => {
    try {
      const { Pool } = require('pg');
      
      // –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ PostgreSQL
      const pool = new Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: {
          rejectUnauthorized: false // –î–ª—è Neon DB
        },
        max: 1,
        idleTimeoutMillis: 10000,
        connectionTimeoutMillis: 5000
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const client = await pool.connect();
      const result = await client.query('SELECT NOW() as time');
      client.release();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª
      await pool.end();
      
      res.json({
        success: true,
        message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î',
        data: {
          dbTime: result.rows[0].time,
          connectionString: process.env.DATABASE_URL ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          dbProvider: process.env.DATABASE_PROVIDER || '–Ω–µ —É–∫–∞–∑–∞–Ω',
          forceNeonDb: process.env.FORCE_NEON_DB === 'true'
        }
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î',
        error: error.message
      });
    }
  });
  
  console.log('[Adapter] ‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
module.exports = {
  setupAdapter
};