/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Mini App
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö initData –æ—Ç Telegram
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node telegram-auth-diagnosis.js "TELEGRAM_INIT_DATA"
 * 
 * –≥–¥–µ TELEGRAM_INIT_DATA ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram
 */

import crypto from 'crypto';
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
const querystring = require('querystring');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
console.log('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TELEGRAM_BOT_TOKEN
if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.error('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] ‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  console.log('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] ‚ÑπÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ initData –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞.');
} else {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const maskedToken = token.substring(0, 5) + '...' + token.substring(token.length - 5);
  console.log(`[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] ‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω: ${maskedToken}`);
}

// –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const initData = process.argv[2];

if (!initData) {
  console.error('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] ‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å initData –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.');
  console.log('–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: node telegram-auth-diagnosis.js "query_id=AAHdF6IQAAAAAN0XohDhrOrc&user=%7B%22id%22%3A123456789%2C%22first_name%22..."');
  process.exit(1);
}

console.log('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö initData...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function validateInitData(initData, botToken) {
  try {
    // –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É initData
    const urlParams = new URLSearchParams(initData);
    const hash = urlParams.get('hash');
    
    if (!hash) {
      return {
        isValid: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash –≤ initData',
        params: Object.fromEntries(urlParams.entries())
      };
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const dataCheckArr = [];
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–±–µ–∑ hash)
    urlParams.forEach((val, key) => {
      if (key !== 'hash') {
        dataCheckArr.push(`${key}=${val}`);
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
    dataCheckArr.sort();
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
    const dataCheckString = dataCheckArr.join('\n');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    if (botToken) {
      // –°–æ–∑–¥–∞–µ–º HMAC-SHA-256 –ø–æ–¥–ø–∏—Å—å
      const secretKey = crypto.createHmac('sha256', 'WebAppData').update(botToken).digest();
      const calculatedHash = crypto.createHmac('sha256', secretKey)
        .update(dataCheckString)
        .digest('hex');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
      const isValid = calculatedHash === hash;
      
      return {
        isValid,
        calculatedHash,
        receivedHash: hash,
        error: isValid ? null : 'Hash –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞—Å—á–µ—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º',
        params: Object.fromEntries(urlParams.entries())
      };
    } else {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
      return {
        isValid: null, // –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        error: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏',
        params: Object.fromEntries(urlParams.entries())
      };
    }
  } catch (error) {
    return {
      isValid: false,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ initData: ${error.message}`,
      originalError: error
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ initData
function parseUserData(initData) {
  try {
    const urlParams = new URLSearchParams(initData);
    const userStr = urlParams.get('user');
    
    if (!userStr) {
      return {
        success: false,
        error: '–ü–æ–ª–µ user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ initData'
      };
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = JSON.parse(userStr);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const requiredFields = ['id', 'first_name'];
    const missingFields = requiredFields.filter(field => !user[field]);
    
    if (missingFields.length > 0) {
      return {
        success: false,
        error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${missingFields.join(', ')}`,
        user
      };
    }
    
    return {
      success: true,
      user
    };
  } catch (error) {
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`,
      originalError: error
    };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ initData
function checkInitData(initData) {
  console.log('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] üìù –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ initData:');
  console.log(initData);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
  let validationResult;
  try {
    validationResult = validateInitData(initData, process.env.TELEGRAM_BOT_TOKEN);
    
    console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] üîê –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏:');
    if (validationResult.isValid === null) {
      console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞');
    } else if (validationResult.isValid) {
      console.log('‚úÖ –ü–æ–¥–ø–∏—Å—å initData –≤–µ—Ä–Ω–∞!');
    } else {
      console.error('‚ùå –ü–æ–¥–ø–∏—Å—å initData –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!');
      console.error(`–ü–æ–ª—É—á–µ–Ω–Ω—ã–π hash: ${validationResult.receivedHash}`);
      console.error(`–†–∞—Å—á–µ—Ç–Ω—ã–π hash: ${validationResult.calculatedHash}`);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ initData:');
    for (const [key, value] of Object.entries(validationResult.params || {})) {
      if (key === 'user') {
        console.log(`${key}: <—Å–ª–æ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ>`);
      } else {
        console.log(`${key}: ${value}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] üë§ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    const userResult = parseUserData(initData);
    
    if (userResult.success) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã');
      console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userResult.user.id);
      console.log('–ò–º—è:', userResult.user.first_name);
      console.log('–§–∞–º–∏–ª–∏—è:', userResult.user.last_name || '<–Ω–µ —É–∫–∞–∑–∞–Ω–∞>');
      console.log('Username:', userResult.user.username || '<–Ω–µ —É–∫–∞–∑–∞–Ω>');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] üîç –°–∏–º—É–ª—è—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:');
      console.log(`1. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id = ${userResult.user.id}`);
      console.log('2. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏');
      console.log('3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ startParam –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      const startParam = validationResult.params.start_param || null;
      if (startParam) {
        console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:');
        console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${startParam}`);
        console.log('–≠—Ç–æ—Ç –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–º.');
      }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      console.error(userResult.error);
    }
    
  } catch (error) {
    console.error('[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ initData:');
    console.error(error);
  }
  
  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth] üìù –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    console.log('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏.');
  }
  
  if (validationResult && validationResult.error) {
    console.log(`‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É: ${validationResult.error}`);
  }
  
  console.log('‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ initData –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ /api/session/restore.');
  console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Mini App.');
  console.log('‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ cookies —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ Secure –∏ SameSite.');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkInitData(initData);