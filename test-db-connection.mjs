/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Pool –∏–∑ pg
import { Pool } from 'pg';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
const formatDatabaseConfig = (config) => {
  const { host, port, user, database, connectionString } = config;
  
  if (connectionString) {
    // –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    return connectionString.replace(/\/\/([^:]+):([^@]+)@/, '//***:***@');
  }
  
  return `Host: ${host}, Port: ${port}, User: ${user}, Database: ${database}`;
};

// –û–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const testDatabaseConnection = async (config, label = 'Unnamed') => {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è [${label}]...`);
  console.log(`üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${formatDatabaseConfig(config)}`);
  
  const pool = new Pool(config);
  
  try {
    // –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...');
    const result = await client.query('SELECT current_timestamp as time, current_database() as db_name');
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:');
    console.log(`  –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].time}`);
    console.log(`  –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${result.rows[0].db_name}`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    if (tables.rows.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tables.rows.length} —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`);
      tables.rows.forEach((row, index) => {
        console.log(`  ${index + 1}. ${row.table_name}`);
      });
    } else {
      console.log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è.');
    }
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    client.release();
    await pool.end();
    
    console.log(`‚úÖ –ò–¢–û–ì: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ [${label}] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ [${label}]:`, error.message);
    if (error.code) {
      console.error(`üìå –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
    }
    
    try {
      await pool.end();
    } catch (endError) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞
    }
    
    console.log(`‚ùå –ò–¢–û–ì: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ [${label}] –Ω–µ —É–¥–∞–ª–æ—Å—å\n`);
    return false;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
const runAllTests = async () => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
  
  let results = [];
  
  // –¢–µ—Å—Ç 1: –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Replit
  results.push({
    name: '–õ–æ–∫–∞–ª—å–Ω–∞—è PostgreSQL –Ω–∞ Replit',
    success: await testDatabaseConnection({
      host: 'localhost',
      port: 5432,
      user: 'runner',
      password: '',
      database: 'postgres',
    }, '–õ–æ–∫–∞–ª—å–Ω–∞—è PostgreSQL')
  });
  
  // –¢–µ—Å—Ç 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (process.env.DATABASE_URL) {
    results.push({
      name: '–í–Ω–µ—à–Ω—è—è –ë–î (DATABASE_URL)',
      success: await testDatabaseConnection({
        connectionString: process.env.DATABASE_URL,
        ssl: process.env.DATABASE_URL.includes('localhost') ? false : { rejectUnauthorized: false }
      }, 'DATABASE_URL')
    });
  } else {
    console.log('‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω');
    results.push({
      name: '–í–Ω–µ—à–Ω—è—è –ë–î (DATABASE_URL)',
      success: false,
      reason: 'DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  results.forEach((result, index) => {
    console.log(`  ${index + 1}. ${result.name}: ${result.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –ù–ï–£–î–ê–ß–ê'} ${result.reason ? `(${result.reason})` : ''}`);
  });
  
  const successCount = results.filter(r => r.success).length;
  console.log(`\nüìä –ò–¢–û–ì–û: –£—Å–ø–µ—à–Ω–æ ${successCount} –∏–∑ ${results.length} —Ç–µ—Å—Ç–æ–≤`);
  
  if (successCount === 0) {
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å PostgreSQL –≤ –≤–∞—à–µ–º Replit');
    console.log('  2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Replit –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Replit');
    console.log('  3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
runAllTests();