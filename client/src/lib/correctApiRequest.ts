import { fixRequestBody } from './apiFix';
import sessionRestoreService from '../services/sessionRestoreService';

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param endpoint URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ API
 * @param method HTTP –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
 * @param data –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è POST, PUT)
 * @param options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:
 *   - additionalLogging: –≤–∫–ª—é—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 *   - errorHandling: –æ–ø—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 *     - report404: –≤–∫–ª—é—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è 404 –æ—à–∏–±–æ–∫
 *     - detailed: –≤–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 *     - traceId: –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç API –∑–∞–ø—Ä–æ—Å–∞
 */
interface ApiErrorHandlingOptions {
  report404?: boolean;
  detailed?: boolean;
  traceId?: string;
}

interface ApiRequestOptions {
  additionalLogging?: boolean;
  errorHandling?: ApiErrorHandlingOptions;
}

export async function correctApiRequest<T = any>(
  endpoint: string,
  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' = 'GET',
  data?: any,
  options?: ApiRequestOptions
): Promise<T> {
  let fullUrl = '';
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º traceId –∏–∑ –æ–ø—Ü–∏–π, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  let requestId = options?.errorHandling?.traceId || 
                  (Date.now().toString(36) + Math.random().toString(36).substring(2, 7));
  
  // –í–∫–ª—é—á–µ–Ω–æ –ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  const detailedLogging = options?.additionalLogging || options?.errorHandling?.detailed || false;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (endpoint === undefined || endpoint === null) {
      console.error(`[correctApiRequest] [${requestId}] Endpoint –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å undefined –∏–ª–∏ null`);
      throw new Error('API endpoint –Ω–µ —É–∫–∞–∑–∞–Ω');
    }
    
    if (typeof endpoint !== 'string') {
      console.error(`[correctApiRequest] [${requestId}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø endpoint:`, typeof endpoint);
      throw new Error(`API endpoint –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: ${typeof endpoint}`);
    }
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ endpoint
    try {
      if (!endpoint.startsWith('/')) {
        endpoint = '/' + endpoint;
        console.log(`[correctApiRequest] [${requestId}] –î–æ–±–∞–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à –∫ URL:`, endpoint);
      }
      
      if (endpoint.endsWith('/') && endpoint.length > 1) {
        endpoint = endpoint.slice(0, -1);
        console.log(`[correctApiRequest] [${requestId}] –£–¥–∞–ª–µ–Ω –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à –∏–∑ URL:`, endpoint);
      }
    } catch (endpointError) {
      console.error(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ endpoint:`, endpointError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º endpoint
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ URL - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ï–ú PRODUCTION URL
    try {
      // –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π production URL
      const PRODUCTION_HOST = 'uni-farm-connect-x-lukyanenkolawfa.replit.app';
      const FORCED_PRODUCTION_HOST = PRODUCTION_HOST; // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω
      const protocol = 'https:';
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º production URL –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      console.log(`[correctApiRequest] [${requestId}] üöÄ –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º production host: ${FORCED_PRODUCTION_HOST}`);
      
      // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ localStorage —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
      const lastSessionStr = localStorage.getItem('unifarm_last_session');
      let userId = null;
      if (lastSessionStr) {
        try {
          const lastSession = JSON.parse(lastSessionStr);
          userId = lastSession.user_id;
        } catch (e) {
          console.warn(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ userId –∏–∑ localStorage:`, e);
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º userId –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º –∫—Ä–æ–º–µ /session –∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ GET —Å —É–∂–µ –∏–º–µ—é—â–∏–º—Å—è user_id
      if (userId && !endpoint.includes('/session') && 
          !(method === 'GET' && endpoint.includes('user_id='))) {
        const separator = endpoint.includes('?') ? '&' : '?';
        endpoint = `${endpoint}${separator}user_id=${userId}`;
        console.log(`[correctApiRequest] [${requestId}] –î–æ–±–∞–≤–ª–µ–Ω user_id=${userId} –∫ –∑–∞–ø—Ä–æ—Å—É`);
      }
      
      fullUrl = `${protocol}//${FORCED_PRODUCTION_HOST}${endpoint}`;
      console.log(`[correctApiRequest] [${requestId}] –û—Ç–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ${fullUrl}`);
    } catch (urlError) {
      console.error(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ URL:`, urlError);
      fullUrl = endpoint; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
      Accept: 'application/json',
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV !== 'production') {
      // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
      
      // –ü–æ–ª—É—á–∞–µ–º userId —á–µ—Ä–µ–∑ localStorage
      let userId = null;
      try {
        const lastSessionStr = localStorage.getItem('unifarm_last_session');
        if (lastSessionStr) {
          try {
            const lastSession = JSON.parse(lastSessionStr);
            userId = lastSession.user_id;
          } catch (e) {
            console.warn(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ userId –∏–∑ localStorage:`, e);
          }
        }
      } catch (e) {
        console.warn(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ userId:`, e);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º guest_id –Ω–∞–ø—Ä—è–º—É—é –∏–∑ localStorage
      let guestId = null;
      try {
        guestId = localStorage.getItem('unifarm_guest_id');
        if (!guestId) {
          // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏
          const lastSessionStr = localStorage.getItem('unifarm_last_session');
          if (lastSessionStr) {
            try {
              const lastSession = JSON.parse(lastSessionStr);
              guestId = lastSession.guest_id;
            } catch (e) {
              console.warn(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ guestId –∏–∑ localStorage:`, e);
            }
          }
        }
      } catch (e) {
        console.warn(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ guestId:`, e);
      }
      
      // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      headers['x-development-mode'] = 'true';
      
      // –î–æ–±–∞–≤–ª—è–µ–º user_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (userId) {
        headers['x-development-user-id'] = userId.toString();
        headers['x-telegram-user-id'] = userId.toString();
        console.log(`[correctApiRequest] [${requestId}] –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å user_id=${userId}`);
      } else {
        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º ID 1
        headers['x-development-user-id'] = '1';
        headers['x-telegram-user-id'] = '1';
        console.log(`[correctApiRequest] [${requestId}] –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –∑–∞–ø–∞—Å–Ω—ã–º user_id=1`);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º guest_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (guestId) {
        headers['x-development-guest-id'] = guestId;
        console.log(`[correctApiRequest] [${requestId}] –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å guest_id=${guestId}`);
      }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    let body: string | undefined;
    
    try {
      if (data !== undefined) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é fixRequestBody —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        let fixedData;
        try {
          fixedData = fixRequestBody(data);
        } catch (fixError) {
          console.error(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –≤ fixRequestBody:`, fixError);
          fixedData = data; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
        try {
          body = JSON.stringify(fixedData, (key, value) => {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            if (typeof value === 'object' && value !== null) {
              if (key && key.startsWith('_')) return undefined; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–ª—è
              
              // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–æ–≤ –≤ –ª–æ–≥–∞—Ö
              if (Array.isArray(value) && value.length > 100) {
                return `Array(${value.length})`;
              }
            }
            return value;
          });
        } catch (jsonError) {
          console.error(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ JSON:`, jsonError);
          
          // –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
          try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
            const seen = new WeakSet();
            const simplifyObject = (obj: any): any => {
              if (typeof obj === 'function') return '[Function]';
              if (typeof obj !== 'object' || obj === null) return obj;
              if (seen.has(obj)) return '[Circular]';
              
              seen.add(obj);
              const result: any = Array.isArray(obj) ? [] : {};
              
              for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  try {
                    result[key] = simplifyObject(obj[key]);
                  } catch {
                    result[key] = '[Error]';
                  }
                }
              }
              
              return result;
            };
            
            const simplifiedData = simplifyObject(fixedData);
            body = JSON.stringify(simplifiedData);
          } catch (fallbackError) {
            console.error(`[correctApiRequest] [${requestId}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:`, fallbackError);
            
            // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
            body = '{}';
          }
        }
      }
    } catch (bodyError) {
      console.error(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞:`, bodyError);
      // –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      body = '{}';
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    let controller: AbortController | undefined;
    let timeoutId: number | undefined;
    
    try {
      controller = new AbortController();
      const signal = controller.signal;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 30 —Å–µ–∫—É–Ω–¥
      timeoutId = window.setTimeout(() => {
        controller?.abort();
        console.error(`[correctApiRequest] [${requestId}] –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç (30—Å): ${fullUrl}`);
      }, 30000);
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
      const fetchOptions: RequestInit = {
        method,
        headers,
        credentials: 'include',
        signal
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º body —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-GET –∑–∞–ø—Ä–æ—Å–æ–≤
      if (method !== 'GET' && method !== 'HEAD' && body) {
        fetchOptions.body = body;
      } else if ((method === 'GET' || method === 'HEAD') && body) {
        // –î–ª—è GET –∏ HEAD –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ body –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
        console.warn(`[correctApiRequest] [${requestId}] –î–ª—è ${method} –∑–∞–ø—Ä–æ—Å–∞ body –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è`);
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await fetch(fullUrl, fetchOptions);
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      if (timeoutId) {
        clearTimeout(timeoutId);
        timeoutId = undefined;
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
      console.log(`[correctApiRequest] [${requestId}] –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è 404 –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
      if (response.status === 404 && options?.errorHandling?.report404) {
        console.warn(`[correctApiRequest] [${requestId}] 404 –û—à–∏–±–∫–∞ –¥–ª—è URL: ${fullUrl}`);
        console.warn(`[correctApiRequest] [${requestId}] –ú–µ—Ç–æ–¥: ${method}, headers:`, headers);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫
      if (!response.ok) {
        console.warn(`[correctApiRequest] [${requestId}] HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ 401 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        if (response.status === 401 && !endpoint.includes('/session')) {
          console.log(`[correctApiRequest] [${requestId}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è...`);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
          const reauthResult = await sessionRestoreService.autoReauthenticate();
          
          if (reauthResult) {
            console.log(`[correctApiRequest] [${requestId}] –£—Å–ø–µ—à–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å`);
            
            // –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            return correctApiRequest(endpoint, method, data);
          } else {
            console.error(`[correctApiRequest] [${requestId}] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é`);
          }
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
        let errorBody: any;
        try {
          errorBody = await response.json();
        } catch {
          try {
            errorBody = await response.text();
          } catch {
            errorBody = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞';
          }
        }
        
        throw new Error(
          `HTTP –æ—à–∏–±–∫–∞ ${response.status}: ${
            typeof errorBody === 'object' && errorBody?.message
              ? errorBody.message
              : typeof errorBody === 'string'
              ? errorBody
              : response.statusText
          }`
        );
      }

      // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
      try {
        const contentType = response.headers.get('content-type');
        
        if (contentType && contentType.includes('application/json')) {
          const json = await response.json();
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null –∏–ª–∏ undefined
          if (json === null || json === undefined) {
            console.warn(`[correctApiRequest] [${requestId}] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π JSON –æ—Ç–≤–µ—Ç`);
            return {} as T; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ null/undefined
          }
          
          return json;
        } else {
          // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
          const text = await response.text();
          
          // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–º–Ω–æ–≥–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç JSON —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º content-type)
          try {
            if (text.trim().startsWith('{') || text.trim().startsWith('[')) {
              const parsedJson = JSON.parse(text);
              console.log(`[correctApiRequest] [${requestId}] –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ JSON –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:`, 
                typeof parsedJson === 'object' ? 'object' : typeof parsedJson);
              return parsedJson;
            }
          } catch (parseError) {
            console.warn(`[correctApiRequest] [${requestId}] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:`, parseError instanceof Error ? parseError.message : parseError);
          }
          
          console.warn(`[correctApiRequest] [${requestId}] –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (content-type: ${contentType || '–Ω–µ —É–∫–∞–∑–∞–Ω'})`);
          
          // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã–≤–æ–¥–∏–º —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
          if (detailedLogging) {
            const previewText = text.length > 200 ? text.substring(0, 200) + '...' : text;
            console.warn(`[correctApiRequest] [${requestId}] –ù–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:`, previewText);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ HTML
            if (text.includes('<!DOCTYPE html>') || text.includes('<html>')) {
              console.warn(`[correctApiRequest] [${requestId}] –ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON. URL: ${fullUrl}`);
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–±—ä–µ–∫—Ç–µ
          return { 
            success: false,
            text, 
            status: response.status,
            message: '–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON' 
          } as unknown as T;
        }
      } catch (jsonError) {
        const text = await response.text();
        console.warn(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞:`, jsonError);
        console.warn(`[correctApiRequest] [${requestId}] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:`, text);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞: ${jsonError instanceof Error ? jsonError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          text: text.substring(0, 500) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        } as unknown as T;
      }
    } catch (fetchError: any) {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
      if (fetchError?.name === 'AbortError') {
        console.error(`[correctApiRequest] [${requestId}] –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É:`, fullUrl);
        throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ${endpoint}`);
      }
      
      if (fetchError?.message?.includes('NetworkError') || fetchError?.message?.includes('network')) {
        console.error(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:`, fetchError.message);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ${endpoint}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.`);
      }
      
      // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      console.error(`[correctApiRequest] [${requestId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:`, fetchError);
      throw fetchError;
    }
  } catch (error: any) {
    console.error(`[correctApiRequest] [${requestId}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error.message || error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ API
    const errorResponse = {
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API',
      error: error instanceof Error ? { name: error.name, stack: error.stack } : error,
      endpoint,
      method,
    };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º throw –≤–º–µ—Å—Ç–æ return, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    throw errorResponse;
  }
}