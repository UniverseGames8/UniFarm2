/**
 * –≠–¢–ê–ü 3: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram WebApp
 * 
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * 1. –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ Telegram API
 * 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * 3. –û—Ç–ø—Ä–∞–≤–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ alert
 * 4. –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 */

// –≠–¢–ê–ü 3: –¢–∏–ø—ã –æ—à–∏–±–æ–∫ Telegram WebApp
type TelegramErrorType = 
  | 'api_not_available' 
  | 'method_failed' 
  | 'invalid_data' 
  | 'network_error' 
  | 'permission_denied'
  | 'unknown_error';

// –≠–¢–ê–ü 3: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
interface TelegramError {
  type: TelegramErrorType;
  method: string;
  message: string;
  originalError?: any;
  timestamp: number;
  isCritical: boolean;
  context?: Record<string, any>;
}

// –≠–¢–ê–ü 3: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –æ—à–∏–±–æ–∫
interface ErrorServiceState {
  totalErrors: number;
  criticalErrors: number;
  lastError: TelegramError | null;
  errorHistory: TelegramError[];
  isLoggingEnabled: boolean;
}

let errorState: ErrorServiceState = {
  totalErrors: 0,
  criticalErrors: 0,
  lastError: null,
  errorHistory: [],
  isLoggingEnabled: true
};

/**
 * –≠–¢–ê–ü 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É Telegram WebApp —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param method - –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
 * @param error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @param type - –¢–∏–ø –æ—à–∏–±–∫–∏
 * @param isCritical - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
 * @param context - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
export function handleTelegramError(
  method: string,
  error: any,
  type: TelegramErrorType = 'unknown_error',
  isCritical: boolean = false,
  context?: Record<string, any>
): void {
  const message = error?.message || error?.toString() || 'Unknown error occurred';
  
  const telegramError: TelegramError = {
    type,
    method,
    message,
    originalError: error,
    timestamp: Date.now(),
    isCritical,
    context
  };
  
  // –≠–¢–ê–ü 3: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  errorState.totalErrors++;
  if (isCritical) {
    errorState.criticalErrors++;
  }
  errorState.lastError = telegramError;
  
  // –≠–¢–ê–ü 3: –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫)
  errorState.errorHistory.push(telegramError);
  if (errorState.errorHistory.length > 50) {
    errorState.errorHistory.shift();
  }
  
  // –≠–¢–ê–ü 3: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  const logMessage = `[TG ERROR] ${method} ‚Äî ${message}`;
  
  if (isCritical) {
    console.error(logMessage, {
      type,
      context,
      originalError: error,
      timestamp: new Date(telegramError.timestamp).toISOString()
    });
    
    // –≠–¢–ê–ü 3: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    try {
      if (window.Telegram?.WebApp?.showAlert) {
        window.Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞: ${message}`);
      } else {
        alert(`Telegram Error: ${message}`);
      }
    } catch (alertError) {
      console.error('[TG ERROR] Failed to show alert:', alertError);
    }
  } else {
    console.warn(logMessage, {
      type,
      context,
      timestamp: new Date(telegramError.timestamp).toISOString()
    });
  }
}

/**
 * –≠–¢–ê–ü 3: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Telegram API –º–µ—Ç–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param methodName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
 * @param operation - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param isCritical - –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export async function safeTelegramOperation<T>(
  methodName: string,
  operation: () => T | Promise<T>,
  isCritical: boolean = false,
  context?: Record<string, any>
): Promise<T | null> {
  try {
    console.log(`[TG OPERATION] üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${methodName}`);
    const result = await operation();
    console.log(`[TG OPERATION] ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${methodName}`);
    return result;
  } catch (error) {
    handleTelegramError(methodName, error, 'method_failed', isCritical, context);
    return null;
  }
}

/**
 * –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @returns true –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–Ω–æ
 */
export function checkTelegramApiAvailability(): boolean {
  try {
    if (!window.Telegram) {
      handleTelegramError(
        'checkApiAvailability',
        'Telegram object not found',
        'api_not_available',
        true
      );
      return false;
    }
    
    if (!window.Telegram.WebApp) {
      handleTelegramError(
        'checkApiAvailability',
        'Telegram.WebApp not found',
        'api_not_available',
        true
      );
      return false;
    }
    
    console.log('[TG ERROR] ‚úÖ Telegram WebApp API –¥–æ—Å—Ç—É–ø–Ω–æ');
    return true;
  } catch (error) {
    handleTelegramError(
      'checkApiAvailability',
      error,
      'unknown_error',
      true
    );
    return false;
  }
}

/**
 * –≠–¢–ê–ü 3: –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö Telegram API –º–µ—Ç–æ–¥–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
export const SafeTelegramAPI = {
  // –≠–¢–ê–ü 3: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ ready()
  ready: () => safeTelegramOperation(
    'ready',
    () => window.Telegram?.WebApp?.ready(),
    true
  ),
  
  // –≠–¢–ê–ü 3: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ expand()
  expand: () => safeTelegramOperation(
    'expand',
    () => window.Telegram?.WebApp?.expand(),
    false
  ),
  
  // –≠–¢–ê–ü 3: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ close() —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  close: () => {
    console.log('[TG CLOSE CLICKED] üö™ –ó–∞–∫—Ä—ã—Ç–∏–µ Telegram Mini App...');
    return safeTelegramOperation(
      'close',
      () => {
        if (window.Telegram?.WebApp?.close) {
          console.log('[TG CLOSE] ‚úÖ –í—ã–∑—ã–≤–∞–µ–º Telegram.WebApp.close()');
          window.Telegram.WebApp.close();
          return true;
        } else {
          console.warn('[TG CLOSE] ‚ö†Ô∏è Telegram.WebApp.close() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          return false;
        }
      },
      false
    );
  },
  
  // –≠–¢–ê–ü 3: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å MainButton
  mainButton: {
    show: () => safeTelegramOperation(
      'MainButton.show',
      () => window.Telegram?.WebApp?.MainButton?.show(),
      false
    ),
    
    hide: () => safeTelegramOperation(
      'MainButton.hide',
      () => window.Telegram?.WebApp?.MainButton?.hide(),
      false
    ),
    
    setText: (text: string) => safeTelegramOperation(
      'MainButton.setText',
      () => window.Telegram?.WebApp?.MainButton?.setText(text),
      false,
      { text }
    ),
    
    onClick: (callback: () => void) => safeTelegramOperation(
      'MainButton.onClick',
      () => window.Telegram?.WebApp?.MainButton?.onClick(callback),
      false
    )
  },
  
  // –≠–¢–ê–ü 3: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å BackButton
  backButton: {
    show: () => safeTelegramOperation(
      'BackButton.show',
      () => window.Telegram?.WebApp?.BackButton?.show(),
      false
    ),
    
    hide: () => safeTelegramOperation(
      'BackButton.hide',
      () => window.Telegram?.WebApp?.BackButton?.hide(),
      false
    ),
    
    onClick: (callback: () => void) => safeTelegramOperation(
      'BackButton.onClick',
      () => window.Telegram?.WebApp?.BackButton?.onClick(callback),
      false
    )
  },
  
  // –≠–¢–ê–ü 3: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å CloudStorage
  cloudStorage: {
    setItem: (key: string, value: string) => safeTelegramOperation(
      'CloudStorage.setItem',
      () => window.Telegram?.WebApp?.CloudStorage?.setItem(key, value),
      false,
      { key, valueLength: value.length }
    ),
    
    getItem: (key: string) => safeTelegramOperation(
      'CloudStorage.getItem',
      () => window.Telegram?.WebApp?.CloudStorage?.getItem(key),
      false,
      { key }
    ),
    
    removeItem: (key: string) => safeTelegramOperation(
      'CloudStorage.removeItem',
      () => window.Telegram?.WebApp?.CloudStorage?.removeItem(key),
      false,
      { key }
    )
  },
  
  // –≠–¢–ê–ü 3: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  sendData: (data: string) => safeTelegramOperation(
    'sendData',
    () => window.Telegram?.WebApp?.sendData?.(data),
    false,
    { dataLength: data.length }
  ),
  
  // –≠–¢–ê–ü 3: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
  onEvent: (eventType: string, handler: () => void) => safeTelegramOperation(
    'onEvent',
    () => window.Telegram?.WebApp?.onEvent?.(eventType, handler),
    false,
    { eventType }
  ),
  
  offEvent: (eventType: string, handler: () => void) => safeTelegramOperation(
    'offEvent',
    () => window.Telegram?.WebApp?.offEvent?.(eventType, handler),
    false,
    { eventType }
  )
};

/**
 * –≠–¢–ê–ü 3: –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
 * @returns –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
 */
export function getErrorStatistics(): ErrorServiceState {
  return { ...errorState };
}

/**
 * –≠–¢–ê–ü 3: –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫
 */
export function clearErrorHistory(): void {
  console.log('[TG ERROR] üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫');
  errorState.errorHistory = [];
  errorState.totalErrors = 0;
  errorState.criticalErrors = 0;
  errorState.lastError = null;
}

/**
 * –≠–¢–ê–ü 3: –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
 * @param enabled - –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export function setErrorLogging(enabled: boolean): void {
  errorState.isLoggingEnabled = enabled;
  console.log(`[TG ERROR] ${enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'} –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫`);
}

/**
 * –≠–¢–ê–ü 3: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 * @returns JSON —Å—Ç—Ä–æ–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ—à–∏–±–æ–∫
 */
export function exportErrorHistory(): string {
  const exportData = {
    totalErrors: errorState.totalErrors,
    criticalErrors: errorState.criticalErrors,
    errorHistory: errorState.errorHistory.map(error => ({
      ...error,
      timestamp: new Date(error.timestamp).toISOString(),
      originalError: error.originalError?.message || 'N/A'
    })),
    exportTimestamp: new Date().toISOString()
  };
  
  return JSON.stringify(exportData, null, 2);
}