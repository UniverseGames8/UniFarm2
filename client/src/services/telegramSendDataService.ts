/**
 * –≠–¢–ê–ü 3: –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram-–±–æ—Ç —á–µ—Ä–µ–∑ sendData API
 * 
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * 1. –û—Ç–ø—Ä–∞–≤–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–π Telegram-–±–æ—Ç
 * 2. –û–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (boost-–ø–∞–∫–µ—Ç—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∞—Ä–º–∏–Ω–≥–∞)
 * 3. –í–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
 * 4. –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
 */

// –≠–¢–ê–ü 3: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç
interface BoostPackageData {
  type: 'boost_package';
  packageId: string;
  packageName: string;
  price: number;
  currency: 'UNI' | 'TON';
  userId: number;
  timestamp: number;
}

interface FarmingResultData {
  type: 'farming_result';
  action: 'start' | 'harvest';
  amount: number;
  currency: 'UNI' | 'TON';
  userId: number;
  timestamp: number;
}

interface UserActionData {
  type: 'user_action';
  action: string;
  screen: string;
  userId: number;
  timestamp: number;
  metadata?: Record<string, any>;
}

// –≠–¢–ê–ü 3: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
type TelegramBotData = BoostPackageData | FarmingResultData | UserActionData;

// –≠–¢–ê–ü 3: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
interface SendDataState {
  isSendDataAvailable: boolean;
  lastSentData: string | null;
  sentDataCount: number;
  lastError: string | null;
}

let sendDataState: SendDataState = {
  isSendDataAvailable: false,
  lastSentData: null,
  sentDataCount: 0,
  lastError: null
};

/**
 * –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram sendData API
 * @returns true –µ—Å–ª–∏ sendData –¥–æ—Å—Ç—É–ø–Ω–æ
 */
function isSendDataAvailable(): boolean {
  try {
    const sendDataMethod = window.Telegram?.WebApp?.sendData;
    const isAvailable = typeof sendDataMethod === 'function';
    
    sendDataState.isSendDataAvailable = isAvailable;
    
    if (isAvailable) {
      console.log('[TG SEND DATA INIT] ‚úÖ sendData API –¥–æ—Å—Ç—É–ø–Ω–æ');
    } else {
      console.warn('[TG SEND DATA INIT] ‚ö†Ô∏è sendData API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }
    
    return isAvailable;
  } catch (error) {
    console.error('[TG SEND DATA INIT] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ sendData:', error);
    return false;
  }
}

/**
 * –≠–¢–ê–ü 3: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram-–±–æ—Ç
 * @param data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
 * @returns true –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
 */
export async function sendDataToBot(data: TelegramBotData | object | string): Promise<boolean> {
  console.log('[TG SEND DATA] üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);
  
  try {
    // –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if (!sendDataState.isSendDataAvailable) {
      console.warn('[TG SEND DATA] ‚ö†Ô∏è sendData API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
      return false;
    }
    
    // –≠–¢–ê–ü 3: –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    let payload: string;
    if (typeof data === 'string') {
      payload = data;
    } else {
      payload = JSON.stringify(data);
    }
    
    // –≠–¢–ê–ü 3: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã)
    if (payload.length > 4096) {
      console.error('[TG SEND DATA] ‚ùå –î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (>4096 —Å–∏–º–≤–æ–ª–æ–≤)');
      sendDataState.lastError = 'Data too large';
      return false;
    }
    
    // –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log(`[TG SEND DATA]: ${payload.substring(0, 200)}${payload.length > 200 ? '...' : ''}`);
    
    window.Telegram!.WebApp!.sendData!(payload);
    
    // –≠–¢–ê–ü 3: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    sendDataState.lastSentData = payload;
    sendDataState.sentDataCount++;
    sendDataState.lastError = null;
    
    console.log('[TG SEND DATA] ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç');
    return true;
    
  } catch (error) {
    console.error('[TG SEND DATA] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    sendDataState.lastError = `Send error: ${error}`;
    return false;
  }
}

/**
 * –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º boost-–ø–∞–∫–µ—Ç–µ
 * @param packageId - ID –ø–∞–∫–µ—Ç–∞
 * @param packageName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
 * @param price - –¶–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞
 * @param currency - –í–∞–ª—é—Ç–∞
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendBoostPackageSelection(
  packageId: string,
  packageName: string,
  price: number,
  currency: 'UNI' | 'TON',
  userId: number
): Promise<boolean> {
  console.log('[TG SEND DATA] üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±–æ—Ä–∞ boost-–ø–∞–∫–µ—Ç–∞:', { packageId, packageName, price, currency });
  
  const boostData: BoostPackageData = {
    type: 'boost_package',
    packageId,
    packageName,
    price,
    currency,
    userId,
    timestamp: Date.now()
  };
  
  return await sendDataToBot(boostData);
}

/**
 * –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞
 * @param action - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (start/harvest)
 * @param amount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
 * @param currency - –í–∞–ª—é—Ç–∞
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendFarmingResult(
  action: 'start' | 'harvest',
  amount: number,
  currency: 'UNI' | 'TON',
  userId: number
): Promise<boolean> {
  console.log('[TG SEND DATA] üå± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞:', { action, amount, currency });
  
  const farmingData: FarmingResultData = {
    type: 'farming_result',
    action,
    amount,
    currency,
    userId,
    timestamp: Date.now()
  };
  
  return await sendDataToBot(farmingData);
}

/**
 * –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param action - –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
 * @param screen - –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param metadata - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendUserAction(
  action: string,
  screen: string,
  userId: number,
  metadata?: Record<string, any>
): Promise<boolean> {
  console.log('[TG SEND DATA] üë§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { action, screen, metadata });
  
  const actionData: UserActionData = {
    type: 'user_action',
    action,
    screen,
    userId,
    timestamp: Date.now(),
    metadata
  };
  
  return await sendDataToBot(actionData);
}

/**
 * –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param sessionDuration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param screens - –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
 * @param actions - –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendSessionSummary(
  userId: number,
  sessionDuration: number,
  screens: string[],
  actions: string[]
): Promise<boolean> {
  console.log('[TG SEND DATA] üìä –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–∏:', { sessionDuration, screens, actions });
  
  const sessionData = {
    type: 'session_summary',
    userId,
    sessionDuration,
    screensVisited: screens,
    actionsPerformed: actions,
    timestamp: Date.now()
  };
  
  return await sendDataToBot(sessionData);
}

/**
 * –≠–¢–ê–ü 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 * @returns true –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
 */
export function initializeTelegramSendData(): boolean {
  console.log('[TG SEND DATA INIT] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram SendData...');
  
  try {
    const isAvailable = isSendDataAvailable();
    
    console.log('[TG SEND DATA INIT] üìä –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', {
      sendDataAvailable: sendDataState.isSendDataAvailable,
      isReady: true
    });
    
    return true;
  } catch (error) {
    console.error('[TG SEND DATA ERROR] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
    return false;
  }
}

/**
 * –≠–¢–ê–ü 3: –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 * @returns –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
 */
export function getSendDataState(): SendDataState {
  return { ...sendDataState };
}

/**
 * –≠–¢–ê–ü 3: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export const SendDataUtils = {
  // –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞
  farmingStarted: (userId: number, amount: number) => 
    sendFarmingResult('start', amount, 'UNI', userId),
  
  // –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —É—Ä–æ–∂–∞—è
  farmingHarvested: (userId: number, amount: number) => 
    sendFarmingResult('harvest', amount, 'UNI', userId),
  
  // –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—É—Å—Ç–∞
  boostPurchased: (userId: number, boostId: string, price: number) => 
    sendBoostPackageSelection(boostId, `Boost-${boostId}`, price, 'UNI', userId),
  
  // –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  screenVisited: (userId: number, screen: string) => 
    sendUserAction('screen_visited', screen, userId),
  
  // –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  errorOccurred: (userId: number, error: string, screen: string) => 
    sendUserAction('error_occurred', screen, userId, { error })
};