/**
 * –≠–¢–ê–ü 3: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram CloudStorage API
 * 
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –æ–±–ª–∞–∫–µ Telegram
 * 2. –ó–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * 3. –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * 4. Fallback –Ω–∞ localStorage –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CloudStorage
 */

// –≠–¢–ê–ü 3: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserSettings {
  language?: string;
  theme?: 'light' | 'dark' | 'auto';
  lastScreen?: string;
  farmingNotifications?: boolean;
  boostNotifications?: boolean;
  soundEnabled?: boolean;
  lastActiveBoost?: string;
  preferredCurrency?: 'UNI' | 'TON';
}

// –≠–¢–ê–ü 3: –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
export const STORAGE_KEYS = {
  LANGUAGE: 'user_language',
  THEME: 'user_theme',
  LAST_SCREEN: 'last_screen',
  FARMING_NOTIFICATIONS: 'farming_notifications',
  BOOST_NOTIFICATIONS: 'boost_notifications',
  SOUND_ENABLED: 'sound_enabled',
  LAST_ACTIVE_BOOST: 'last_active_boost',
  PREFERRED_CURRENCY: 'preferred_currency',
  USER_SETTINGS: 'user_settings_v1'
} as const;

// –≠–¢–ê–ü 3: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
interface StorageState {
  isCloudStorageAvailable: boolean;
  lastError: string | null;
  operationsCount: number;
  fallbackToLocalStorage: boolean;
}

let storageState: StorageState = {
  isCloudStorageAvailable: false,
  lastError: null,
  operationsCount: 0,
  fallbackToLocalStorage: false
};

/**
 * –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram CloudStorage API
 * @returns true –µ—Å–ª–∏ CloudStorage –¥–æ—Å—Ç—É–ø–Ω–æ
 */
function isCloudStorageAvailable(): boolean {
  try {
    const cloudStorage = window.Telegram?.WebApp?.CloudStorage;
    const isAvailable = !!(cloudStorage && 
                          cloudStorage.setItem && 
                          cloudStorage.getItem && 
                          cloudStorage.removeItem);
    
    storageState.isCloudStorageAvailable = isAvailable;
    
    if (isAvailable) {
      console.log('[TG STORAGE INIT] ‚úÖ CloudStorage API –¥–æ—Å—Ç—É–ø–Ω–æ');
    } else {
      console.warn('[TG STORAGE INIT] ‚ö†Ô∏è CloudStorage API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage');
      storageState.fallbackToLocalStorage = true;
    }
    
    return isAvailable;
  } catch (error) {
    console.error('[TG STORAGE INIT] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CloudStorage:', error);
    storageState.fallbackToLocalStorage = true;
    return false;
  }
}

/**
 * –≠–¢–ê–ü 3: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ Telegram CloudStorage –∏–ª–∏ localStorage
 * @param key - –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * @param value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function saveSetting(key: string, value: string): Promise<boolean> {
  console.log(`[TG STORAGE SET] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${key} = ${value.substring(0, 50)}...`);
  
  try {
    storageState.operationsCount++;
    
    // –≠–¢–ê–ü 3: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CloudStorage
    if (storageState.isCloudStorageAvailable && !storageState.fallbackToLocalStorage) {
      try {
        await window.Telegram!.WebApp!.CloudStorage!.setItem(key, value);
        console.log(`[TG STORAGE SET] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ CloudStorage: ${key}`);
        storageState.lastError = null;
        return true;
      } catch (cloudError) {
        console.warn(`[TG STORAGE ERROR] CloudStorage.setItem failed: ${cloudError}`);
        storageState.fallbackToLocalStorage = true;
        storageState.lastError = `CloudStorage error: ${cloudError}`;
      }
    }
    
    // –≠–¢–ê–ü 3: Fallback –Ω–∞ localStorage
    try {
      localStorage.setItem(`telegram_${key}`, value);
      console.log(`[TG STORAGE SET] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage: ${key}`);
      return true;
    } catch (localError) {
      console.error(`[TG STORAGE ERROR] localStorage.setItem failed: ${localError}`);
      storageState.lastError = `localStorage error: ${localError}`;
      return false;
    }
    
  } catch (error) {
    console.error(`[TG STORAGE ERROR] saveSetting failed: ${error}`);
    storageState.lastError = `Save error: ${error}`;
    return false;
  }
}

/**
 * –≠–¢–ê–ü 3: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ Telegram CloudStorage –∏–ª–∏ localStorage
 * @param key - –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * @returns Promise —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–ª–∏ null
 */
export async function loadSetting(key: string): Promise<string | null> {
  console.log(`[TG STORAGE GET] üìñ –ó–∞–≥—Ä—É–∑–∫–∞: ${key}`);
  
  try {
    storageState.operationsCount++;
    
    // –≠–¢–ê–ü 3: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CloudStorage
    if (storageState.isCloudStorageAvailable && !storageState.fallbackToLocalStorage) {
      try {
        const value = await window.Telegram!.WebApp!.CloudStorage!.getItem(key);
        if (value !== null && value !== undefined && value !== '') {
          console.log(`[TG STORAGE GET] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ CloudStorage: ${key} = ${value.substring(0, 50)}...`);
          storageState.lastError = null;
          return value;
        }
      } catch (cloudError) {
        console.warn(`[TG STORAGE ERROR] CloudStorage.getItem failed: ${cloudError}`);
        storageState.fallbackToLocalStorage = true;
        storageState.lastError = `CloudStorage error: ${cloudError}`;
      }
    }
    
    // –≠–¢–ê–ü 3: Fallback –Ω–∞ localStorage
    try {
      const value = localStorage.getItem(`telegram_${key}`);
      if (value !== null) {
        console.log(`[TG STORAGE GET] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ localStorage: ${key} = ${value.substring(0, 50)}...`);
        return value;
      } else {
        console.log(`[TG STORAGE GET] ‚ÑπÔ∏è –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${key}`);
        return null;
      }
    } catch (localError) {
      console.error(`[TG STORAGE ERROR] localStorage.getItem failed: ${localError}`);
      storageState.lastError = `localStorage error: ${localError}`;
      return null;
    }
    
  } catch (error) {
    console.error(`[TG STORAGE ERROR] loadSetting failed: ${error}`);
    storageState.lastError = `Load error: ${error}`;
    return null;
  }
}

/**
 * –≠–¢–ê–ü 3: –£–¥–∞–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 * @param key - –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function removeSetting(key: string): Promise<boolean> {
  console.log(`[TG STORAGE REMOVE] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ: ${key}`);
  
  try {
    storageState.operationsCount++;
    
    // –≠–¢–ê–ü 3: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CloudStorage
    if (storageState.isCloudStorageAvailable && !storageState.fallbackToLocalStorage) {
      try {
        await window.Telegram!.WebApp!.CloudStorage!.removeItem(key);
        console.log(`[TG STORAGE REMOVE] ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ CloudStorage: ${key}`);
      } catch (cloudError) {
        console.warn(`[TG STORAGE ERROR] CloudStorage.removeItem failed: ${cloudError}`);
        storageState.fallbackToLocalStorage = true;
      }
    }
    
    // –≠–¢–ê–ü 3: Fallback –Ω–∞ localStorage
    try {
      localStorage.removeItem(`telegram_${key}`);
      console.log(`[TG STORAGE REMOVE] ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ localStorage: ${key}`);
      return true;
    } catch (localError) {
      console.error(`[TG STORAGE ERROR] localStorage.removeItem failed: ${localError}`);
      return false;
    }
    
  } catch (error) {
    console.error(`[TG STORAGE ERROR] removeSetting failed: ${error}`);
    return false;
  }
}

/**
 * –≠–¢–ê–ü 3: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param settings - –û–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function saveUserSettings(settings: UserSettings): Promise<boolean> {
  console.log('[TG STORAGE SET] üë§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', settings);
  
  try {
    const settingsJson = JSON.stringify(settings);
    const success = await saveSetting(STORAGE_KEYS.USER_SETTINGS, settingsJson);
    
    if (success) {
      console.log('[TG STORAGE SET] ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } else {
      console.error('[TG STORAGE ERROR] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    return success;
  } catch (error) {
    console.error('[TG STORAGE ERROR] saveUserSettings failed:', error);
    return false;
  }
}

/**
 * –≠–¢–ê–ü 3: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns Promise —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export async function loadUserSettings(): Promise<UserSettings> {
  console.log('[TG STORAGE GET] üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  try {
    const settingsJson = await loadSetting(STORAGE_KEYS.USER_SETTINGS);
    
    if (settingsJson) {
      const settings = JSON.parse(settingsJson) as UserSettings;
      console.log('[TG STORAGE GET] ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settings);
      return settings;
    } else {
      // –≠–¢–ê–ü 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const defaultSettings: UserSettings = {
        language: 'ru',
        theme: 'auto',
        lastScreen: '/',
        farmingNotifications: true,
        boostNotifications: true,
        soundEnabled: true,
        preferredCurrency: 'UNI'
      };
      
      console.log('[TG STORAGE GET] ‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultSettings);
      return defaultSettings;
    }
  } catch (error) {
    console.error('[TG STORAGE ERROR] loadUserSettings failed:', error);
    
    // –≠–¢–ê–ü 3: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return {
      language: 'ru',
      theme: 'auto',
      lastScreen: '/',
      farmingNotifications: true,
      boostNotifications: true,
      soundEnabled: true,
      preferredCurrency: 'UNI'
    };
  }
}

/**
 * –≠–¢–ê–ü 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 * @returns true –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
 */
export function initializeTelegramStorage(): boolean {
  console.log('[TG STORAGE INIT] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Storage...');
  
  try {
    const isAvailable = isCloudStorageAvailable();
    
    console.log('[TG STORAGE INIT] üìä –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', {
      cloudStorageAvailable: storageState.isCloudStorageAvailable,
      fallbackToLocalStorage: storageState.fallbackToLocalStorage,
      isReady: true
    });
    
    return true;
  } catch (error) {
    console.error('[TG STORAGE ERROR] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
    return false;
  }
}

/**
 * –≠–¢–ê–ü 3: –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 * @returns –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
 */
export function getStorageState(): StorageState {
  return { ...storageState };
}

/**
 * –≠–¢–ê–ü 3: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export const StorageUtils = {
  // –≠–¢–ê–ü 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
  saveLastScreen: (screen: string) => saveSetting(STORAGE_KEYS.LAST_SCREEN, screen),
  loadLastScreen: () => loadSetting(STORAGE_KEYS.LAST_SCREEN),
  
  // –≠–¢–ê–ü 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã
  saveTheme: (theme: 'light' | 'dark' | 'auto') => saveSetting(STORAGE_KEYS.THEME, theme),
  loadTheme: () => loadSetting(STORAGE_KEYS.THEME),
  
  // –≠–¢–ê–ü 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–∞
  saveLanguage: (language: string) => saveSetting(STORAGE_KEYS.LANGUAGE, language),
  loadLanguage: () => loadSetting(STORAGE_KEYS.LANGUAGE),
  
  // –≠–¢–ê–ü 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—É—Å—Ç–∞
  saveLastBoost: (boostId: string) => saveSetting(STORAGE_KEYS.LAST_ACTIVE_BOOST, boostId),
  loadLastBoost: () => loadSetting(STORAGE_KEYS.LAST_ACTIVE_BOOST)
};