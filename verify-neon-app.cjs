/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ UniFarm –∫ Neon DB
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –ù–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ .env.neon
 * 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB
 * 3. –ù–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –∏ –∏—Ö –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 * 4. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ)
 */

const dotenv = require('dotenv');
const { Pool } = require('pg');
const http = require('http');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
dotenv.config({ path: '.env.neon' });

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

// –ó–∞–≥–æ–ª–æ–≤–æ–∫
console.log(`${colors.blue}===================================`);
console.log(`= –ü–†–û–í–ï–†–ö–ê NEON DB –ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =`);
console.log(`===================================${colors.reset}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.neon
const envFile = '.env.neon';
if (!fs.existsSync(envFile)) {
  console.log(`${colors.red}‚ùå –§–∞–π–ª ${envFile} –Ω–µ –Ω–∞–π–¥–µ–Ω!${colors.reset}`);
  console.log(`${colors.yellow}–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª ${envFile} —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–∞ create-neon-env.cjs${colors.reset}`);
  process.exit(1);
}

try {
  console.log(`${colors.green}‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ ${envFile}${colors.reset}`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  console.log(`${colors.cyan}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB...${colors.reset}`);
  
  if (!process.env.DATABASE_URL) {
    console.log(`${colors.red}‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ${envFile}!${colors.reset}`);
    process.exit(1);
  }
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  });
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async function checkDatabase() {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const timeResult = await pool.query('SELECT NOW() as time');
      console.log(`${colors.green}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB —É—Å–ø–µ—à–Ω–æ:${colors.reset}`);
      console.log(`   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${timeResult.rows[0].time}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü
      console.log(`${colors.cyan}üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...${colors.reset}`);
      const tablesResult = await pool.query(`
        SELECT table_name, 
               (SELECT COUNT(*) FROM information_schema.columns 
                WHERE table_name = t.table_name AND table_schema = 'public') as column_count
        FROM information_schema.tables t
        WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
        ORDER BY table_name
      `);
      
      if (tablesResult.rows.length === 0) {
        console.log(`${colors.red}‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!${colors.reset}`);
      } else {
        tablesResult.rows.forEach(table => {
          console.log(`   ${table.table_name}: ${table.column_count} –∫–æ–ª–æ–Ω–æ–∫`);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log(`${colors.cyan}üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è transactions...${colors.reset}`);
      const partitionResult = await pool.query(`
        SELECT c.relname as partition_name
        FROM pg_inherits i
        JOIN pg_class p ON i.inhparent = p.oid
        JOIN pg_class c ON i.inhrelid = c.oid
        WHERE p.relname = 'transactions'
      `);
      
      if (partitionResult.rows.length === 0) {
        console.log(`${colors.yellow}‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ transactions –Ω–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞${colors.reset}`);
      } else {
        console.log(`${colors.green}‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${partitionResult.rows.length} —á–∞—Å—Ç–µ–π${colors.reset}`);
        partitionResult.rows.slice(0, 5).forEach(part => {
          console.log(`   - ${part.partition_name}`);
        });
        if (partitionResult.rows.length > 5) {
          console.log(`   - ...–∏ –µ—â–µ ${partitionResult.rows.length - 5} –ø–∞—Ä—Ç–∏—Ü–∏–π`);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      console.log(`${colors.cyan}üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É 3000...${colors.reset}`);
      
      try {
        await new Promise((resolve, reject) => {
          const req = http.get('http://localhost:3000', res => {
            if (res.statusCode === 200) {
              console.log(`${colors.green}‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000 (–°—Ç–∞—Ç—É—Å: ${res.statusCode})${colors.reset}`);
              resolve();
            } else {
              console.log(`${colors.yellow}‚ö†Ô∏è API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${res.statusCode}${colors.reset}`);
              resolve();
            }
          });
          
          req.on('error', err => {
            console.log(`${colors.yellow}‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000${colors.reset}`);
            resolve();
          });
          
          req.setTimeout(2000, () => {
            console.log(`${colors.yellow}‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API${colors.reset}`);
            resolve();
          });
        });
      } catch (error) {
        console.log(`${colors.yellow}‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: ${error.message}${colors.reset}`);
      }
      
      // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.log(`${colors.blue}===================================`);
      console.log(`= –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò =`);
      console.log(`===================================${colors.reset}`);
      
      const dbStatus = timeResult ? '‚úÖ OK' : '‚ùå ERROR';
      const apiStatus = '‚ö†Ô∏è NOT AVAILABLE';
      
      console.log(`Neon DB: ${dbStatus}`);
      console.log(`API: ${apiStatus}`);
      
      if (dbStatus.includes('OK') && apiStatus.includes('NOT')) {
        console.log(`\n${colors.yellow}‚ö†Ô∏è Neon DB —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.${colors.reset}`);
        console.log(`${colors.yellow}–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.${colors.reset}`);
        console.log(`${colors.yellow}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.${colors.reset}`);
      } else if (dbStatus.includes('OK') && apiStatus.includes('OK')) {
        console.log(`\n${colors.green}üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞ —Å Neon DB!${colors.reset}`);
      }
      
    } catch (error) {
      console.log(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}${colors.reset}`);
    } finally {
      await pool.end();
    }
  }
  
  checkDatabase();
  
} catch (error) {
  console.log(`${colors.red}‚ùå –û—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
}