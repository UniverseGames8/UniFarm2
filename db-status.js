/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 2. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
 * 3. –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, —Ä–∞–∑–º–µ—Ä –∏ —Ç.–¥.)
 * 4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
 * 5. –í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

import pg from 'pg';
const { Pool } = pg;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
 */
async function executeQuery(query, params = []) {
  try {
    const result = await pool.query(query, params);
    return result.rows;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
 */
async function getAllTables() {
  const query = `
    SELECT 
      table_name 
    FROM 
      information_schema.tables 
    WHERE 
      table_schema = 'public' 
    ORDER BY 
      table_name;
  `;
  
  return await executeQuery(query);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
 */
async function getTableRowCount(tableName) {
  const query = `SELECT COUNT(*) as row_count FROM "${tableName}";`;
  const result = await executeQuery(query);
  return parseInt(result[0].row_count);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
 */
async function getTableSize(tableName) {
  const query = `
    SELECT 
      pg_size_pretty(pg_total_relation_size('"${tableName}"')) as total_size,
      pg_size_pretty(pg_relation_size('"${tableName}"')) as table_size,
      pg_size_pretty(pg_total_relation_size('"${tableName}"') - pg_relation_size('"${tableName}"')) as index_size
    FROM 
      pg_catalog.pg_tables 
    WHERE 
      schemaname = 'public' 
      AND tablename = $1;
  `;
  
  const result = await executeQuery(query, [tableName]);
  return result[0] || { total_size: '0 B', table_size: '0 B', index_size: '0 B' };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
 */
async function getTableStructure(tableName) {
  const query = `
    SELECT 
      column_name, 
      data_type,
      is_nullable,
      column_default
    FROM 
      information_schema.columns 
    WHERE 
      table_schema = 'public' 
      AND table_name = $1 
    ORDER BY 
      ordinal_position;
  `;
  
  return await executeQuery(query, [tableName]);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
 */
async function getTableIndexes(tableName) {
  const query = `
    SELECT
      indexname,
      indexdef
    FROM
      pg_indexes
    WHERE
      schemaname = 'public'
      AND tablename = $1
    ORDER BY
      indexname;
  `;
  
  return await executeQuery(query, [tableName]);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö
 */
async function getForeignKeys(tableName) {
  const query = `
    SELECT
      tc.constraint_name,
      kcu.column_name,
      ccu.table_name AS foreign_table_name,
      ccu.column_name AS foreign_column_name
    FROM
      information_schema.table_constraints tc
      JOIN information_schema.key_column_usage kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
      JOIN information_schema.constraint_column_usage ccu
        ON ccu.constraint_name = tc.constraint_name
        AND ccu.table_schema = tc.table_schema
    WHERE
      tc.constraint_type = 'FOREIGN KEY'
      AND tc.table_name = $1;
  `;
  
  return await executeQuery(query, [tableName]);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function checkDatabaseConnection() {
  try {
    await pool.query('SELECT NOW() as time');
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function getDatabaseInfo() {
  const query = `
    SELECT
      current_database() as db_name,
      current_user as db_user,
      version() as db_version,
      pg_size_pretty(pg_database_size(current_database())) as db_size;
  `;
  
  return await executeQuery(query);
}

/**
 * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function runDatabaseAnalysis() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const isConnected = await checkDatabaseConnection();
  if (!isConnected) {
    console.error('‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    return;
  }
  
  // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const dbInfo = await getDatabaseInfo();
  console.log('\nüìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
  console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${dbInfo[0].db_name}`);
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbInfo[0].db_user}`);
  console.log(`–í–µ—Ä—Å–∏—è PostgreSQL: ${dbInfo[0].db_version}`);
  console.log(`–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${dbInfo[0].db_size}`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
  const tables = await getAllTables();
  console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
  for (const table of tables) {
    const tableName = table.table_name;
    console.log(`\nüìù –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
    
    try {
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
      const structure = await getTableStructure(tableName);
      console.log(`  –ö–æ–ª–æ–Ω–æ–∫: ${structure.length}`);
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
      const rowCount = await getTableRowCount(tableName);
      console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${rowCount}`);
      
      // –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
      const sizeInfo = await getTableSize(tableName);
      console.log(`  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${sizeInfo.total_size}`);
      console.log(`  –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${sizeInfo.table_size}`);
      console.log(`  –†–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤: ${sizeInfo.index_size}`);
      
      // –ò–Ω–¥–µ–∫—Å—ã
      const indexes = await getTableIndexes(tableName);
      console.log(`  –ò–Ω–¥–µ–∫—Å–æ–≤: ${indexes.length}`);
      
      // –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
      const foreignKeys = await getForeignKeys(tableName);
      console.log(`  –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π: ${foreignKeys.length}`);
      
      if (foreignKeys.length > 0) {
        console.log('  –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏:');
        foreignKeys.forEach(fk => {
          console.log(`    - ${fk.column_name} -> ${fk.foreign_table_name}.${fk.foreign_column_name}`);
        });
      }
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error);
    }
  }
  
  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
runDatabaseAnalysis()
  .then(() => {
    console.log('\n–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
    pool.end();
  })
  .catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:', error);
    pool.end();
    process.exit(1);
  });