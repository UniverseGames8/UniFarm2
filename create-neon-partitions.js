#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã transactions –≤ Neon DB
 * 
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω—É–ª—è!
 * –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ transactions, –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
 */

import fs from 'fs';
import { Pool } from 'pg';
import 'dotenv/config';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
function loadEnvFromFile() {
  try {
    const envFile = fs.readFileSync('.env.neon', 'utf8');
    const envVars = {};
    
    envFile.split('\n').forEach(line => {
      if (line.trim() && !line.startsWith('#')) {
        const parts = line.split('=');
        if (parts.length >= 2) {
          const key = parts[0].trim();
          const value = parts.slice(1).join('=').trim();
          
          if (key && value) {
            envVars[key] = value;
            process.env[key] = value;
          }
        }
      }
    });
    
    return envVars;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env.neon: ${error.message}`, colors.red);
    return {};
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function createPartitioning() {
  log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Neon DB...', colors.blue);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envVars = loadEnvFromFile();
  
  if (!process.env.DATABASE_URL && !envVars.DATABASE_URL) {
    log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ—ë –≤ .env.neon', colors.red);
    return false;
  }
  
  const connectionString = process.env.DATABASE_URL;
  const maskedUrl = connectionString.replace(/:[^:]*@/, ':***@');
  
  log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${maskedUrl}`, colors.yellow);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    const pool = new Pool({ 
      connectionString,
      ssl: {
        rejectUnauthorized: false
      },
      max: 2
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Neon DB...', colors.cyan);
    await pool.query('SELECT 1');
    log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Neon DB —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', colors.green);
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É transactions.', colors.yellow);
    log('‚ö†Ô∏è –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ transactions –±—É–¥—É—Ç –ü–û–¢–ï–†–Ø–ù–´!', colors.yellow);
    log('‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.', colors.yellow);
    
    // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    log('\n–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...', colors.magenta);
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã transactions
    const tableCheck = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'transactions'
      ) as exists;
    `);
    
    const tableExists = tableCheck.rows[0].exists;
    
    // –®–∞–≥ 1: –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if (tableExists) {
      log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö...', colors.cyan);
      
      await pool.query(`
        CREATE TABLE IF NOT EXISTS transactions_backup AS 
        SELECT * FROM transactions;
      `);
      
      const backupCount = await pool.query('SELECT COUNT(*) FROM transactions_backup');
      log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å ${backupCount.rows[0].count} –∑–∞–ø–∏—Å—è–º–∏`, colors.green);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
      log('\nüîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã transactions...', colors.cyan);
      await pool.query('DROP TABLE IF EXISTS transactions CASCADE');
      log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞', colors.green);
    }
    
    // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã transactions...', colors.cyan);
    
    await pool.query(`
      CREATE TABLE transactions (
        id SERIAL,
        user_id INTEGER REFERENCES users(id),
        type TEXT,
        currency TEXT,
        amount NUMERIC(18, 6),
        status TEXT DEFAULT 'confirmed',
        source TEXT,
        category TEXT,
        tx_hash TEXT,
        description TEXT,
        source_user_id INTEGER,
        wallet_address TEXT,
        data TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      ) PARTITION BY RANGE (created_at);
      
      -- –í –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ Primary Key –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –∫–ª—é—á–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      CREATE UNIQUE INDEX transactions_pkey ON transactions (id, created_at);
      
      -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
      CREATE INDEX idx_transactions_user_id ON transactions (user_id);
      CREATE INDEX idx_transactions_source_user_id ON transactions (source_user_id);
      CREATE INDEX idx_transactions_type_status ON transactions (type, status);
      CREATE INDEX idx_transactions_created_at ON transactions (created_at);
    `);
    
    log('‚úÖ –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ transactions —Å–æ–∑–¥–∞–Ω–∞', colors.green);
    
    // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–π
    log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–π...', colors.cyan);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –º–µ—Å—è—Ü–µ–≤ –∏ —Å–ª–µ–¥—É—é—â–∏—Ö 3 –º–µ—Å—è—Ü–µ–≤
    const now = new Date();
    
    // –ü–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—à–ª—ã—Ö –º–µ—Å—è—Ü–µ–≤
    for (let i = 3; i >= 0; i--) {
      const date = new Date(now);
      date.setMonth(date.getMonth() - i);
      
      const year = date.getFullYear();
      const month = date.getMonth() + 1;
      
      const partitionName = `transactions_${year}_${month.toString().padStart(2, '0')}`;
      const startDate = `${year}-${month.toString().padStart(2, '0')}-01`;
      
      let endDate;
      if (month === 12) {
        endDate = `${year + 1}-01-01`;
      } else {
        endDate = `${year}-${(month + 1).toString().padStart(2, '0')}-01`;
      }
      
      try {
        await pool.query(`
          CREATE TABLE ${partitionName} PARTITION OF transactions
          FOR VALUES FROM ('${startDate}') TO ('${endDate}');
        `);
        
        log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä—Ç–∏—Ü–∏—è ${partitionName} –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${startDate} - ${endDate}`, colors.green);
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–∏ ${partitionName}: ${error.message}`, colors.red);
      }
    }
    
    // –ü–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –º–µ—Å—è—Ü–µ–≤
    for (let i = 1; i <= 3; i++) {
      const date = new Date(now);
      date.setMonth(date.getMonth() + i);
      
      const year = date.getFullYear();
      const month = date.getMonth() + 1;
      
      const partitionName = `transactions_${year}_${month.toString().padStart(2, '0')}`;
      const startDate = `${year}-${month.toString().padStart(2, '0')}-01`;
      
      let endDate;
      if (month === 12) {
        endDate = `${year + 1}-01-01`;
      } else {
        endDate = `${year}-${(month + 1).toString().padStart(2, '0')}-01`;
      }
      
      try {
        await pool.query(`
          CREATE TABLE ${partitionName} PARTITION OF transactions
          FOR VALUES FROM ('${startDate}') TO ('${endDate}');
        `);
        
        log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä—Ç–∏—Ü–∏—è ${partitionName} –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${startDate} - ${endDate}`, colors.green);
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–∏ ${partitionName}: ${error.message}`, colors.red);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    try {
      await pool.query(`
        CREATE TABLE transactions_default PARTITION OF transactions DEFAULT;
      `);
      
      log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä—Ç–∏—Ü–∏—è transactions_default –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞—Ç`, colors.green);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${error.message}`, colors.red);
    }
    
    // –®–∞–≥ 4: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –±—ã–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è)
    if (tableExists) {
      log('\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...', colors.cyan);
      
      await pool.query(`
        INSERT INTO transactions (
          id, user_id, type, currency, amount, status, source, 
          category, tx_hash, description, source_user_id, 
          wallet_address, data, created_at
        )
        SELECT 
          id, user_id, type, currency, amount, status, source, 
          category, tx_hash, description, source_user_id, 
          wallet_address, data, created_at
        FROM transactions_backup;
      `);
      
      const restoredCount = await pool.query('SELECT COUNT(*) FROM transactions');
      log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restoredCount.rows[0].count} –∑–∞–ø–∏—Å–µ–π`, colors.green);
    }
    
    // –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π
    log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏—è–º–∏...', colors.cyan);
    
    await pool.query(`
      -- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏—Ü–∏–∏
      CREATE OR REPLACE FUNCTION create_transaction_partition(
        partition_date DATE
      )
      RETURNS VOID AS $$
      DECLARE
        partition_name TEXT;
        start_date TEXT;
        end_date TEXT;
        year_val INT;
        month_val INT;
      BEGIN
        year_val := EXTRACT(YEAR FROM partition_date);
        month_val := EXTRACT(MONTH FROM partition_date);
        
        partition_name := 'transactions_' || year_val || '_' || LPAD(month_val::TEXT, 2, '0');
        start_date := year_val || '-' || LPAD(month_val::TEXT, 2, '0') || '-01';
        
        IF month_val = 12 THEN
          end_date := (year_val + 1) || '-01-01';
        ELSE
          end_date := year_val || '-' || LPAD((month_val + 1)::TEXT, 2, '0') || '-01';
        END IF;
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞—Ä—Ç–∏—Ü–∏—è
        IF NOT EXISTS (
          SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace
          WHERE c.relname = partition_name AND n.nspname = 'public'
        ) THEN
          EXECUTE 'CREATE TABLE ' || partition_name || ' PARTITION OF transactions
                  FOR VALUES FROM (''' || start_date || ''') TO (''' || end_date || ''')';
          
          -- –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏
          INSERT INTO partition_logs (operation, partition_name, message, status)
          VALUES ('CREATE', partition_name, 'Created partition for period ' || start_date || ' to ' || end_date, 'success');
        END IF;
      EXCEPTION WHEN OTHERS THEN
        -- –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        INSERT INTO partition_logs (operation, partition_name, message, status, error_details)
        VALUES ('ERROR', partition_name, 'Failed to create partition', 'error', SQLERRM);
        RAISE;
      END;
      $$ LANGUAGE plpgsql;
      
      -- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π –Ω–∞ N –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä–µ–¥
      CREATE OR REPLACE FUNCTION create_future_transaction_partitions(
        months_ahead INT DEFAULT 3
      )
      RETURNS VOID AS $$
      DECLARE
        current_date DATE := CURRENT_DATE;
        future_date DATE;
      BEGIN
        FOR i IN 0..months_ahead LOOP
          future_date := current_date + (i || ' month')::INTERVAL;
          PERFORM create_transaction_partition(future_date);
        END LOOP;
        
        -- –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö –ø–∞—Ä—Ç–∏—Ü–∏–π
        INSERT INTO partition_logs (operation, message, status)
        VALUES ('INFO', 'Created ' || months_ahead || ' future partitions', 'success');
      EXCEPTION WHEN OTHERS THEN
        -- –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        INSERT INTO partition_logs (operation, message, status, error_details)
        VALUES ('ERROR', 'Failed to create future partitions', 'error', SQLERRM);
        RAISE;
      END;
      $$ LANGUAGE plpgsql;
    `);
    
    log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏—è–º–∏ —Å–æ–∑–¥–∞–Ω—ã', colors.green);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª
    await pool.end();
    
    log('\nüéâ –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', colors.green);
    log('‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é create_future_transaction_partitions() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π –Ω–∞ –±—É–¥—É—â–∏–µ –º–µ—Å—è—Ü—ã', colors.cyan);
    
    return true;
  } catch (error) {
    log(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, colors.red);
    console.error(error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
createPartitioning()
  .then(success => {
    if (success) {
      log('\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', colors.green);
    } else {
      log('\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏', colors.red);
      process.exit(1);
    }
  })
  .catch(error => {
    log(`\nüí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
    console.error(error);
    process.exit(1);
  });